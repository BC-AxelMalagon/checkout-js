{"version":3,"sources":["webpack://checkout/./src/app/checkout/NoopCheckoutSupport.ts","webpack://checkout/./src/app/embeddedCheckout/errors/EmbeddedCheckoutUnsupportedError.ts","webpack://checkout/./src/app/embeddedCheckout/EmbeddedCheckoutSupport.ts","webpack://checkout/./src/app/embeddedCheckout/createEmbeddedCheckoutSupport.ts","webpack://checkout/./src/app/cart/EmptyCartMessage.tsx","webpack://checkout/./src/app/customer/canSignOut.ts","webpack://checkout/./src/app/customer/CustomerInfo.tsx","webpack://checkout/./src/app/ui/icon/IconTag.tsx","webpack://checkout/./src/app/promotion/PromotionBanner.tsx","webpack://checkout/./src/app/promotion/PromotionBannerList.tsx","webpack://checkout/./src/app/shipping/isUsingMultiShipping.ts","webpack://checkout/./src/app/checkout/CheckoutStepType.ts","webpack://checkout/./src/app/shipping/StaticConsignment.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionExpiredError.ts","webpack://checkout/./src/app/ui/loading/LoadingNotification.tsx","webpack://checkout/./src/app/checkout/getCheckoutStepStatuses.ts","webpack://checkout/./src/app/ui/responsive/isMobileView.ts","webpack://checkout/./src/app/ui/icon/IconCheck.tsx","webpack://checkout/./src/app/checkout/CheckoutStepHeader.tsx","webpack://checkout/./src/app/checkout/CheckoutStep.tsx","webpack://checkout/./src/app/checkout/Checkout.tsx","webpack://checkout/./src/app/checkout/navigateToOrderConfirmation.tsx","webpack://checkout/./src/app/checkout/mapToCheckoutProps.ts","webpack://checkout/./src/app/checkout/CheckoutApp.tsx","webpack://checkout/./src/app/guestSignup/AccountService.ts","webpack://checkout/./src/app/guestSignup/SignUpPasswordField.tsx","webpack://checkout/./src/app/guestSignup/GuestSignUpForm.tsx","webpack://checkout/./src/app/guestSignup/SignedUpSuccessAlert.tsx","webpack://checkout/./src/app/guestSignup/errors/AccountCreationRequirementsError.ts","webpack://checkout/./src/app/guestSignup/errors/AccountCreationFailedError.ts","webpack://checkout/./src/app/order/getPaymentInstructions.ts","webpack://checkout/./src/app/giftCertificate/mapFromPayments.ts","webpack://checkout/./src/app/order/getStoreCreditAmount.ts","webpack://checkout/./src/app/order/mapToOrderSummarySubtotalsProps.ts","webpack://checkout/./src/app/order/OrderConfirmationSection.tsx","webpack://checkout/./src/app/order/OrderStatus.tsx","webpack://checkout/./src/app/ui/icon/IconPrint.tsx","webpack://checkout/./src/app/order/PrintLink.tsx","webpack://checkout/./src/app/ui/header/PrimaryHeader.tsx","webpack://checkout/./src/app/order/ThankYouHeader.tsx","webpack://checkout/./src/app/order/OrderConfirmation.tsx","webpack://checkout/./src/app/order/OrderConfirmationApp.tsx","webpack://checkout/./src/app/address/DynamicFormFieldType.ts","webpack://checkout/./src/app/common/bundler/getCurrentScriptPath.ts","webpack://checkout/./src/app/common/bundler/configurePublicPath.ts","webpack://checkout/./src/app/checkout/renderCheckout.tsx","webpack://checkout/./src/app/order/renderOrderConfirmation.tsx","webpack://checkout/./src/app/address/localizeAddress.ts","webpack://checkout/./src/app/address/StaticAddress.tsx","webpack://checkout/./src/app/common/error/ErrorBoundary.tsx","webpack://checkout/./src/app/common/dom/preventDefault.ts","webpack://checkout/./src/app/ui/icon/IconClose.tsx","webpack://checkout/./src/app/locale/withCurrency.tsx","webpack://checkout/./src/app/common/utility/emptyData.ts","webpack://checkout/./src/app/shipping/hasSelectedShippingOptions.ts","webpack://checkout/./src/app/customer/CustomerViewType.ts","webpack://checkout/./src/app/ui/modal/Modal.tsx","webpack://checkout/./src/app/billing/StaticBillingAddress.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionAdditionalDescription.tsx","webpack://checkout/./src/app/shipping/shippingOption/StaticShippingOption.tsx","webpack://checkout/./src/app/common/error/createCustomErrorType.ts","webpack://checkout/./src/app/locale/LocaleProvider.tsx","webpack://checkout/./src/app/common/utility/retry.ts","webpack://checkout/./src/app/ui/modal/ModalHeader.tsx","webpack://checkout/./src/app/ui/icon/IconError.tsx","webpack://checkout/./src/app/ui/button/Button.tsx","webpack://checkout/./src/app/ui/loading/LoadingOverlay.tsx","webpack://checkout/./src/app/locale/TranslatedHtml.tsx","webpack://checkout/./src/app/ui/loading/LazyContainer.tsx","webpack://checkout/./src/app/ui/toggle/Toggle.tsx","webpack://checkout/./src/app/currency/ShopperCurrency.tsx","webpack://checkout/./src/app/payment/storeCredit/isStoreCreditPayment.ts","webpack://checkout/./src/app/ui/form/Form.tsx","webpack://checkout/./src/app/ui/form/Fieldset.tsx","webpack://checkout/./src/app/ui/form/Legend.tsx","webpack://checkout/./src/app/ui/form/TextInput.tsx","webpack://checkout/./src/app/ui/form/FormField.tsx","webpack://checkout/./src/app/embeddedCheckout/EmbeddedCheckoutStylesheet.ts","webpack://checkout/./src/app/common/dom/appendStylesheet.ts","webpack://checkout/./src/app/common/dom/toCssRule.ts","webpack://checkout/./src/app/embeddedCheckout/EmbeddedCheckoutStyleParser.ts","webpack://checkout/./src/app/embeddedCheckout/createEmbeddedCheckoutStylesheet.ts","webpack://checkout/./src/app/common/error/ErrorLogger.ts","webpack://checkout/./src/app/common/error/ConsoleErrorLogger.ts","webpack://checkout/./src/app/common/error/NoopErrorLogger.ts","webpack://checkout/./src/app/common/error/SentryErrorLogger.ts","webpack://checkout/./src/app/common/error/createErrorLogger.ts","webpack://checkout/./src/app/ui/alert/Alert.tsx","webpack://checkout/./src/app/ui/icon/IconSuccess.tsx","webpack://checkout/./src/app/ui/icon/IconInfo.tsx","webpack://checkout/./src/app/common/error/ErrorCode.tsx","webpack://checkout/./src/app/common/error/ErrorModal.tsx","webpack://checkout/./src/app/common/error/isCustomError.ts","webpack://checkout/./src/app/ui/responsive/ViewPicker.tsx","webpack://checkout/./src/app/ui/responsive/MobileView.tsx","webpack://checkout/./src/app/locale/LocaleContext.ts","webpack://checkout/./src/app/ui/form/FormProvider.tsx","webpack://checkout/./src/app/locale/withLanguage.tsx","webpack://checkout/./src/app/common/error/computeErrorCode.ts","webpack://checkout/./src/app/checkout/CheckoutContext.tsx","webpack://checkout/./src/app/ui/loading/LoadingSpinner.tsx","webpack://checkout/./src/app/ui/responsive/breakpoints.ts","webpack://checkout/./src/app/address/AddressType.ts","webpack://checkout/./src/app/common/hoc/createMappableInjectHoc.tsx","webpack://checkout/./src/app/checkout/withCheckout.tsx","webpack://checkout/./src/app/locale/TranslatedString.tsx","webpack://checkout/./src/app/ui/form/Input.tsx","webpack://checkout/./src/app/ui/form/Label.tsx","webpack://checkout/./src/app/ui/form/BasicFormField.tsx","webpack://checkout/./src/app/ui/form/FormFieldError.tsx","webpack://checkout/./src/app/shipping/hasUnassignedLineItems.ts","webpack://checkout/./src/app/address/isValidAddress.ts","webpack://checkout/./src/app/shipping/getLineItemsCount.ts","webpack://checkout/./src/app/shipping/StaticConsignmentItemList.tsx","webpack://checkout/./src/app/shipping/findLineItems.ts","webpack://checkout/./src/app/customer/CheckoutButton.tsx","webpack://checkout/./src/app/customer/CheckoutButtonList.tsx","webpack://checkout/./src/app/locale/getLanguageService.ts","webpack://checkout/./src/app/embeddedCheckout/isEmbedded.ts","webpack://checkout/./src/app/common/error/CustomError.ts","webpack://checkout/./src/app/checkout/CheckoutProvider.tsx","webpack://checkout/./src/app/common/error/isRequestError.ts","webpack://checkout/./src/app/address/getAddressValidationSchema.ts","webpack://checkout/./src/app/address/getAddressCustomFieldsValidationSchema.ts","webpack://checkout/./src/app/address/mapAddressToFormValues.ts","webpack://checkout/./src/app/giftCertificate/isGiftCertificatePayment.ts","webpack://checkout/./src/app/ui/form/FormFieldContainer.tsx","webpack://checkout/./src/app/common/hoc/createInjectHoc.tsx","webpack://checkout/./src/app/polyfill.ts","webpack://checkout/./src/app/ui/icon/withIconContainer.tsx","webpack://checkout//webpack/bootstrap","webpack://checkout//external \"tslib\"","webpack://checkout//external \"@bigcommerce/data-store\"","webpack://checkout//external \"lodash\"","webpack://checkout//external \"rxjs\"","webpack://checkout//external \"@bigcommerce/memoize\"","webpack://checkout//src/shipping/consignment-actions.ts","webpack://checkout//external \"rxjs/operators\"","webpack://checkout//src/shipping/shipping-strategy-actions.ts","webpack://checkout//src/customer/customer-strategy-actions.ts","webpack://checkout//src/payment/payment-strategy-actions.ts","webpack://checkout//src/common/error/errors/missing-data-error.ts","webpack://checkout//src/checkout/checkout-actions.ts","webpack://checkout//src/order/order-actions.ts","webpack://checkout//src/payment/payment-method-actions.ts","webpack://checkout//src/billing/billing-address-actions.ts","webpack://checkout//src/checkout-buttons/checkout-button-actions.ts","webpack://checkout//src/coupon/coupon-actions.ts","webpack://checkout//src/common/error/errors/standard-error.ts","webpack://checkout//src/common/utility/set-prototype-of.ts","webpack://checkout//src/embedded-checkout/embedded-checkout-events.ts","webpack://checkout//src/payment/instrument/instrument-actions.ts","webpack://checkout//src/coupon/gift-certificate-actions.ts","webpack://checkout//src/remote-checkout/remote-checkout-actions.ts","webpack://checkout//src/payment/strategies/googlepay/googlepay.ts","webpack://checkout//external \"@bigcommerce/script-loader\"","webpack://checkout//external \"card-validator\"","webpack://checkout//src/common/error/errors/request-error.ts","webpack://checkout//src/payment/payment-status-types.ts","webpack://checkout//src/config/config-actions.ts","webpack://checkout//src/common/http-request/content-type.ts","webpack://checkout//src/payment/errors/payment-method-client-unavailable-error.ts","webpack://checkout//src/common/utility/is-plain-object.ts","webpack://checkout//src/geography/country-actions.ts","webpack://checkout//src/shipping/shipping-country-actions.ts","webpack://checkout//src/signin-email/signin-email-actions.ts","webpack://checkout//external \"@bigcommerce/request-sender\"","webpack://checkout//src/store-credit/store-credit-actions.ts","webpack://checkout//src/payment/is-vaulted-instrument.ts","webpack://checkout//src/hosted-form/iframe-content/hosted-input-events.ts","webpack://checkout//src/common/error/errors/invalid-argument-error.ts","webpack://checkout//external \"local-storage-fallback\"","webpack://checkout//src/common/iframe/is-iframe-event.ts","webpack://checkout//src/payment/payment-method-types.ts","webpack://checkout//src/address/map-to-internal-address.ts","webpack://checkout//src/payment/payment-actions.ts","webpack://checkout//src/common/http-request/join-includes.ts","webpack://checkout//src/cart/map-to-internal-line-items.ts","webpack://checkout//src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkout//external \"shallowequal\"","webpack://checkout//src/hosted-form/hosted-field-events.ts","webpack://checkout//src/common/utility/is-equal.ts","webpack://checkout//external \"@bigcommerce/form-poster\"","webpack://checkout//src/common/http-request/internal-api-headers.ts","webpack://checkout//src/cart/map-to-internal-line-item.ts","webpack://checkout//external \"reselect\"","webpack://checkout//src/shipping/map-to-internal-shipping-option.ts","webpack://checkout//src/spam-protection/spam-protection-actions.ts","webpack://checkout//src/customer/customer-actions.ts","webpack://checkout//src/common/utility/amount-transformer.ts","webpack://checkout//src/common/url/parse-url.ts","webpack://checkout//src/common/selector/with-memoized-combiner.ts","webpack://checkout//src/common/error/error-actions.ts","webpack://checkout//src/payment/payment-method-action-creator.ts","webpack://checkout//src/payment/payment-method-request-sender.ts","webpack://checkout//src/checkout/checkout-default-includes.ts","webpack://checkout//src/payment/errors/payment-method-failed-error.ts","webpack://checkout//src/common/utility/bind-decorator.ts","webpack://checkout//src/customer/map-to-internal-customer.ts","webpack://checkout//src/order/map-to-internal-order.ts","webpack://checkout//src/cart/map-to-internal-cart.ts","webpack://checkout//src/promotion/map-to-discount-notifications.ts","webpack://checkout//external \"@bigcommerce/bigpay-client\"","webpack://checkout//src/payment/strategies/amazon-pay-v2/amazon-pay-v2.ts","webpack://checkout//src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkout//src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkout//src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkout//src/billing/is-billing-address-like.ts","webpack://checkout//src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://checkout//src/hosted-form/iframe-content/card-number-formatter.ts","webpack://checkout//src/coupon/map-to-internal-coupon.ts","webpack://checkout//src/common/error/errors/not-initialized-error.ts","webpack://checkout//src/common/error/throw-error-action.ts","webpack://checkout//src/common/data-store/cache-action.ts","webpack://checkout//src/common/data-store/is-action-options.ts","webpack://checkout//src/common/data-store/cachable-action-decorator.ts","webpack://checkout//src/common/http-request/join-or-merge-includes.ts","webpack://checkout//src/common/http-request/merge-includes.ts","webpack://checkout//external \"iframe-resizer\"","webpack://checkout//external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkout//src/common/utility/omit-deep.ts","webpack://checkout//src/checkout/checkout-action-creator.ts","webpack://checkout//src/shipping/consignment-action-creator.ts","webpack://checkout//src/shipping/consignment-request-sender.ts","webpack://checkout//src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkout//src/payment/payment-request-transformer.ts","webpack://checkout//src/payment/payment-request-sender.ts","webpack://checkout//src/common/utility/is-private.ts","webpack://checkout//src/common/error/errors/unrecoverable-error.ts","webpack://checkout//src/common/error/errors/map-from-internal-error-response.ts","webpack://checkout//src/common/error/request-error-factory.ts","webpack://checkout//src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkout//src/common/error/clear-error-reducer.ts","webpack://checkout//src/common/utility/replace.ts","webpack://checkout//src/common/utility/object-set.ts","webpack://checkout//src/billing/billing-address-state.ts","webpack://checkout//src/billing/billing-address-reducer.ts","webpack://checkout//src/common/utility/array-replace.ts","webpack://checkout//src/common/utility/object-merge.ts","webpack://checkout//src/cart/cart-state.ts","webpack://checkout//src/cart/cart-reducer.ts","webpack://checkout//src/checkout-buttons/checkout-button-state.ts","webpack://checkout//src/checkout-buttons/checkout-button-reducer.ts","webpack://checkout//src/config/config-state.ts","webpack://checkout//src/config/config-reducer.ts","webpack://checkout//src/coupon/coupon-state.ts","webpack://checkout//src/coupon/coupon-reducer.ts","webpack://checkout//src/coupon/gift-certificate-state.ts","webpack://checkout//src/coupon/gift-certificate-reducer.ts","webpack://checkout//src/customer/customer-state.ts","webpack://checkout//src/customer/customer-reducer.ts","webpack://checkout//src/customer/customer-strategy-state.ts","webpack://checkout//src/customer/customer-strategy-reducer.ts","webpack://checkout//src/geography/country-state.ts","webpack://checkout//src/geography/country-reducer.ts","webpack://checkout//src/order/order-state.ts","webpack://checkout//src/order/order-reducer.ts","webpack://checkout//src/payment/payment-reducer.ts","webpack://checkout//src/payment/payment-method-state.ts","webpack://checkout//src/payment/payment-method-reducer.ts","webpack://checkout//src/common/utility/merge-or-push.ts","webpack://checkout//src/payment/payment-strategy-state.ts","webpack://checkout//src/payment/payment-strategy-reducer.ts","webpack://checkout//src/payment/instrument/instrument-state.ts","webpack://checkout//src/payment/instrument/instrument-reducer.ts","webpack://checkout//src/remote-checkout/remote-checkout-state.ts","webpack://checkout//src/remote-checkout/remote-checkout-reducer.ts","webpack://checkout//src/shipping/consignment-state.ts","webpack://checkout//src/shipping/consignment-reducer.ts","webpack://checkout//src/shipping/shipping-country-state.ts","webpack://checkout//src/shipping/shipping-country-reducer.ts","webpack://checkout//src/shipping/shipping-strategy-state.ts","webpack://checkout//src/shipping/shipping-strategy-reducer.ts","webpack://checkout//src/signin-email/signin-email-state.ts","webpack://checkout//src/signin-email/signin-email-reducer.ts","webpack://checkout//src/store-credit/store-credit-reducer.ts","webpack://checkout//src/subscription/subscriptions-state.ts","webpack://checkout//src/subscription/subscriptions-reducer.ts","webpack://checkout//src/checkout/checkout-state.ts","webpack://checkout//src/checkout/checkout-reducer.ts","webpack://checkout//src/common/utility/guard.ts","webpack://checkout//src/common/utility/create-freeze-proxy.ts","webpack://checkout//src/payment/instrument/supported-payment-instruments.ts","webpack://checkout//src/address/is-address-equal.ts","webpack://checkout//src/store-credit/store-credit-state.ts","webpack://checkout//src/checkout/create-internal-checkout-selectors.ts","webpack://checkout//src/billing/billing-address-selector.ts","webpack://checkout//src/checkout-buttons/checkout-button-selector.ts","webpack://checkout//src/coupon/coupon-selector.ts","webpack://checkout//src/customer/customer-selector.ts","webpack://checkout//src/remote-checkout/remote-checkout-selector.ts","webpack://checkout//src/shipping/shipping-address-selector.ts","webpack://checkout//src/payment/payment-selector.ts","webpack://checkout//src/signin-email/signin-email-selector.ts","webpack://checkout//src/cart/cart-selector.ts","webpack://checkout//src/config/config-selector.ts","webpack://checkout//src/geography/country-selector.ts","webpack://checkout//src/customer/customer-strategy-selector.ts","webpack://checkout//src/coupon/gift-certificate-selector.ts","webpack://checkout//src/payment/instrument/instrument-selector.ts","webpack://checkout//src/form/form-selector.ts","webpack://checkout//src/payment/payment-method-selector.ts","webpack://checkout//src/payment/payment-strategy-selector.ts","webpack://checkout//src/shipping/shipping-country-selector.ts","webpack://checkout//src/shipping/shipping-strategy-selector.ts","webpack://checkout//src/shipping/consignment-selector.ts","webpack://checkout//src/checkout/checkout-selector.ts","webpack://checkout//src/order/order-selector.ts","webpack://checkout//src/store-credit/store-credit-selector.ts","webpack://checkout//src/subscription/subscriptions-selector.ts","webpack://checkout//src/checkout/create-checkout-store.ts","webpack://checkout//src/checkout/create-action-transformer.ts","webpack://checkout//src/common/error/create-request-error-factory.ts","webpack://checkout//src/checkout/create-checkout-store-reducer.ts","webpack://checkout//src/checkout/errors/checkout-not-available-error.ts","webpack://checkout//src/checkout/checkout-request-sender.ts","webpack://checkout//src/checkout/checkout-params.ts","webpack://checkout//src/coupon/map-to-internal-gift-certificate.ts","webpack://checkout//src/common/iframe/iframe-event-poster.ts","webpack://checkout//src/common/iframe/iframe-event-listener.ts","webpack://checkout//src/common/storage/browser-storage.ts","webpack://checkout//src/common/selector/selector-decorator.ts","webpack://checkout//src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkout//src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkout//src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkout//src/checkout-buttons/checkout-button-initializer.ts","webpack://checkout//src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkout//src/common/dom/is-element-id.ts","webpack://checkout//src/common/dom/set-unique-element-id.ts","webpack://checkout//src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkout//src/payment/strategies/paypal-commerce/paypal-commerce-sdk.ts","webpack://checkout//src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack://checkout//src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkout//src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkout//src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkout//src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkout//src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://checkout//src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkout//src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkout//src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkout//src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkout//src/embedded-checkout/embedded-checkout.ts","webpack://checkout//src/embedded-checkout/loading-indicator.ts","webpack://checkout//src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkout//src/embedded-checkout/embed-checkout.ts","webpack://checkout//src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkout//src/common/error/errors/custom-error.ts","webpack://checkout//src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkout//src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkout//src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkout//src/common/utility/cache-key-maps.ts","webpack://checkout//src/common/utility/cache-key-resolver.ts","webpack://checkout//external \"messageformat\"","webpack://checkout//src/common/error/errors/map-from-payment-error-response.ts","webpack://checkout//src/common/error/errors/timeout-error.ts","webpack://checkout//src/payment/errors/payment-method-invalid-error.ts","webpack://checkout//src/common/selector/create-selector.ts","webpack://checkout//src/subscription/subscriptions-actions.ts","webpack://checkout//src/config/config-action-creator.ts","webpack://checkout//src/config/config-request-sender.ts","webpack://checkout//src/subscription/subscriptions-request-sender.ts","webpack://checkout//src/billing/billing-address-request-sender.ts","webpack://checkout//src/common/registry/registry.ts","webpack://checkout//src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkout//src/payment/strategies/googlepay/googlepay-adyenv2-initializer.ts","webpack://checkout//src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkout//src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack://checkout//src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkout//src/payment/strategies/googlepay/googlepay-checkoutcom-initializer.ts","webpack://checkout//src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkout//src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack://checkout//src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack://checkout//src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkout//src/payment/strategies/paypal-commerce/paypal-commerce-script-loader.ts","webpack://checkout//src/payment/strategies/paypal-commerce/paypal-commerce-request-sender.ts","webpack://checkout//src/common/iframe/iframe-resizer.ts","webpack://checkout//src/common/error/error-action-creator.ts","webpack://checkout//src/common/utility/get-environment.ts","webpack://checkout//src/common/log/create-logger.ts","webpack://checkout//src/common/log/console-logger.ts","webpack://checkout//src/common/log/noop-logger.ts","webpack://checkout//src/common/log/get-default-logger.ts","webpack://checkout//src/coupon/coupon-action-creator.ts","webpack://checkout//src/coupon/coupon-request-sender.ts","webpack://checkout//src/coupon/gift-certificate-action-creator.ts","webpack://checkout//src/coupon/gift-certificate-request-sender.ts","webpack://checkout//src/customer/customer-strategy-action-creator.ts","webpack://checkout//src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkout//src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkout//src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkout//src/payment/payment-strategy-type.ts","webpack://checkout//src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkout//src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkout//src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkout//src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkout//src/customer/customer-action-creator.ts","webpack://checkout//src/customer/customer-request-sender.ts","webpack://checkout//src/common/error/errors/not-implemented-error.ts","webpack://checkout//src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkout//src/customer/strategies/amazon-pay-v2/amazon-pay-v2-customer-strategy.ts","webpack://checkout//src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkout//src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkout//src/customer/strategies/default/default-customer-strategy.ts","webpack://checkout//src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkout//src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkout//src/customer/strategies/square/square-customer-strategy.ts","webpack://checkout//src/geography/country-action-creator.ts","webpack://checkout//src/geography/country-request-sender.ts","webpack://checkout//src/order/order-request-sender.ts","webpack://checkout//src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkout//src/order/order-action-creator.ts","webpack://checkout//src/order/errors/order-finalization-not-required-error.ts","webpack://checkout//src/payment/payment-strategy-action-creator.ts","webpack://checkout//src/cart/cart-comparator.ts","webpack://checkout//src/cart/errors/cart-changed-error.ts","webpack://checkout//src/checkout/checkout-validator.ts","webpack://checkout//src/common/utility/cancellable-promise.ts","webpack://checkout//src/common/dom/errors/unexpected-detachment-error.ts","webpack://checkout//src/common/dom/detachment-observer.ts","webpack://checkout//src/common/dom/mutation-observer.ts","webpack://checkout//src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://checkout//src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack://checkout//src/spam-protection/errors/carding-protection-failed-error.ts","webpack://checkout//src/spam-protection/payment-human-verification-handler.ts","webpack://checkout//src/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkout//src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://checkout//src/spam-protection/google-recaptcha.ts","webpack://checkout//src/spam-protection/google-recaptcha-script-loader.ts","webpack://checkout//src/spam-protection/create-spam-protection.ts","webpack://checkout//src/hosted-form/errors/invalid-hosted-form-error.ts","webpack://checkout//src/hosted-form/hosted-field.ts","webpack://checkout//src/hosted-form/hosted-form.ts","webpack://checkout//src/hosted-form/hosted-form-order-data-transformer.ts","webpack://checkout//src/hosted-form/hosted-form-factory.ts","webpack://checkout//src/spam-protection/spam-protection-action-creator.ts","webpack://checkout//src/spam-protection/spam-protection-request-sender.ts","webpack://checkout//src/store-credit/store-credit-action-creator.ts","webpack://checkout//src/store-credit/store-credit-request-sender.ts","webpack://checkout//src/payment/payment-action-creator.ts","webpack://checkout//src/payment/payment-strategy-registry.ts","webpack://checkout//src/common/browser-info/get-browser-info.ts","webpack://checkout//src/payment/strategies/adyenv2/adyenv2.ts","webpack://checkout//src/payment/errors/payment-argument-invalid-error.ts","webpack://checkout//src/payment/errors/payment-method-cancelled-error.ts","webpack://checkout//src/payment/strategies/adyenv2/adyenv2-payment-strategy.ts","webpack://checkout//src/order/order-params.ts","webpack://checkout//src/payment/strategies/adyenv2/adyenv2-script-loader.ts","webpack://checkout//src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkout//src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkout//src/payment/strategies/affirm/affirmJs.ts","webpack://checkout//src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkout//src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkout//src/address/is-internal-address-equal.ts","webpack://checkout//src/common/utility/omit-private.ts","webpack://checkout//src/address/map-from-internal-address.ts","webpack://checkout//src/payment/strategies/braintree/braintree-payment-options.ts","webpack://checkout//src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkout//src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-strategy.ts","webpack://checkout//src/payment/strategies/bluesnapv2/bluesnapv2-payment-strategy.ts","webpack://checkout//src/payment/strategies/bolt/bolt-payment-strategy.ts","webpack://checkout//src/payment/is-nonce-like.ts","webpack://checkout//src/payment/strategies/bolt/bolt-script-loader.ts","webpack://checkout//src/common/overlay/overlay.ts","webpack://checkout//src/common/overlay/overlay-style.ts","webpack://checkout//src/payment/strategies/braintree/braintree-regular-field.ts","webpack://checkout//src/payment/strategies/braintree/braintree-hosted-form.ts","webpack://checkout//src/payment/strategies/braintree/is-braintree-form-fields-map.ts","webpack://checkout//src/payment/strategies/cardinal/cardinal.ts","webpack://checkout//src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkout//src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkout//src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkout//src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkout//src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack://checkout//src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkout//src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack://checkout//src/payment/strategies/cardinal/cardinal-client.ts","webpack://checkout//src/payment/strategies/chasepay/chasepay.ts","webpack://checkout//src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://checkout//src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkout//src/payment/strategies/paypal-commerce/paypal-commerce-payment-initialize-options.ts","webpack://checkout//src/payment/strategies/paypal-commerce/paypal-commerce-hosted-form.ts","webpack://checkout//src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkout//src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkout//src/payment/strategies/credit-card-redirect/credit-card-redirect-payment-strategy.ts","webpack://checkout//src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkout//src/payment/strategies/external/external-payment-strategy.ts","webpack://checkout//src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkout//src/payment/strategies/klarnav2/klarna-supported-countries.ts","webpack://checkout//src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkout//src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkout//src/payment/strategies/klarnav2/klarnav2-payment-strategy.ts","webpack://checkout//src/payment/strategies/klarnav2/klarnav2-script-loader.ts","webpack://checkout//src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkout//src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkout//src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkout//src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkout//src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkout//src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkout//src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkout//src/payment/strategies/paypal-commerce/paypal-commerce-credit-card-payment-strategy.ts","webpack://checkout//src/payment/strategies/paypal-commerce/paypal-commerce-regular-field.ts","webpack://checkout//src/payment/strategies/square/square-form.ts","webpack://checkout//src/payment/strategies/paypal-commerce/paypal-commerce-payment-strategy.ts","webpack://checkout//src/payment/strategies/paypal-commerce/paypal-commerce-payment-processor.ts","webpack://checkout//src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkout//src/common/error/errors/unsupported-browser-error.ts","webpack://checkout//src/payment/strategies/square/square-payment-strategy.ts","webpack://checkout//src/payment/strategies/stripev3/stripev3.ts","webpack://checkout//src/payment/strategies/square/square-script-loader.ts","webpack://checkout//src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkout//src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkout//src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkout//src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkout//src/payment/errors/payment-method-declined-error.ts","webpack://checkout//src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkout//src/payment/strategies/zip/zip-script-loader.ts","webpack://checkout//src/common/data-store/create-data-store-projection.ts","webpack://checkout//src/payment/instrument/instrument-action-creator.ts","webpack://checkout//src/common/date-time/is-future.ts","webpack://checkout//src/common/date-time/add-minutes.ts","webpack://checkout//src/payment/instrument/instrument-response-transformer.ts","webpack://checkout//src/payment/instrument/map-to-paypal-instrument.ts","webpack://checkout//src/payment/instrument/map-to-bank-instrument.ts","webpack://checkout//src/payment/instrument/map-to-card-instrument.ts","webpack://checkout//src/payment/instrument/instrument-request-sender.ts","webpack://checkout//src/shipping/shipping-country-action-creator.ts","webpack://checkout//src/shipping/shipping-country-request-sender.ts","webpack://checkout//src/shipping/shipping-strategy-action-creator.ts","webpack://checkout//src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkout//src/shipping/strategies/amazon-pay-v2/amazon-pay-v2-shipping-strategy.ts","webpack://checkout//src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkout//src/signin-email/signin-email-action-creator.ts","webpack://checkout//src/signin-email/signin-email-request-sender.ts","webpack://checkout//src/common/utility/clone-result.ts","webpack://checkout//src/common/selector/create-shallow-equal-selector.ts","webpack://checkout//src/checkout/create-checkout-selectors.ts","webpack://checkout//src/checkout/checkout-store-selector.ts","webpack://checkout//src/checkout/checkout-store-error-selector.ts","webpack://checkout//src/checkout/checkout-store-status-selector.ts","webpack://checkout//src/common/error/error-message-transformer.ts","webpack://checkout//src/common/utility/to-single-line.ts","webpack://checkout//src/checkout/checkout-service.ts","webpack://checkout//src/checkout/create-checkout-service-error-transformer.ts","webpack://checkout//src/checkout/create-checkout-service.ts","webpack://checkout//src/payment/create-payment-client.ts","webpack://checkout//src/customer/create-customer-strategy-registry.ts","webpack://checkout//src/payment/create-payment-strategy-registry.ts","webpack://checkout//src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkout//src/shipping/create-shipping-strategy-registry.ts","webpack://checkout//src/locale/language-service.ts","webpack://checkout//src/locale/create-language-service.ts","webpack://checkout//src/currency/currency-formatter.ts","webpack://checkout//src/currency/currency-service.ts","webpack://checkout//src/currency/create-currency-service.ts","webpack://checkout//src/analytics/analytics-step-tracker.ts","webpack://checkout//src/analytics/noop-step-tracker.ts","webpack://checkout//src/analytics/create-step-tracker.ts","webpack://checkout//src/analytics/is-analytics-step-tracker-window.ts","webpack://checkout//src/bundles/checkout-sdk.ts","webpack://checkout//src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkout//src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkout//src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkout//src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-processor.ts","webpack://checkout//src/payment/strategies/amazon-pay-v2/amazon-pay-v2-script-loader.ts","webpack://checkout//src/payment/strategies/amazon-pay-v2/create-amazon-pay-v2-payment-processor.ts","webpack://checkout//src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://checkout//src/billing/billing-address-action-creator.ts","webpack://checkout//src/subscription/errors/update-subscriptions-error.ts","webpack://checkout//src/subscription/subscriptions-action-creator.ts","webpack://checkout//src/shipping/getShippableItemsCount.ts","webpack://checkout//src/shipping/getLineItemsCount.ts"],"names":["isSupported","message","name","EmbeddedCheckoutUnsupportedError","prototype","CustomError","unsupportedMethods","langService","ids","filter","id","indexOf","length","this","translate","methods","join","UNSUPPORTED_METHODS","state","isWaiting","componentDidMount","waitInterval","props","waitToken","setTimeout","setState","componentWillUnmount","clearInterval","render","loginUrl","LoadingOverlay","hideContentWhenLoading","isLoading","TranslatedHtml","data","url","SUPPORTED_SIGNOUT_METHODS","isSupportedSignoutMethod","methodId","canSignOut","customer","checkout","isGuest","payments","payment","providerId","withCheckout","checkoutService","checkoutState","getBillingAddress","getCheckout","getCustomer","isSigningOut","billingAddress","email","isSignedIn","signOut","signOutCustomer","onSignOut","onSignOutError","className","Button","onClick","isCartEmpty","window","location","reload","type","size","Tiny","testId","variant","Secondary","TranslatedString","withIconContainer","height","viewBox","width","xmlns","d","Alert","additionalClassName","icon","Info","dangerouslySetInnerHTML","__html","sanitize","banners","reduce","result","promotion","map","banner","index","key","text","isUsingMultiShipping","consignments","lineItems","consignment","lineItemIds","hasUnassignedLineItems","CheckoutStepType","cart","compactView","address","selectedShippingOption","StaticAddress","AddressType","Shipping","StaticConsignmentItemList","StaticShippingOption","displayAdditionalInformation","method","getLanguageService","title","ShippingOptionExpiredError","getCustomerStepStatus","hasEmail","isUsingWallet","some","isComplete","Customer","isActive","isEditable","isRequired","getBillingStepStatus","getBillingAddressFields","countryCode","billingAddressFields","hasAddress","isValidAddress","billingAddressCustomFields","hasCustomFields","isAmazonPayBillingStepComplete","Billing","getShippingStepStatus","getShippingAddress","getConsignments","getCart","getSelectedPaymentMethod","shippingAddress","getShippingAddressFields","shippingAddressFields","hasRemoteAddress","hasOptions","hasSelectedShippingOptions","hasUnassignedItems","physicalItems","lineItem","isShippingRequired","getPaymentStepStatus","getOrder","order","Payment","customerStep","shippingStep","billingStep","paymentStep","steps","defaultActiveStep","find","step","isPrevStepComplete","slice","every","prevStep","query","heading","onEdit","summary","preventDefault","containerRef","contentRef","handleTransitionEnd","node","done","addEventListener","focusStep","componentDidUpdate","prevProps","timeoutRef","clearTimeout","undefined","ref","renderContent","children","MobileView","matched","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","delay","matchMedia","matches","getTransitionDelay","input","getChildInput","position","getScrollPosition","onExpanded","focus","isNaN","scrollTo","container","current","querySelector","getParentContainer","top","topOffset","innerHeight","getBoundingClientRect","scrollY","pageYOffset","parentElement","classList","contains","timeoutDelay","parseFloat","getComputedStyle","transitionDuration","retry","CartSummary","CartSummaryDrawer","isRedirecting","isMultiShippingMode","handleToggleMultiShipping","navigateToNextIncompleteStep","options","activeStepIndex","activeStep","previousStep","Math","max","stepTracker","trackStepCompleted","navigateToStep","navigateToOrderConfirmation","embeddedMessenger","postComplete","href","replace","Promise","checkEmbeddedSupport","methodIds","embeddedSupport","handleCartChangedError","handleConsignmentsUpdated","prevHasSelectedShippingOptions","activeStepType","newHasSelectedShippingOptions","error","handleCloseErrorModal","handleChangeCustomerViewType","viewType","customerViewType","handleExpanded","trackStepViewed","handleUnhandledError","handleError","log","postError","handleEditStep","handleReady","isDefault","handleSignOut","isGuestEnabled","postSignedOut","CustomerViewType","Guest","isEmbedded","assign","handleShippingNextStep","billingSameAsShipping","handleShippingSignIn","Login","unsubscribeFromConsignments","checkoutId","containerId","createStepTracker","createEmbeddedMessenger","embeddedStylesheet","loadCheckout","subscribeToConsignments","params","include","getConfig","siteLink","errorFlashMessages","getFlashMessages","Error","messenger","parentOrigin","receiveStyles","styles","append","postFrameLoaded","contentId","postLoaded","trackCheckoutStarted","ErrorModal","onClose","isPending","promotions","defaultStepType","renderStep","renderCartSummary","renderCustomerStep","renderShippingStep","renderBillingStep","renderPaymentStep","LazyContainer","onChangeViewType","onContinueAsGuest","onContinueAsGuestError","onReady","onSignIn","onSignInError","onUnhandledError","hasCartChanged","cartHasChanged","navigateNextStep","onToggleMultiShipping","StaticBillingAddress","onCartChangedError","onFinalize","onSubmit","onSubmitError","clearError","withLanguage","errors","statuses","submitOrderError","getSubmitOrderError","checkoutSettings","links","subscribeToConsignmentsSelector","subscribe","subscriber","isLoadingCheckout","language","locale","getLocale","shouldWarnMutation","createEmbeddedCheckoutStylesheet","errorLogger","createErrorLogger","sentry","sentryConfig","errorTypes","publicPath","setAppElement","ErrorBoundary","logger","LocaleProvider","CheckoutProvider","requestSender","create","body","put","then","response","minLength","renderPasswordInput","field","TextInput","renderPasswordConfirmationInput","passwordLabelContent","passwordConfirmationLabelContent","FormField","labelContent","mapPropsToValues","password","confirmPassword","handleSubmit","values","onSignUp","validationSchema","passwordRequirements","description","numeric","alpha","required","min","oneOf","isSigningUp","Form","Fieldset","legend","Legend","Primary","Success","requirements","AccountCreationRequirementsError","AccountCreationFailedError","isDefaultOrderPayment","isGiftCertificatePayment","isStoreCreditPayment","gatewayPayment","detail","instructions","mapFromPayments","amount","code","remaining","used","balance","purchaseDate","getStoreCreditAmount","total","mapToOrderSummarySubtotalsProps","baseAmount","discountAmount","shippingCostBeforeDiscount","handlingCostTotal","coupons","taxes","subtotalAmount","shippingAmount","storeCreditAmount","handlingAmount","giftCertificates","OrderStatusMessage","orderNumber","orderStatus","supportEmail","supportPhoneNumber","orderId","status","mandate","rel","target","provider","hasDigitalItems","isDownloadable","handleClick","print","OrderSummary","OrderSummaryDrawer","handleErrorModalClose","handleSignUp","createAccount","config","shopperConfig","hasSignedUp","catch","loadOrder","trackOrderComplete","isLoadingOrder","LoadingSpinner","paymentInstructions","orderEmail","storePhoneNumber","firstName","renderGuestSignUp","customerCanBeCreated","renderOrderSummary","renderErrorModal","getPasswordRequirements","currency","shopperCurrency","headerLink","storeCurrency","orderAmount","shouldShowErrorCode","allSlashes","RegExp","minlength","context","accountService","newsletter","DynamicFormFieldType","path","document","currentScript","src","configurePublicPath","scriptPath","split","substr","renderCheckout","configuredPublicPath","CheckoutApp","getElementById","renderOrderConfirmation","OrderConfirmationApp","countries","country","states","subdivisions","stateOrProvinceCode","localizedCountry","localizedProvince","stateOrProvince","getBillingCountries","fields","addressWithoutLocalization","custom","lastName","phone","company","address1","address2","city","postalCode","getDerivedStateFromError","componentDidCatch","fallback","Component","fn","event","withCurrency","displayNamePrefix","pickProps","value","EMPTY_ARRAY","Object","freeze","closeButtonLabel","footer","header","additionalHeaderClassName","additionalBodyClassName","additionalModalClassName","onRequestClose","shouldShowCloseButton","rest","handleClose","ariaHideApp","bodyOpenClassName","base","afterOpen","beforeClose","closeTimeoutMS","overlayClassName","shouldCloseOnOverlayClick","Toggle","openByDefault","isOpen","toggle","imageUrl","alt","transitTime","additionalDescription","ShopperCurrency","cost","setPrototypeOf","object","__proto__","languageService","getContextValue","date","inputFormat","inputDateFormat","unsubscribe","Provider","DEFAULT_OPTIONS","count","interval","resolve","ButtonVariant","ButtonSize","getClassName","isFullWidth","Action","Small","Large","disabled","unmountContentWhenLoading","style","display","ADD_ATTR","filterError","toCustomerCurrency","focusOnError","erroredFormField","handleSubmitCapture","setSubmitted","noValidate","onSubmitCapture","hidden","appearFocused","label","onChange","renderField","htmlFor","embeddedCheckoutStyleParser","_parser","rules","createElement","head","appendChild","sheet","CSSStyleSheet","forEach","rule","insertRule","appendStylesheet","parse","toCSSRule","selector","mergedStyles","push","secondaryText","secondaryHeading","link","hover","button","active","secondaryButton","placeholder","select","checkbox","radio","checklist","checked","discountBanner","loadingBanner","orderSummary","ErrorLevelType","customConsole","console","tags","level","info","Warning","warn","handleBeforeSend","hint","exception","originalException","hasUsefulStacktrace","handleRewriteFrame","frame","filename","consoleLogger","beforeSend","blacklistUrls","integrations","GlobalHandlers","onerror","onunhandledrejection","iteratee","scope","errorCode","computeErrorCode","setTags","setLevel","mapToSentryLevel","setFingerprint","exceptions","stacktrace","frames","serviceConfig","AlertType","IconError","renderDefaultIcon","handleOnRequestClose","nativeEvent","Modal","renderFooter","renderHeader","renderBody","customError","isCustomError","ModalHeader","renderErrorCode","isRequestError","headers","queries","mobile","LocaleContext","FormContext","isSubmitted","initialIsSubmitted","contextValue","toUpperCase","CheckoutContext","MOBILE_MAX_WIDTH","ContextComponent","mapToPropsOrFactory","OriginalComponent","InnerDecoratedComponent","DecoratedComponent","mapToProps","isMapToPropsFactory","mappedProps","mergedProps","displayName","Input","InnerField","component","form","InnerFieldInput","hasError","prevForm","prevField","nextForm","nextField","nextProps","getTime","renderInnerField","renderMessage","Consumer","item","addedByPromotion","formFields","isValidSync","getLineItemsCount","quantity","itemId","findLineItems","initialize","onError","deinitialize","SUPPORTED_METHODS","supportedMethodIds","defaultTranslations","pathname","captureStackTrace","stack","setDefaultValues","defaultError","defaultTitle","getState","ERROR_KEYS","schema","concat","customFields","maxValue","minValue","fieldType","requiredErrorMessage","strict","nullable","transform","originalValue","mapAddressToFormValues","addressFormValues","fieldName","defaultValue","fieldValue","Date","getDefaultValue","getValue","shouldSaveAddress","createInjectHoc","injectedProps","IconSize","Medium","installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","t","mode","__esModule","ns","bind","n","property","hasOwnProperty","p","s","require","ConsignmentActionType","e","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","LoadShippingOptionsRequested","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","ShippingStrategyActionType","UpdateAddressFailed","UpdateAddressRequested","UpdateAddressSucceeded","SelectOptionFailed","SelectOptionRequested","SelectOptionSucceeded","InitializeFailed","InitializeRequested","InitializeSucceeded","DeinitializeFailed","DeinitializeRequested","DeinitializeSucceeded","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","CustomerStrategyActionType","SignInFailed","SignInRequested","SignInSucceeded","SignOutFailed","SignOutRequested","SignOutSucceeded","PaymentStrategyActionType","ExecuteFailed","ExecuteRequested","ExecuteSucceeded","FinalizeFailed","FinalizeRequested","FinalizeSucceeded","MissingDataErrorType","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentToken","MissingShippingAddress","subtype","CheckoutActionType","LoadCheckoutRequested","LoadCheckoutSucceeded","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","OrderActionType","LoadOrderRequested","LoadOrderSucceeded","LoadOrderFailed","LoadOrderPaymentsRequested","LoadOrderPaymentsSucceeded","LoadOrderPaymentsFailed","SubmitOrderRequested","SubmitOrderSucceeded","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderSucceeded","FinalizeOrderFailed","PaymentMethodActionType","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","LoadPaymentMethodsRequested","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","BillingAddressActionType","UpdateBillingAddressRequested","UpdateBillingAddressSucceeded","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestSucceeded","ContinueAsGuestFailed","CheckoutButtonActionType","InitializeButtonFailed","InitializeButtonRequested","InitializeButtonSucceeded","DeinitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","CouponActionType","ApplyCouponRequested","ApplyCouponSucceeded","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponSucceeded","RemoveCouponFailed","EmbeddedCheckoutEventType","CheckoutComplete","CheckoutError","CheckoutLoaded","FrameError","FrameLoaded","SignedOut","InstrumentActionType","LoadInstrumentsRequested","LoadInstrumentsSucceeded","LoadInstrumentsFailed","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","GiftCertificateActionType","ApplyGiftCertificateRequested","ApplyGiftCertificateSucceeded","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateSucceeded","RemoveGiftCertificateFailed","RemoteCheckoutActionType","InitializeRemoteBillingRequested","InitializeRemoteBillingSucceeded","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingSucceeded","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsSucceeded","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","UpdateRemoteCheckout","ButtonType","ButtonColor","BillingAddressFormat","Long","Short","Default","Black","White","Min","Full","DEFAULT_RESPONSE","ACKNOWLEDGE","FINALIZE","ConfigActionType","LoadConfigRequested","LoadConfigSucceeded","LoadConfigFailed","ContentType","Json","JsonV1","isPlainObject","CountryActionType","LoadCountriesRequested","LoadCountriesSucceeded","LoadCountriesFailed","ShippingCountryActionType","LoadShippingCountriesRequested","LoadShippingCountriesSucceeded","LoadShippingCountriesFailed","SignInEmailActionType","SendSignInEmailRequested","SendSignInEmailSucceeded","SendSignInEmailFailed","StoreCreditActionType","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","isVaultedInstrument","instrument","Boolean","instrumentId","isHostedVaultedInstrument","isFormattedVaultedInstrument","formattedInstrument","formattedPayload","bigpay_token","token","HostedInputEventType","AttachSucceeded","AttachFailed","BinChanged","Blurred","Changed","CardTypeChanged","Entered","Focused","SubmitSucceeded","SubmitFailed","Validated","isIframeEvent","HOSTED","OFFLINE","mapToInternalAddress","addressId","addressLine1","addressLine2","province","provinceCode","postCode","PaymentActionType","SubmitPaymentRequested","SubmitPaymentSucceeded","SubmitPaymentFailed","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","joinIncludes","includes","uniq","mapToInternalLineItems","itemMap","decimalPlaces","idKey","keys","amountTransformer","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","sender","recipient","attributes","variantId","HostedFieldEventType","AttachRequested","SubmitRequested","ValidateRequested","isEqual","objectA","objectB","Array","isArray","toString","keyFilter","keysA","keysB","INTERNAL_USE_ONLY","mapToInternalLineItem","extendedListPrice","extendedSalePrice","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","productId","option","mapToInternalShippingOption","isSelected","price","selected","isRecommended","SpamProtectionActionType","CustomerActionType","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","_decimalPlaces","round","pow","parseUrl","test","anchor","port","hostname","hash","origin","protocol","search","withMemoizedCombiner","creator","combiner","args","pop","combinerArgs","memoize","ErrorActionType","ClearError","_requestSender","loadPaymentMethods","Observable","observer","next","createAction","meta","deviceSessionId","sessionHash","complete","createErrorAction","loadPaymentMethod","Accept","bindMethodDecorator","_","descriptor","boundMethod","set","decoratedTarget","getOwnPropertyNames","getOwnPropertyDescriptor","mapToInternalCustomer","addresses","customerId","storeCredit","fullName","customerGroupName","customerGroup","mapToInternalOrder","orderMeta","items","mapToInternalOrderPayment","subtotal","coupon","discountedAmount","sum","orderToken","callbackUrl","discountNotifications","giftCertificate","totalDiscountedAmount","appliedGiftCertificates","keyBy","remainingBalance","socialData","mapToInternalSocialDataList","shipping","shippingCostTotal","amountBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxTotal","handling","grandTotal","orderAmountAsInteger","mapToInternalPaymentStatus","helpText","returnUrl","socialDataObject","digitalItems","socialMedia","image","shareText","sharingLink","channelName","channel","channelCode","mapToInternalCart","notifications","placeholders","discountType","messageHtml","certificate","taxSubtotal","AmazonPayV2Regions","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","de","jp","uk","us","en_US","en_GB","de_DE","fr_FR","it_IT","es_ES","ja_JP","Home","Product","Cart","Checkout","Other","USD","EUR","GBP","JPY","PayAndShip","PayOnly","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","loadHostedFields","hostedFields","_braintreeScriptLoader","_dataCollectors","clientToken","_clientToken","getClient","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","deviceData","teardown","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","createHostedFields","_teardown","default","mod","EmbeddedContentEventType","StyleConfigured","isBillingAddressLike","format","month","year","trimmedMonth","trimmedYear","toObject","card","number","maxLength","creditCardType","lengths","unformattedValue","unformat","gaps","gapIndex","output","couponTypes","mapToInternalCoupon","couponType","NotInitializedErrorType","CheckoutButtonNotInitialized","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","action","of","throwError","payload","cacheAction","from","pipe","shareReplay","store","isActionOptions","param","useCache","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","lastArg","instanceMethods","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","pickBy","on","additions","difference","omitDeep","predicate","omitBy","_checkoutRequestSender","_configActionCreator","merge","loadConfig","defer","catchError","loadDefaultCheckout","getContextConfig","updateCheckout","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","existingConsignment","getConsignmentByAddress","_removeLineItems","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","AvailableShippingOptions","updateAddress","_getUpdateAddressRequestBody","createConsignments","consignmentId","updateShippingOption","_isUpdateConsignmentRequest","customItems","_hydrateLineItems","existingItem","sharedItem","request","DEFAULT_INCLUDES","post","delete","getCallbackUrl","_cardExpiryFormatter","_cardNumberFormatter","paymentMethod","paymentMethods","getPaymentMethod","gatewayId","shippingOption","getShippingOption","storeConfig","getStoreConfig","contextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","getOrderMeta","internalCustomer","authToken","paymentData","getPaymentToken","vaultAccessToken","additionalAction","_transformPaymentMethod","quoteMeta","geoCountryCode","source","pick","storeProfile","transformWithHostedFormData","nonce","paymentMethodMeta","_transformHostedInputValues","gateway","initializationData","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","hostedFormNonce","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","submitPayment","reject","_transformResponse","initializeOffsitePayment","statusText","isPrivate","joinErrors","_factoryMethods","register","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","currentValue","newValue","objectSet","DEFAULT_STATE","billingAddressReducer","combineReducers","dataReducer","composeReducers","errorsReducer","statusesReducer","O","S","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","UpdateSubscriptionsFailed","arrayReplace","currentArray","newArray","matchObject","a","b","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cartReducer","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","configReducer","couponReducer","giftCertificateReducer","st","customerReducer","customerStrategyReducer","isInitialized","initializeError","initializeMethodId","deinitializeError","deinitializeMethodId","signInError","signInMethodId","signOutError","signOutMethodId","widgetInteractionError","widgetInteractionMethodId","isInitializing","isDeinitializing","isSigningIn","isWidgetInteracting","countryReducer","orderReducer","metaReducer","omit","paymentReducer","paymentMethodReducer","array","defaultPredicate","findIndex","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","paymentStrategyReducer","executeError","executeMethodId","finalizeError","finalizeMethodId","isExecuting","isFinalizing","instrumentReducer","vaultedInstruments","deleteError","failedInstrument","isDeleting","deletingInstrument","remoteCheckoutReducer","billing","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","shippingCountryReducer","shippingStrategyReducer","updateAddressError","updateAddressMethodId","selectOptionError","selectOptionMethodId","isUpdatingAddress","isSelectingOption","signInEmailReducer","storeCreditReducer","subscriptionsReducer","checkoutReducer","guard","errorFactory","createFreezeProxy","trap","proxy","getPrototypeOf","charAt","deepFreeze","braintreepaypal","authorizenet","elavon","checkoutcom","stripe","cybersource","converge","bluesnapv2","paymetric","bolt","normalize","identity","createInternalCheckoutSelectorsFactory","getBillingAddressOrThrow","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","loadError","memoizeOne","createCartSelector","getCartOrThrow","createCheckoutButtonSelector","createConfigSelector","filterType","flashMessages","getStoreConfigOrThrow","getExternalSource","externalSource","getVariantIdentificationToken","variantIdentificationToken","createCountrySelector","getCountries","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createInstrumentSelector","getInstrumentsByPaymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","bigpayToken","isMatch","getInstruments","flatMap","supportedProvider","getDeleteError","createFormSelector","selectedCountry","processField","itemtype","requiresState","hasPostalCodes","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","getPaymentMethodOrThrow","getLoadMethodError","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createConsignmentSelector","getConsignmentById","addressA","addressB","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isCreating","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","outstandingBalance","isExecutingSpamCheck","createOrderSelector","getOrderOrThrow","createPaymentSelector","internalPayment","redirectUrl","createStoreCreditSelector","applyError","createSubscriptionsSelector","createSignInEmailSelector","signInEmail","sendError","checkoutButton","customerStrategies","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","action$","createInternalCheckoutSelectors","createDataStore","stateTransformer","CheckoutIncludes","PhysicalItemsCategoryNames","DigitalItemsCategoryNames","mapToInternalGiftCertificate","targetOrigin","_targetWindow","_targetOrigin","fromEvent","successType","errorType","take","toPromise","postMessage","setTarget","sourceOrigin","_sourceOrigin","_isListening","_listeners","listen","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","_namespace","getItem","rawValue","withNamespace","JSON","removeItem","getItemOnce","setItem","stringify","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","C","_store","_buttonStrategyActionCreator","_state","filters","initializeButton","containerIds","idPrefix","containers","querySelectorAll","u","uniqueId","queueId","dispatch","deinitializeButton","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","empty","AMAZON_PAY_V2","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","GOOGLEPAY_ADYENV2","GOOGLEPAY_AUTHORIZENET","GOOGLEPAY_BRAINTREE","GOOGLEPAY_CHECKOUTCOM","GOOGLEPAY_STRIPE","MASTERPASS","PAYPALEXPRESS","PAYPALCOMMERCE","StyleButtonLabel","StyleButtonLayout","StyleButtonColor","StyleButtonShape","_checkoutActionCreator","_amazonPayV2PaymentProcessor","amazonpay","_createSignInButton","_walletButton","parentNode","removeChild","_getAmazonPayV2ButtonOptions","amazonButtonOptions","createButton","shopPath","merchantId","testMode","checkoutLanguage","ledgerCurrency","checkoutSessionMethod","extractAmazonCheckoutSessionId","createCheckoutSession","sandbox","productType","getShippableItemsCount","placement","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","_paymentMethod","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","offerCredit","tokenizePayment","postForm","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","_googlePayPaymentProcessor","_methodId","_getMethodId","googlePayButton","_handleWalletButtonClick","hasPhysicalItems","displayWallet","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_masterpassScriptLoader","load","masterpass","_masterpassClient","_signInButton","buttonContainer","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_host","clientId","actions","res","_onError","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","buynow","pay","installment","vertical","horizontal","gold","blue","silver","black","white","pill","rect","_paypalCommerceRequestSender","paypalCommerce","buttonParams","_handleClickButtonProvider","createOrder","onApprove","_validateStyleParams","paramsScript","_getParamsScript","loadPaypalCommerce","isProgressiveOnboardingAvailable","Buttons","fundingSource","setupPayment","orderID","order_id","updatedStyle","color","layout","tagline","intent","isPayPalCreditAvailable","disableFunding","createCheckoutButtonInitializer","host","createRequestSender","formPoster","createFormPoster","registry","scriptLoader","getScriptLoader","checkoutActionCreator","NotEmbeddableErrorType","MissingContainer","MissingContent","UnknownError","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","onLoad","onFrameLoad","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","detach","iFrameResizer","close","contentWindow","now","encodeURIComponent","visibility","lastAttempt","Number","EmbeddedCheckout","DEFAULT_STYLES","backgroundColor","ROTATION_ANIMATION","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","opacity","bottom","left","right","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","allowPaymentRequest","_toResizableFrame","timeoutInterval","handleMessage","iframes","scrolling","sizeWidth","heightCalculationMethod","STORAGE_PREFIX","embedCheckout","loadingIndicator","handleFrameLoadedEvent","hasAttribute","setAttribute","_untargetedMessagePoster","_messageHandlers","_postMessage","_transformError","postFrameError","untargeted","handler","_notifyMessageHandlers","IframeEmbeddedCheckoutMessenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","maxSize","onExpire","noop","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","terminalMap","recentlyUsedMap","_removeMap","mapFromPaymentErrorResponse","SubscriptionsActionType","_configRequestSender","updateSubscriptions","DEFAULT_PARAMS","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","hasShippingAddress","_getGooglePayPaymentDataRequest","parseResponse","cardType","lastFour","currencyCode","gatewayMerchantId","merchantName","apiVersion","apiVersionMinor","merchantInfo","authJwt","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressRequired","billingAddressParameters","phoneNumberRequired","tokenizationSpecification","transactionInfo","totalPriceStatus","totalPrice","toFixed","emailRequired","shippingAddressRequired","shippingAddressParameters","baseRequest","_getGooglePaymentDataRequest","btoa","supportedCards","paymentGatewaySpecification","_getPaymentGatewaySpecification","cardPaymentMethod","_getCardPaymentMethod","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","paymentMethodData","tokenizationData","androidPayCards","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","googleMerchantName","googleMerchantId","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_publishableKey","_testMode","checkoutcomkey","_mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2","err","signature","protocolVersion","signedMessage","_convertToken","cardNetwork","cardDetails","_requestCheckoutcomTokenize","token_data","checkoutcomToken","checkoutcomKey","credentials","Authorization","last4","stripeVersion","stripePublishableKey","stripeConnectedAccount","fieldErrors","scriptSrc","async","attr","_validateParams","updatedOptions","isNil","kebabCase","iframeResizer","setupContentWindowForIframeResizer","getEnvironment","process","isEnabled","_console","_logToConsole","messages","debug","getDefaultLogger","_couponRequestSender","applyCoupon","removeCoupon","couponCode","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","giftCertificateCode","_strategyRegistry","signIn","widgetInteraction","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","createInitOptions","settings","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","B","PaymentStrategyType","V","JPMC","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","_remoteCheckoutRequestSender","_customerRequestSender","signInCustomer","switchMap","_remoteCheckoutActionCreator","amazonOptions","useAmazonAddressBook","_handleAuthorization","authorize","popup","tokenPrefix","signout","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","visaCheckoutOptions","initOptions","storeLanguage","signInButton","init","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","_insertVisaCheckoutButton","visaCheckoutButton","flexDirection","innerHTML","_chasePayScriptLoader","chasePayOptions","digitalSessionId","ChasePay","configure","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","_customerActionCreator","googlePayOptions","_getGooglePayOptions","googlepayadyenv2","googlepayauthorizenet","googlepaybraintree","googlepaycheckoutcom","googlepaystripe","masterpassOptions","Masterpass","_countryRequestSender","loadCountries","_config","submitOrder","checkoutVariant","finalizeOrder","_orderRequestSender","_checkoutValidator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","shouldExecuteSpamCheck","validate","_mapToOrderRequestBody","customerMessage","ADYENV2","ADYENV2_GOOGLEPAY","AFFIRM","AFTERPAY","AMAZON","AUTHORIZENET_GOOGLE_PAY","AMAZONPAYV2","BLUESNAPV2","BOLT","CHECKOUTCOM","CREDIT_CARD","CHECKOUTCOM_GOOGLE_PAY","CYBERSOURCE","KLARNA","KLARNAV2","LAYBUY","LEGACY","OFFSITE","PAYPAL","PAYPAL_EXPRESS","PAYPAL_EXPRESS_CREDIT","PAYPAL_COMMERCE","PAYPAL_COMMERCE_CREDIT","PAYPAL_COMMERCE_CREDIT_CARD","SAGE_PAY","SQUARE","STRIPEV3","NO_PAYMENT_DATA_REQUIRED","BRAINTREE","BRAINTREE_VISA_CHECKOUT","BRAINTREE_GOOGLE_PAY","CHASE_PAY","WE_PAY","STRIPE_GOOGLE_PAY","SEZZLE","ZIP","CONVERGE","_orderActionCreator","_spamProtectionActionCreator","execute","strategy","getByMethod","finalize","_loadOrderPaymentsIfNeeded","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","comparator","_compareCoupons","_compareGiftCertificates","couponsA","couponsB","giftCertificatesA","giftCertificatesB","promise","cancellable","cancel","race","_mutationObserver","ensurePresence","targets","mutationsList","mutation","removedNodes","observe","childList","subtree","disconnect","callback","MutationObserver","_googleRecaptcha","handle","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","human_verification_token","recaptchaSitekey","cardingProtectionElement","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","event$","Subject","_widgetId","getResponse","reset","_event$","_recaptcha","element","retryWhen","TIMEOUT","_watchRecaptchaChallengeWindow","iframeContainer","attributeFilter","_loadPromise","_loadScript","grecaptcha","createSpamProtection","MutationObserverFactory","_type","_containerId","_placeholder","_accessibilityLabel","_eventPoster","_eventListener","_detachmentObserver","_cardInstrument","overflow","getType","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","submitForm","_isSubmitErrorEvent","validateForm","isValid","fontFamily","family","_fields","_payloadTransformer","_eventCallbacks","_paymentHumanVerificationHandler","_handleEnter","onBlur","onCardTypeChange","onFocus","onValidate","_cardType","_bin","bin","getBin","getCardType","_getFirstField","otherFields","without","otherField","submit","fieldOptions","_getCardInstrument","createScriptLoader","spamProtectionElementId","spamProtectionElement","googleRecaptchaSitekey","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","_paymentRequestSender","_paymentRequestTransformer","shouldSaveInstrument","shouldSetAsDefaultInstrument","vault_payment_instrument","set_as_default_stored_instrument","_getToken","_hasFactoryForMethod","_isLegacyMethod","clientSidePaymentProviders","paymentSettings","getBrowserInfo","color_depth","screen","colorDepth","java_enabled","navigator","javaEnabled","userLanguage","screen_height","screen_width","time_zone_offset","getTimezoneOffset","AdyenActionType","AdyenComponentType","AdyenPaymentMethodType","HTTPMethod","ResultCode","invalidFields","isCardState","encryptedSecurityCode","encryptedExpiryMonth","ThreeDS2Fingerprint","ThreeDS2Challenge","Redirect","QRCode","Voucher","SecuredFields","ACH","AliPay","Bancontact","CreditCard","iDEAL","GiroPay","GooglePay","SEPA","Sofort","Vipps","WeChatPayQR","POST","ChallengeShopper","IdentifyShopper","OrderIncludes","_paymentActionCreator","_locale","adyenv2","_paymentInitializeOptions","clientSideAuthentication","originKey","clientKey","environment","paymentMethodsResponse","_adyenClient","_mountPaymentComponent","_paymentComponent","_mountCardVerificationComponent","_cardVerificationComponent","componentState","_componentState","encryptedCardNumber","credit_card_number_confirmation","expiry_month","expiry_year","verification_value","browser_info","credit_card_token","_processAdditionalAction","unmount","_getAdyenClient","_getPaymentInitializeOptions","_getThreeDS2ChallengeWidgetSize","threeDS2Options","_handleAction","threeDS2ContainerId","additionalActionOptions","onBeforeLoad","adyenAction","additionalActionComponent","createFromAction","onAdditionalDetails","additionalActionState","paymentPayload","paymentMethodType","mount","_mapAdyenPlaceholderData","holderName","street","houseNumberOrName","cardVerificationComponent","adyenClient","cardVerificationContainerId","_updateComponentState","paymentComponent","hasVaultedInstruments","provider_data","_stylesheetLoader","configuration","loadStylesheet","AdyenCheckout","DigitalItemsCategories","PhysicalItemsCategories","_affirmScriptLoader","publicKey","affirm","_affirm","requestOptions","_getCheckoutInformation","open","onFail","failObject","reason","onSuccess","successObject","ui","checkout_token","_getBillingAddress","merchant","user_confirmation_url","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","shipping_amount","tax_amount","first","full","zipcode","display_name","unit_price","qty","item_image_url","item_url","categories","_getCategories","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","apikey","scriptURI","_getScriptURI","g","h","k","getElementsByTagName","arguments","f","a1","c1","a2","c2","insertBefore","public_api_key","script","_storeCreditActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","_afterpaySdk","_redirectToAfterpay","countryName","redirect","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","BraintreeFormFieldType","_billingAddressActionCreator","_isPaymentMethodSelected","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","_getOrderReferenceIdFromInitializationData","orderReferenceId","onPaymentSelect","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","_paymentStrategyActionCreator","paymentToken","buttonId","editButtonId","_bindEditButton","orderRequest","redirect_url","click","changeAction","clone","cloneNode","replaceChild","_showLoadingSpinner","bindButton","_createContainer","_initializeOptions","_createIframe","_boltScriptLoader","_useBoltClient","useBigCommerceCheckout","publishableKey","_boltClient","_executeWithBoltClient","_executeWithBoltCheckout","boltClient","callbacks","transaction","reference","BoltCheckout","_createElements","closeElement","mainElement","_element","_closeElement","_mainElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","classLayout","classClose","classOverlayText","background","hasCloseButton","innerHtml","overlayText","addClassLayout","innerText","_addEventListener","_removeEventListener","handleTransition","propertyName","CardCode","CardCodeVerification","CardExpiry","CardName","CardNumber","CardNumberVerification","BraintreeHostedFormType","_handleBlur","_applyStyles","_handleFocus","_input","outline","padding","isBraintreeFormFieldsMap","StoredCardVerification","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","_formOptions","_mapFieldType","emittedBy","_handleCardTypeChange","_handleInputSubmitRequest","onEnter","_handleValidityChange","_mapStoredCardVerificationErrors","_mapFieldOptions","_mapStyleOptions","_cardFields","_cardNameField","_mapBillingAddress","cardholderName","tokenizeForStoredCardVerification","expirationDate","cvv","mapStyles","fontSize","fontWeight","_braintreeHostedForm","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","verifyCard","_present3DSChallenge","focusWindow","useraction","getSessionId","appendSessionId","processedPayment","initializeHostedForm","deinitializeHostedForm","tokenizeHostedForm","tokenizeHostedFormForStoredCardVerification","verifyCardWithHostedForm","addFrame","removeFrame","cancelVerifyCard","verification","creditCard","endpoint","_braintreePaymentProcessor","_isHostedPaymentFormEnabled","_isHostedFormInitialized","_is3dsEnabled","_deviceSessionId","_handleError","_prepareHostedPaymentData","_preparePaymentData","commonPaymentData","_isSubmittingWithStoredCard","_isStoringNewCard","_shouldPerform3DSVerification","_mapToNonceInstrument","_mapToVaultedInstrumentWithNonceVerification","isHostedFormEnabled","_credit","braintreeOptions","isVaultingEnabled","_formattedPayload","vaultPaymentInstrument","device_info","paypal_account","visaInitOptions","_cardinalClient","prepare","_getClientToken","start","hostedForm","iin","runBinProcess","getThreeDSecureData","three_ds_result","_getOrderData","CardinalSignatureValidationErrors","Init","Complete","Confirm","SetupCompleted","NoAction","Failure","CCA","Paypal","VisaCheckout","ApplePay","DiscoverWallet","BinProcess","Yes","No","ChasePayEventType","_isConfigured","_sdk","_getClientSDK","off","ActionCode","ErrorNumber","ErrorDescription","setup","jwt","binNumber","Status","threeDSecureData","orderData","ExtendedData","SignatureVerification","continueObject","AcsUrl","acs_url","Payload","merchant_data","partialOrder","_mapToPartialOrder","payer_auth_request","continue","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","ExpirationMonth","ExpirationYear","NameOnAccount","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","Cardinal","StartCheckout","CompleteCheckout","CancelCheckout","PaypalCommerceFormFieldType","PaypalCommerceHostedFormType","_wepayRiskClient","_walletEvent$","chasepay","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","onCancel","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","reqTokenId","expDate","accountNum","accountMask","extraData","_hostedFormFactory","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","_isHostedFieldAvailable","formOptions","_hostedForm","orderActionCreator","paymentActionCreator","hostedFormFactory","PaReq","TermUrl","callback_url","MD","_threeDSecureFlow","_isAdditionalActionRequired","_googlePayOptions","statusCode","googlePayToken","supportedCountries","supportedCountriesRequiringStates","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","_needsStateCode","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","Klarna","Credit","_klarnav2ScriptLoader","klarnaPayments","_klarnaPayments","_loadPaymentsWidget","klarnav2","_updateOrder","payment_method_category","Payments","orderPayload","_shouldSubmitFullPayload","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","_paypalCommerceHostedForm","paypalcommerce","_getOptionsScript","components","CardBrand","DigitalWalletType","HostedFields","_isPaypalCommerceFormFieldsMap","isEligible","paymentsSDK","_hostedFields","updatedStyles","_paypalCommercePaymentProcessor","overlay","_getOrderId","approveUrl","paymentPayPal","_getOverlayElements","paramsWindow","_getParamsWindow","closeWindow","isResolve","isRemoveOverlay","messageHandler","_popup","operation","updateParent","popupTick","setInterval","closed","onClickClose","fragment","createDocumentFragment","continueText","marginTop","textDecoration","americanExpress","discover","discoverDiners","JCB","masterCard","unionPay","unknown","visa","squareGift","applePay","none","IconStyle","StripeElementType","StripePaymentMethodType","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","_squareOptions","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SqPaymentForm","Solid","Alipay","Sepa","_stripeScriptLoader","_loadStripeJs","_stripeV3Client","_mountElement","_getInitializeOptions","_stripeElement","clientSecret","_confirmVaultedPayment","paymentIntent","_confirmStripePayment","_unmountElement","_getStripeJs","confirmAlipayPayment","return_url","handleActions","_mapStripePaymentData","confirmCardPayment","confirmIdealPayment","confirmSepaDebitPayment","_getStripeInitializeOptions","stripev3","_getStripeElement","stripeElement","stripeElementType","_stripeElements","elements","getElement","_mapStripeAddress","_mapStripeBillingDetails","trim","customerAddress","arg2","payment_method","billing_details","_mapStripeShippingAddress","setup_future_usage","stripeAccount","Stripe","betas","_riskClient","WePay","risk","generate_risk_token","get_risk_token","payloadWithToken","_zipScriptLoader","zip","_zipClient","zipClient","_prepareForReferredRegistration","onCheckout","openModal","externalId","Zip","ProjectionActionType","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","valueOf","vaultAccessExpiry","newDate","setMinutes","getMinutes","getVaultAccessToken","storeId","isTransactional","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","_isPayPalInstrument","defaultInstrument","default_instrument","external_id","trustedShippingAddress","trusted_shipping_address","_isBankInstrument","accountNumber","account_number","issuer","iban","last_4","expiryMonth","expiryYear","method_type","_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","_shippingCountryRequestSender","selectOption","mergedOptions","_consignmentActionCreator","_createAddressBook","updateAddressRequestBody","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","_shippingStrategyActionCreator","editAddressButtonId","sendSignInEmail","emailRequest","Synchronize","cloneDeep","cloneDeepSafe","cloneResult","createShallowEqualSelector","createSelectorCreator","defaultMemoize","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getSignInEmail","getError","getSelectShippingOptionError","isSelectingShippingOption","isCustomerStepPending","isShippingStepPending","isPaymentStepPending","isSubmittingOrder","createCheckoutStoreSelector","availableShippingOptions","val","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateSubscriptionsError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyStoreCreditError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getSignInEmailError","createCheckoutStoreStatusSelector","isUpdatingCheckout","isFinalizingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingSubscriptions","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingStoreCredit","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isSendingSignInEmail","_messageCustomizer","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_signInEmailActionCreator","_subscriptionsActionCreator","isDevelopment","projection","_errorTransformer","_selectorsFactory","_storeProjection","initial","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","signInEmailRequest","continueAsGuest","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","executeSpamCheck","CheckoutService","createCheckoutService","checkoutVariantIdentificationToken","paymentClient","setHost","bigpayBaseUrl","orderRequestSender","checkoutRequestSender","configActionCreator","spamProtection","spamProtectionRequestSender","spamProtectionActionCreator","subscriptionsActionCreator","paymentMethodActionCreator","remoteCheckoutRequestSender","remoteCheckoutActionCreator","paymentRequestTransformer","paymentRequestSender","billingAddressActionCreator","braintreePaymentProcessor","braintreeHostedForm","checkoutValidator","storeCreditActionCreator","paymentHumanVerificationHandler","paymentStrategyActionCreator","getStylesheetLoader","createPaymentStrategyRegistry","consignmentRequestSender","consignmentActionCreator","_logger","_transformConfig","locales","translations","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","_hasTranslations","prefixedKey","messageFormat","compile","_transformData","_flattenObject","union","parentKey","resultKey","isObject","LanguageService","createLanguageService","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","_storeConfig","_customerFormatter","_storeFormatter","exchangeRate","toStoreCurrency","CurrencyService","createCurrencyService","AnalyticStepId","CUSTOMER","SHIPPING","BILLING","PAYMENT","ANALYTIC_STEPS","storage","analytics","checkoutSteps","_checkoutStarted","_completedSteps","_viewedSteps","_analyticStepOrder","extraItemsData","saveExtraItemsData","track","getTrackingPayload","revenue","tax","readExtraItemsData","clearExtraItemData","stepId","getIdFromStep","hasStepViewed","trackViewed","backfill","hasStepCompleted","trackCompleted","shippingMethod","getShopperCurrency","getPaymentMethodName","shippingMethodId","completedStepId","getStoreProfile","affiliation","toShopperCurrency","products","getProducts","getStorageKey","ORDER_ITEMS_STORAGE_KEY","itemsData","product_id","giftCertificateItems","physicalAndDigitalItems","itemAttributes","image_url","stepTrackerConfig","_googlePayScriptLoader","_googlePayInitializer","buttonType","buttonColor","_googlePayClient","loadPaymentData","_getPaymentDataRequest","tokenizePayload","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","_amazonPayV2ScriptLoader","_amazonPayV2SDK","_getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","renderButton","amazonPayV2Region","createAmazonPayV2PaymentProcessor","_subscriptionActionCreator","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress","_updateCustomerConsent","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","_subscriptionsRequestSender"],"mappings":"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","file":"checkout-d959dd9e.js","sourcesContent":["import CheckoutSupport from './CheckoutSupport';\n\nexport default class NoopCheckoutSupport implements CheckoutSupport {\n    isSupported(): boolean {\n        return true;\n    }\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\n\nexport class EmbeddedCheckoutUnsupportedError extends CustomError {\n    constructor(message: string) {\n        super({\n            name: 'EMBEDDED_CHECKOUT_UNSUPPORTED_ERROR',\n            message,\n        });\n\n        setPrototypeOf(this, EmbeddedCheckoutUnsupportedError.prototype);\n    }\n}\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\n\nimport { CheckoutSupport } from '../checkout';\n\nimport { EmbeddedCheckoutUnsupportedError } from './errors';\n\nexport default class EmbeddedCheckoutSupport implements CheckoutSupport {\n    constructor(\n        private unsupportedMethods: string[],\n        private langService: LanguageService\n    ) {}\n\n    isSupported(...ids: string[]): boolean {\n        const unsupportedMethods = ids.filter(id =>\n            this.unsupportedMethods.indexOf(id) >= 0\n        );\n\n        if (unsupportedMethods.length === 0) {\n            return true;\n        }\n\n        throw new EmbeddedCheckoutUnsupportedError(\n            this.langService.translate('embedded_checkout.unsupported_error', {\n                methods: unsupportedMethods.join(', '),\n            })\n        );\n    }\n}\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\n\nimport { CheckoutSupport, NoopCheckoutSupport } from '../checkout';\n\nimport isEmbedded from './isEmbedded';\nimport EmbeddedCheckoutSupport from './EmbeddedCheckoutSupport';\n\nconst UNSUPPORTED_METHODS = [\n    'afterpay',\n    'amazon',\n    'chasepay',\n    'googlepay',\n    'klarna',\n    'masterpass',\n];\n\nexport default function createEmbeddedCheckoutSupport(\n    language: LanguageService\n): CheckoutSupport {\n    return isEmbedded() ?\n        new EmbeddedCheckoutSupport(UNSUPPORTED_METHODS, language) :\n        new NoopCheckoutSupport();\n}\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedHtml } from '../locale';\nimport { LoadingOverlay } from '../ui/loading';\n\nexport interface EmptyCartMessageProps {\n    waitInterval?: number;\n    loginUrl: string;\n}\n\ninterface EmptyCartMessageState {\n    isWaiting: boolean;\n}\n\nexport default class EmptyCartMessage extends PureComponent<EmptyCartMessageProps, EmptyCartMessageState> {\n    state: EmptyCartMessageState = {\n        isWaiting: true,\n    };\n\n    private waitToken?: number;\n\n    componentDidMount(): void {\n        const { waitInterval } = this.props;\n\n        this.waitToken = setTimeout(() => {\n            this.setState({ isWaiting: false });\n        }, waitInterval);\n    }\n\n    componentWillUnmount(): void {\n        clearInterval(this.waitToken);\n    }\n\n    render(): ReactNode {\n        const { loginUrl } = this.props;\n        const { isWaiting } = this.state;\n\n        return (\n            <LoadingOverlay\n                hideContentWhenLoading\n                isLoading={ isWaiting }\n            >\n                <TranslatedHtml\n                    data={ { url: loginUrl } }\n                    id=\"cart.empty_cart_message\"\n                />\n            </LoadingOverlay>\n        );\n    }\n}\n","import { Checkout, Customer } from '@bigcommerce/checkout-sdk';\nimport { every } from 'lodash';\n\nimport { SUPPORTED_METHODS } from './CheckoutButtonList';\n\nconst SUPPORTED_SIGNOUT_METHODS = [\n    'amazon',\n    'amazonpay',\n];\n\nexport const isSupportedSignoutMethod = (methodId: string): boolean => {\n    return SUPPORTED_SIGNOUT_METHODS.indexOf(methodId) > -1;\n};\n\nexport default function canSignOut(customer: Customer, checkout: Checkout, methodId: string): boolean {\n    if (isSupportedSignoutMethod(methodId)) {\n        return true;\n    }\n\n    if (customer.isGuest) {\n        return false;\n    }\n\n    // Return false if payment method offers its own checkout button\n    return every(checkout.payments, payment =>\n        SUPPORTED_METHODS.indexOf(payment.providerId) === -1\n    );\n}\n","import { CheckoutSelectors, CustomerRequestOptions, CustomError } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\n\nimport canSignOut, { isSupportedSignoutMethod } from './canSignOut';\n\nexport interface CustomerInfoProps {\n    onSignOut?(event: CustomerSignOutEvent): void;\n    onSignOutError?(error: CustomError): void;\n}\n\nexport interface CustomerSignOutEvent {\n    isCartEmpty: boolean;\n}\n\ninterface WithCheckoutCustomerInfoProps {\n    email: string;\n    methodId: string;\n    isSignedIn: boolean;\n    isSigningOut: boolean;\n    signOut(options?: CustomerRequestOptions): Promise<CheckoutSelectors>;\n}\n\nconst CustomerInfo: FunctionComponent<CustomerInfoProps & WithCheckoutCustomerInfoProps> = ({\n    email,\n    methodId,\n    isSignedIn,\n    isSigningOut,\n    onSignOut = noop,\n    onSignOutError = noop,\n    signOut,\n}) => {\n    const handleSignOut: () => Promise<void> = async () => {\n        try {\n            if (isSupportedSignoutMethod(methodId)) {\n                await signOut({ methodId });\n                onSignOut({ isCartEmpty: false });\n                window.location.reload();\n            } else {\n                await signOut();\n                onSignOut({ isCartEmpty: false });\n            }\n        } catch (error) {\n            if (error.type === 'checkout_not_available') {\n                onSignOut({ isCartEmpty: true });\n            } else {\n                onSignOutError(error);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"customerView\"\n            data-test=\"checkout-customer-info\"\n        >\n            <div\n                className=\"customerView-body optimizedCheckout-contentPrimary\"\n                data-test=\"customer-info\"\n            >\n                { email }\n            </div>\n\n            <div className=\"customerView-actions\">\n                { isSignedIn && <Button\n                    isLoading={ isSigningOut }\n                    onClick={ handleSignOut }\n                    size={ ButtonSize.Tiny }\n                    testId=\"sign-out-link\"\n                    variant={ ButtonVariant.Secondary }\n                >\n                    <TranslatedString id=\"customer.sign_out_action\" />\n                </Button> }\n            </div>\n        </div>\n    );\n};\n\nfunction mapToWithCheckoutCustomerInfoProps(\n    { checkoutService, checkoutState }: CheckoutContextProps\n): WithCheckoutCustomerInfoProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, getCustomer },\n        statuses: { isSigningOut },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n\n    if (!billingAddress || !checkout || !customer) {\n        return null;\n    }\n\n    const methodId = checkout.payments && checkout.payments.length === 1 ? checkout.payments[0].providerId : '';\n\n    return {\n        email: billingAddress.email || customer.email,\n        methodId,\n        isSignedIn: canSignOut(customer, checkout, methodId),\n        isSigningOut: isSigningOut(),\n        signOut: checkoutService.signOutCustomer,\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerInfoProps)(CustomerInfo);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconTag: FunctionComponent = () => (\n    <svg\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M21.41 11.58l-9-9C12.05 2.22 11.55 2 11 2H4c-1.1 0-2 .9-2 2v7c0 .55.22 1.05.59 1.42l9 9c.36.36.86.58 1.41.58.55 0 1.05-.22 1.41-.59l7-7c.37-.36.59-.86.59-1.41 0-.55-.23-1.06-.59-1.42zM5.5 7C4.67 7 4 6.33 4 5.5S4.67 4 5.5 4 7 4.67 7 5.5 6.33 7 5.5 7z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconTag);\n","import DOMPurify from 'dompurify';\nimport React, { memo, FunctionComponent } from 'react';\n\nimport { Alert, AlertType } from '../ui/alert';\nimport { IconTag } from '../ui/icon';\n\nexport interface PromotionBannerProps {\n    message: string;\n}\n\nconst PromotionBanner: FunctionComponent<PromotionBannerProps> = ({\n    message,\n}) => (\n    <Alert\n        additionalClassName=\"optimizedCheckout-discountBanner\"\n        icon={ <IconTag /> }\n        type={ AlertType.Info }\n    >\n        <span\n            dangerouslySetInnerHTML={ {\n                __html: DOMPurify.sanitize(message),\n            } }\n            data-test=\"promotion-banner-message\"\n        />\n    </Alert>\n);\n\nexport default memo(PromotionBanner);\n","import { Banner, Promotion } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent } from 'react';\n\nimport PromotionBanner from './PromotionBanner';\nimport './PromotionBannerList.scss';\n\nexport interface PromotionBannerListProps {\n    promotions: Promotion[];\n}\n\nconst PromotionBannerList: FunctionComponent<PromotionBannerListProps> = ({\n    promotions,\n}) => {\n    const banners = (promotions || []).reduce((result, promotion) => ([\n        ...result,\n        ...promotion.banners,\n    ]), [] as Banner[]);\n\n    if (!banners.length) {\n        return null;\n    }\n\n    return (\n        <div className=\"discountBanner\">\n            <ul className=\"discountBannerList\">\n                { banners.map((banner, index) => (\n                    <PromotionBanner\n                        key={ index }\n                        message={ banner.text }\n                    />\n                )) }\n            </ul>\n        </div>\n    );\n};\n\nexport default memo(PromotionBannerList);\n","import { Consignment, LineItemMap } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\n\nexport default function isUsingMultiShipping(consignments: Consignment[], lineItems: LineItemMap): boolean {\n    if (consignments.length > 1) {\n        return true;\n    }\n\n    if (some(consignments, consignment => consignment.lineItemIds.length) &&\n        hasUnassignedLineItems(consignments, lineItems)) {\n        return true;\n    }\n\n    return false;\n}\n","enum CheckoutStepType {\n    Billing = 'billing',\n    Customer = 'customer',\n    Payment = 'payment',\n    Shipping = 'shipping',\n}\n\nexport default CheckoutStepType;\n","import { Cart, Consignment } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent } from 'react';\n\nimport { AddressType, StaticAddress } from '../address';\nimport { TranslatedString } from '../locale';\n\nimport { StaticShippingOption } from './shippingOption';\nimport './StaticConsignment.scss';\nimport StaticConsignmentItemList from './StaticConsignmentItemList';\n\ninterface StaticConsignmentProps {\n    consignment: Consignment;\n    cart: Cart;\n    compactView?: boolean;\n}\n\nconst StaticConsignment: FunctionComponent<StaticConsignmentProps> = ({\n    consignment,\n    cart,\n    compactView,\n}) => {\n    const {\n        shippingAddress: address,\n        selectedShippingOption,\n    } = consignment;\n\n    return (\n        <div className=\"staticConsignment\">\n            { !compactView &&\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong> }\n\n            <StaticAddress\n                address={ address }\n                type={ AddressType.Shipping }\n            />\n\n            { !compactView &&\n                <StaticConsignmentItemList\n                    cart={ cart }\n                    consignment={ consignment }\n                /> }\n\n            { selectedShippingOption &&\n                <div>\n                    { !compactView &&\n                        <strong>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </strong> }\n                    <div className=\"shippingOption shippingOption--alt\">\n                        <StaticShippingOption\n                            displayAdditionalInformation={ false }\n                            method={ selectedShippingOption }\n                        />\n                    </div>\n                </div> }\n        </div>\n    );\n};\n\nexport default memo(StaticConsignment);\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class ShippingOptionExpiredError extends CustomError {\n    constructor() {\n        super({\n            name: 'SHIPPING_OPTION_EXPIRED',\n            message: getLanguageService().translate('shipping.shipping_option_expired_error'),\n            title: getLanguageService().translate('shipping.shipping_option_expired_heading'),\n        });\n\n        setPrototypeOf(this, ShippingOptionExpiredError.prototype);\n    }\n}\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nexport interface LoadingNotificationProps {\n    isLoading: boolean;\n}\n\nconst LoadingNotification: FunctionComponent<LoadingNotificationProps> = ({\n    isLoading,\n}) => {\n    if (!isLoading) {\n        return null;\n    }\n\n    return (\n        <div className=\"loadingNotification\">\n            <div className=\"loadingNotification-label optimizedCheckout-loadingToaster\">\n                <div className=\"spinner\" />\n\n                <span className=\"label\">\n                    <TranslatedString id=\"common.loading_text\" />\n                </span>\n            </div>\n        </div>\n    );\n};\n\nexport default memo(LoadingNotification);\n","import { CheckoutSelectors } from '@bigcommerce/checkout-sdk';\nimport { compact } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { isValidAddress } from '../address';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { SUPPORTED_METHODS } from '../customer';\nimport { hasSelectedShippingOptions, hasUnassignedLineItems } from '../shipping';\n\nimport CheckoutStepType from './CheckoutStepType';\n\nconst getCustomerStepStatus = createSelector(\n    ({ data }: CheckoutSelectors) => data.getCheckout(),\n    ({ data }: CheckoutSelectors) => data.getCustomer(),\n    ({ data }: CheckoutSelectors) => data.getBillingAddress(),\n    (checkout, customer, billingAddress) => {\n        const hasEmail = !!(customer && customer.email || billingAddress && billingAddress.email);\n        const isUsingWallet = checkout && checkout.payments ? checkout.payments.some(payment => SUPPORTED_METHODS.indexOf(payment.providerId) >= 0) : false;\n        const isGuest = !!(customer && customer.isGuest);\n        const isComplete = hasEmail || isUsingWallet;\n\n        return {\n            type: CheckoutStepType.Customer,\n            isActive: false,\n            isComplete,\n            isEditable: isComplete && !isUsingWallet && isGuest,\n            isRequired: true,\n        };\n    }\n);\n\nconst getBillingStepStatus = createSelector(\n    ({ data }: CheckoutSelectors) => data.getCheckout(),\n    ({ data }: CheckoutSelectors) => data.getBillingAddress(),\n    ({ data }: CheckoutSelectors) => {\n        const billingAddress = data.getBillingAddress();\n\n        return billingAddress ? data.getBillingAddressFields(billingAddress.countryCode) : EMPTY_ARRAY;\n    },\n    (checkout, billingAddress, billingAddressFields) => {\n        const hasAddress = billingAddress ? isValidAddress(billingAddress, billingAddressFields) : false;\n        const isUsingWallet = checkout && checkout.payments ? checkout.payments.some(payment => SUPPORTED_METHODS.indexOf(payment.providerId) >= 0) : false;\n        const isComplete = hasAddress || isUsingWallet;\n        const isUsingAmazonPay = checkout && checkout.payments ? checkout.payments.some(payment => payment.providerId === 'amazonpay') : false;\n\n        if (isUsingAmazonPay) {\n            const billingAddressCustomFields = billingAddressFields.filter(({ custom }: { custom: boolean }) => custom);\n            const hasCustomFields = billingAddressCustomFields.length > 0;\n            const isAmazonPayBillingStepComplete = billingAddress && hasCustomFields ? isValidAddress(billingAddress, billingAddressCustomFields) : true;\n\n            return {\n                type: CheckoutStepType.Billing,\n                isActive: false,\n                isComplete: isAmazonPayBillingStepComplete,\n                isEditable: isAmazonPayBillingStepComplete && hasCustomFields,\n                isRequired: true,\n            };\n        }\n\n        return {\n            type: CheckoutStepType.Billing,\n            isActive: false,\n            isComplete,\n            isEditable: isComplete && !isUsingWallet,\n            isRequired: true,\n        };\n    }\n);\n\nconst getShippingStepStatus = createSelector(\n    ({ data }: CheckoutSelectors) => data.getShippingAddress(),\n    ({ data }: CheckoutSelectors) => data.getConsignments(),\n    ({ data }: CheckoutSelectors) => data.getCart(),\n    ({ data }: CheckoutSelectors) => data.getSelectedPaymentMethod(),\n    ({ data }: CheckoutSelectors) => {\n        const shippingAddress = data.getShippingAddress();\n\n        return shippingAddress ? data.getShippingAddressFields(shippingAddress.countryCode) : EMPTY_ARRAY;\n    },\n    (shippingAddress, consignments, cart, payment, shippingAddressFields) => {\n        const hasAddress = shippingAddress ? isValidAddress(shippingAddress, shippingAddressFields) : false;\n        // @todo: interim solution, ideally we should render custom form fields below amazon shipping widget\n        const hasRemoteAddress = !!shippingAddress && !!payment && payment.id === 'amazon';\n        const hasOptions = consignments ? hasSelectedShippingOptions(consignments) : false;\n        const hasUnassignedItems = cart && consignments ? hasUnassignedLineItems(consignments, cart.lineItems) : true;\n        const isComplete = (hasAddress || hasRemoteAddress) && hasOptions && !hasUnassignedItems;\n        const isRequired = cart ? cart.lineItems.physicalItems.some(lineItem => lineItem.isShippingRequired) : false;\n\n        return {\n            type: CheckoutStepType.Shipping,\n            isActive: false,\n            isComplete,\n            isEditable: isComplete && isRequired,\n            isRequired,\n        };\n    }\n);\n\nconst getPaymentStepStatus = createSelector(\n    ({ data }: CheckoutSelectors) => data.getOrder(),\n    order => {\n        const isComplete = order ? order.isComplete : false;\n\n        return {\n            type: CheckoutStepType.Payment,\n            isActive: false,\n            isComplete,\n            isEditable: isComplete,\n            isRequired: true,\n        };\n    }\n);\n\nconst getCheckoutStepStatuses = createSelector(\n    getCustomerStepStatus,\n    getShippingStepStatus,\n    getBillingStepStatus,\n    getPaymentStepStatus,\n    (customerStep, shippingStep, billingStep, paymentStep) => {\n        const steps = compact([\n            customerStep,\n            shippingStep,\n            billingStep,\n            paymentStep,\n        ]);\n\n        const defaultActiveStep = steps.find(step => !step.isComplete && step.isRequired) || steps[steps.length - 1];\n\n        return steps.map((step, index) => {\n            const isPrevStepComplete = steps.slice(0, index).every(prevStep => prevStep.isComplete || !prevStep.isRequired);\n\n            return {\n                ...step,\n                isActive: defaultActiveStep.type === step.type,\n                // A step is only editable if its previous step is complete or not required\n                isEditable: isPrevStepComplete && step.isEditable,\n            };\n        });\n    }\n);\n\nexport default getCheckoutStepStatuses;\n","import { MOBILE_MAX_WIDTH } from './breakpoints';\n\nlet query: MediaQueryList;\n\nexport default function isMobileView() {\n    query = query || window.matchMedia(`(max-width: ${MOBILE_MAX_WIDTH}px)`);\n\n    return query.matches;\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCheck: FunctionComponent = () => (\n    <svg\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconCheck);\n","import classNames from 'classnames';\nimport { noop } from 'lodash';\nimport React, { memo, FunctionComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { IconCheck } from '../ui/icon';\n\nimport CheckoutStepType from './CheckoutStepType';\n\nexport interface CheckoutStepHeaderProps {\n    heading: ReactNode;\n    isActive?: boolean;\n    isComplete?: boolean;\n    isEditable?: boolean;\n    summary?: ReactNode;\n    type: CheckoutStepType;\n    onEdit?(type: CheckoutStepType): void;\n}\n\nconst CheckoutStepHeader: FunctionComponent<CheckoutStepHeaderProps> = ({\n    heading,\n    isActive,\n    isComplete,\n    isEditable,\n    onEdit,\n    summary,\n    type,\n}) => {\n    return (\n        <a\n            className={ classNames(\n                'stepHeader',\n                { 'is-readonly': !isEditable }\n            ) }\n            onClick={ preventDefault(isEditable && onEdit ? () => onEdit(type) : noop) }\n        >\n            <div className=\"stepHeader-figure stepHeader-column\">\n                <IconCheck\n                    additionalClassName={ classNames(\n                        'stepHeader-counter',\n                        'optimizedCheckout-step',\n                        { 'stepHeader-counter--complete': isComplete }\n                    ) }\n                />\n\n                <h2 className=\"stepHeader-title optimizedCheckout-headingPrimary\">\n                    { heading }\n                </h2>\n            </div>\n\n            <div\n                className=\"stepHeader-body stepHeader-column optimizedCheckout-contentPrimary\"\n                data-test=\"step-info\"\n            >\n                { !isActive && isComplete && summary }\n            </div>\n\n            { isEditable && !isActive && <div className=\"stepHeader-actions stepHeader-column\">\n                <Button\n                    size={ ButtonSize.Tiny }\n                    testId=\"step-edit-button\"\n                    variant={ ButtonVariant.Secondary }\n                >\n                    <TranslatedString id=\"common.edit_action\" />\n                </Button>\n            </div> }\n        </a>\n    );\n};\n\nexport default memo(CheckoutStepHeader);\n","import classNames from 'classnames';\nimport { noop } from 'lodash';\nimport React, { createRef, Component, ReactNode } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport { isMobileView, MobileView } from '../ui/responsive';\n\nimport CheckoutStepHeader from './CheckoutStepHeader';\nimport CheckoutStepType from './CheckoutStepType';\n\nexport interface CheckoutStepProps {\n    heading?: ReactNode;\n    isActive?: boolean;\n    isComplete?: boolean;\n    isEditable?: boolean;\n    summary?: ReactNode;\n    type: CheckoutStepType;\n    onExpanded?(step: CheckoutStepType): void;\n    onEdit?(step: CheckoutStepType): void;\n}\n\nexport default class CheckoutStep extends Component<CheckoutStepProps> {\n    private containerRef = createRef<HTMLLIElement>();\n    private contentRef = createRef<HTMLDivElement>();\n    private timeoutRef?: number;\n    private timeoutDelay?: number;\n\n    componentDidMount(): void {\n        const { isActive } = this.props;\n\n        if (isActive) {\n            this.focusStep();\n        }\n    }\n\n    componentDidUpdate(prevProps: Readonly<CheckoutStepProps>): void {\n        const { isActive } = this.props;\n\n        if (isActive && isActive !== prevProps.isActive) {\n            this.focusStep();\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.timeoutRef) {\n            window.clearTimeout(this.timeoutRef);\n\n            this.timeoutRef = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            heading,\n            isActive,\n            isComplete,\n            isEditable,\n            onEdit,\n            summary,\n            type,\n        } = this.props;\n\n        return (\n            <li\n                className={ classNames(\n                    'checkout-step',\n                    'optimizedCheckout-checkoutStep',\n                    { [`checkout-step--${type}`]: !!type }\n                ) }\n                ref={ this.containerRef }\n            >\n                <div className=\"checkout-view-header\">\n                    <CheckoutStepHeader\n                        heading={ heading }\n                        isActive={ isActive }\n                        isComplete={ isComplete }\n                        isEditable={ isEditable }\n                        onEdit={ onEdit }\n                        summary={ summary }\n                        type={ type }\n                    />\n                </div>\n\n                { this.renderContent() }\n            </li>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        const { children, isActive } = this.props;\n\n        return <>\n            <MobileView>\n                { matched => {\n                    if (matched) {\n                        return !isActive ? null : <div className=\"checkout-view-content\">\n                            { children }\n                        </div>;\n                    }\n\n                    return <CSSTransition\n                        addEndListener={ this.handleTransitionEnd }\n                        classNames=\"checkout-view-content\"\n                        in={ isActive }\n                        mountOnEnter\n                        timeout={ {} }\n                        unmountOnExit\n                    >\n                        <div\n                            className=\"checkout-view-content\"\n                            ref={ this.contentRef }\n                        >\n                            { children }\n                        </div>\n                    </CSSTransition>;\n                } }\n            </MobileView>\n        </>;\n    }\n\n    private focusStep(): void {\n        const delay = isMobileView() ? 0 : this.getTransitionDelay();\n\n        this.timeoutRef = window.setTimeout(() => {\n            const input = this.getChildInput();\n            const position = this.getScrollPosition();\n            const { type, onExpanded = noop } = this.props;\n\n            if (input) {\n                input.focus();\n            }\n\n            if (position !== undefined && !isNaN(position)) {\n                window.scrollTo(0, position);\n            }\n\n            onExpanded(type);\n\n            this.timeoutRef = undefined;\n        }, delay);\n    }\n\n    private getChildInput(): HTMLElement | undefined {\n        const container = this.containerRef.current;\n\n        if (!container) {\n            return;\n        }\n\n        const input = container.querySelector<HTMLElement>('input, select, textarea');\n\n        return input ? input : undefined;\n    }\n\n    private getScrollPosition(): number | undefined {\n        const container = this.getParentContainer();\n        const { isComplete } = this.props;\n\n        if (!container || window !== window.top) {\n            return;\n        }\n\n        const topOffset = isComplete ? 0 : window.innerHeight / 5;\n        const containerOffset = container.getBoundingClientRect().top + (window.scrollY || window.pageYOffset);\n\n        return containerOffset - topOffset;\n    }\n\n    // For now, we need to find the parent container because `CheckoutStep`\n    // isn't the outer container yet. Once both the header and body are\n    // moved inside this component, we can remove the lookup.\n    private getParentContainer(): HTMLElement | undefined {\n        let container: HTMLElement | null = this.containerRef.current;\n\n        while (container && container.parentElement) {\n            if (container.parentElement.classList.contains('checkout-step')) {\n                return container.parentElement;\n            }\n\n            container = container.parentElement;\n        }\n\n        return this.containerRef.current ? this.containerRef.current : undefined;\n    }\n\n    private getTransitionDelay(): number {\n        if (this.timeoutDelay !== undefined) {\n            return this.timeoutDelay;\n        }\n\n        // Cache the result to avoid unnecessary reflow\n        this.timeoutDelay = parseFloat(this.contentRef.current ? getComputedStyle(this.contentRef.current).transitionDuration : '0s') * 1000;\n\n        return this.timeoutDelay;\n    }\n\n    private handleTransitionEnd: (node: HTMLElement, done: () => void) => void = (node, done) => {\n        node.addEventListener('transitionend', ({ target }) => {\n            if (target === node) {\n                done();\n            }\n        });\n    };\n}\n","import { Address, Cart, CheckoutParams, CheckoutSelectors, Consignment, EmbeddedCheckoutMessenger, EmbeddedCheckoutMessengerOptions, FlashMessage, Promotion, RequestOptions, StepTracker } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { find, findIndex } from 'lodash';\nimport React, { lazy, Component, ReactNode } from 'react';\n\nimport { StaticBillingAddress } from '../billing';\nimport { EmptyCartMessage } from '../cart';\nimport { ErrorLogger, ErrorModal } from '../common/error';\nimport { retry } from '../common/utility';\nimport { CustomerInfo, CustomerSignOutEvent, CustomerViewType } from '../customer';\nimport { isEmbedded, EmbeddedCheckoutStylesheet } from '../embeddedCheckout';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { PromotionBannerList } from '../promotion';\nimport { hasSelectedShippingOptions, isUsingMultiShipping, StaticConsignment } from '../shipping';\nimport { ShippingOptionExpiredError } from '../shipping/shippingOption';\nimport { LazyContainer, LoadingNotification, LoadingOverlay } from '../ui/loading';\nimport { MobileView } from '../ui/responsive';\n\nimport mapToCheckoutProps from './mapToCheckoutProps';\nimport navigateToOrderConfirmation from './navigateToOrderConfirmation';\nimport withCheckout from './withCheckout';\nimport CheckoutStep from './CheckoutStep';\nimport CheckoutStepStatus from './CheckoutStepStatus';\nimport CheckoutStepType from './CheckoutStepType';\nimport CheckoutSupport from './CheckoutSupport';\n\nconst Billing = lazy(() => retry(() => import(\n    /* webpackChunkName: \"billing\" */\n    '../billing/Billing'\n)));\n\nconst CartSummary = lazy(() => retry(() => import(\n    /* webpackChunkName: \"cart-summary\" */\n    '../cart/CartSummary'\n)));\n\nconst CartSummaryDrawer = lazy(() => retry(() => import(\n    /* webpackChunkName: \"cart-summary-drawer\" */\n    '../cart/CartSummaryDrawer'\n)));\n\nconst Customer = lazy(() => retry(() => import(\n    /* webpackChunkName: \"customer\" */\n    '../customer/Customer'\n)));\n\nconst Payment = lazy(() => retry(() => import(\n    /* webpackChunkName: \"payment\" */\n    '../payment/Payment'\n)));\n\nconst Shipping = lazy(() => retry(() => import(\n    /* webpackChunkName: \"shipping\" */\n    '../shipping/Shipping'\n)));\n\nexport interface CheckoutProps {\n    checkoutId: string;\n    containerId: string;\n    embeddedStylesheet: EmbeddedCheckoutStylesheet;\n    embeddedSupport: CheckoutSupport;\n    errorLogger: ErrorLogger;\n    createEmbeddedMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger;\n    createStepTracker(): StepTracker;\n}\n\nexport interface CheckoutState {\n    activeStepType?: CheckoutStepType;\n    customerViewType?: CustomerViewType;\n    defaultStepType?: CheckoutStepType;\n    error?: Error;\n    flashMessages?: FlashMessage[];\n    isMultiShippingMode: boolean;\n    isCartEmpty: boolean;\n    isRedirecting: boolean;\n    hasSelectedShippingOptions: boolean;\n}\n\nexport interface WithCheckoutProps {\n    billingAddress?: Address;\n    cart?: Cart;\n    consignments?: Consignment[];\n    error?: Error;\n    hasCartChanged: boolean;\n    flashMessages?: FlashMessage[];\n    isGuestEnabled: boolean;\n    isLoadingCheckout: boolean;\n    isPending: boolean;\n    loginUrl: string;\n    promotions?: Promotion[];\n    steps: CheckoutStepStatus[];\n    clearError(error?: Error): void;\n    loadCheckout(id: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n}\n\nclass Checkout extends Component<CheckoutProps & WithCheckoutProps & WithLanguageProps, CheckoutState> {\n    stepTracker: StepTracker | undefined;\n\n    state: CheckoutState = {\n        isCartEmpty: false,\n        isRedirecting: false,\n        isMultiShippingMode: false,\n        hasSelectedShippingOptions: false,\n    };\n\n    private embeddedMessenger?: EmbeddedCheckoutMessenger;\n    private unsubscribeFromConsignments?: () => void;\n\n    componentWillUnmount(): void {\n        if (this.unsubscribeFromConsignments) {\n            this.unsubscribeFromConsignments();\n            this.unsubscribeFromConsignments = undefined;\n        }\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            checkoutId,\n            containerId,\n            createStepTracker,\n            createEmbeddedMessenger,\n            embeddedStylesheet,\n            loadCheckout,\n            subscribeToConsignments,\n        } = this.props;\n\n        try {\n            const { data } = await loadCheckout(checkoutId, {\n                params: {\n                    include: [\n                        'cart.lineItems.physicalItems.categoryNames',\n                        'cart.lineItems.digitalItems.categoryNames',\n                    ] as any, // FIXME: Currently the enum is not exported so it can't be used here.\n                },\n            });\n            const { links: { siteLink = '' } = {} } = data.getConfig() || {};\n            const errorFlashMessages = data.getFlashMessages('error') || [];\n\n            if (errorFlashMessages.length) {\n                this.setState({ error: new Error(errorFlashMessages[0].message) });\n            }\n\n            const messenger = createEmbeddedMessenger({ parentOrigin: siteLink });\n\n            this.unsubscribeFromConsignments = subscribeToConsignments(this.handleConsignmentsUpdated);\n            this.embeddedMessenger = messenger;\n            messenger.receiveStyles(styles => embeddedStylesheet.append(styles));\n            messenger.postFrameLoaded({ contentId: containerId });\n            messenger.postLoaded();\n\n            this.stepTracker = createStepTracker();\n            this.stepTracker.trackCheckoutStarted();\n\n            const consignments = data.getConsignments();\n            const cart = data.getCart();\n            const isMultiShippingMode = !!cart && !!consignments && isUsingMultiShipping(consignments, cart.lineItems);\n\n            if (isMultiShippingMode) {\n                this.setState({ isMultiShippingMode }, this.handleReady);\n            } else {\n                this.handleReady();\n            }\n        } catch (error) {\n            this.handleUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { error } = this.state;\n\n        return <>\n            <div className={ classNames({ 'is-embedded': isEmbedded() }) }>\n                <div className=\"layout optimizedCheckout-contentPrimary\">\n                    { this.renderContent() }\n                </div>\n            </div>\n\n            <ErrorModal\n                error={ error }\n                onClose={ this.handleCloseErrorModal }\n            />\n        </>;\n    }\n\n    private renderContent(): ReactNode {\n        const {\n            isPending,\n            loginUrl,\n            promotions = [],\n            steps,\n        } = this.props;\n\n        const {\n            activeStepType,\n            defaultStepType,\n            isCartEmpty,\n            isRedirecting,\n        } = this.state;\n\n        if (isCartEmpty) {\n            return (\n                <EmptyCartMessage\n                    loginUrl={ loginUrl }\n                    waitInterval={ 3000 }\n                />\n            );\n        }\n\n        return (\n            <LoadingOverlay\n                hideContentWhenLoading\n                isLoading={ isRedirecting }\n            >\n                <div className=\"layout-main\">\n                    <LoadingNotification isLoading={ isPending } />\n\n                    <PromotionBannerList promotions={ promotions } />\n\n                    <ol className=\"checkout-steps\">\n                        { steps\n                            .filter(step => step.isRequired)\n                            .map(step => this.renderStep({\n                                ...step,\n                                isActive: activeStepType ? activeStepType === step.type : defaultStepType === step.type,\n                            })) }\n                    </ol>\n                </div>\n\n                { this.renderCartSummary() }\n            </LoadingOverlay>\n        );\n    }\n\n    private renderStep(step: CheckoutStepStatus): ReactNode {\n        switch (step.type) {\n        case CheckoutStepType.Customer:\n            return this.renderCustomerStep(step);\n\n        case CheckoutStepType.Shipping:\n            return this.renderShippingStep(step);\n\n        case CheckoutStepType.Billing:\n            return this.renderBillingStep(step);\n\n        case CheckoutStepType.Payment:\n            return this.renderPaymentStep(step);\n\n        default:\n            return null;\n        }\n    }\n\n    private renderCustomerStep(step: CheckoutStepStatus): ReactNode {\n        const { isGuestEnabled } = this.props;\n\n        const {\n            customerViewType = isGuestEnabled ? CustomerViewType.Guest : CustomerViewType.Login,\n        } = this.state;\n\n        return (\n            <CheckoutStep\n                { ...step }\n                heading={ <TranslatedString id=\"customer.customer_heading\" /> }\n                key={ step.type }\n                onEdit={ this.handleEditStep }\n                onExpanded={ this.handleExpanded }\n                summary={\n                    <CustomerInfo\n                        onSignOut={ this.handleSignOut }\n                        onSignOutError={ this.handleError }\n                    />\n                }\n            >\n                <LazyContainer>\n                    <Customer\n                        checkEmbeddedSupport={ this.checkEmbeddedSupport }\n                        isEmbedded={ isEmbedded() }\n                        onChangeViewType={ this.handleChangeCustomerViewType }\n                        onContinueAsGuest={ this.navigateToNextIncompleteStep }\n                        onContinueAsGuestError={ this.handleError }\n                        onReady={ this.handleReady }\n                        onSignIn={ this.navigateToNextIncompleteStep }\n                        onSignInError={ this.handleError }\n                        onUnhandledError={ this.handleUnhandledError }\n                        viewType={ customerViewType }\n                    />\n                </LazyContainer>\n            </CheckoutStep>\n        );\n    }\n\n    private renderShippingStep(step: CheckoutStepStatus): ReactNode {\n        const {\n            hasCartChanged,\n            cart,\n            consignments = [],\n        } = this.props;\n\n        const { isMultiShippingMode } = this.state;\n\n        if (!cart) {\n            return;\n        }\n\n        return (\n            <CheckoutStep\n                { ...step }\n                heading={ <TranslatedString id=\"shipping.shipping_heading\" /> }\n                key={ step.type }\n                onEdit={ this.handleEditStep }\n                onExpanded={ this.handleExpanded }\n                summary={ consignments.map(consignment =>\n                    <div className=\"staticConsignmentContainer\" key={ consignment.id }>\n                        <StaticConsignment\n                            cart={ cart }\n                            compactView={ consignments.length < 2 }\n                            consignment={ consignment }\n                        />\n                    </div>) }\n            >\n                <LazyContainer>\n                    <Shipping\n                        cartHasChanged={ hasCartChanged }\n                        isMultiShippingMode={ isMultiShippingMode }\n                        navigateNextStep={ this.handleShippingNextStep }\n                        onReady={ this.handleReady }\n                        onSignIn={ this.handleShippingSignIn }\n                        onToggleMultiShipping={ this.handleToggleMultiShipping }\n                        onUnhandledError={ this.handleUnhandledError }\n                    />\n                </LazyContainer>\n            </CheckoutStep>\n        );\n    }\n\n    private renderBillingStep(step: CheckoutStepStatus): ReactNode {\n        const { billingAddress } = this.props;\n\n        return (\n            <CheckoutStep\n                { ...step }\n                heading={ <TranslatedString id=\"billing.billing_heading\" /> }\n                key={ step.type }\n                onEdit={ this.handleEditStep }\n                onExpanded={ this.handleExpanded }\n                summary={ billingAddress && <StaticBillingAddress address={ billingAddress } /> }\n            >\n                <LazyContainer>\n                    <Billing\n                        navigateNextStep={ this.navigateToNextIncompleteStep }\n                        onReady={ this.handleReady }\n                        onUnhandledError={ this.handleUnhandledError }\n                    />\n                </LazyContainer>\n            </CheckoutStep>\n        );\n    }\n\n    private renderPaymentStep(step: CheckoutStepStatus): ReactNode {\n        const {\n            consignments,\n            cart,\n        } = this.props;\n\n        return (\n            <CheckoutStep\n                { ...step }\n                heading={ <TranslatedString id=\"payment.payment_heading\" /> }\n                key={ step.type }\n                onEdit={ this.handleEditStep }\n                onExpanded={ this.handleExpanded }\n            >\n                <LazyContainer>\n                    <Payment\n                        checkEmbeddedSupport={ this.checkEmbeddedSupport }\n                        isEmbedded={ isEmbedded() }\n                        isUsingMultiShipping={ cart && consignments ? isUsingMultiShipping(consignments, cart.lineItems) : false }\n                        onCartChangedError={ this.handleCartChangedError }\n                        onFinalize={ this.navigateToOrderConfirmation }\n                        onReady={ this.handleReady }\n                        onSubmit={ this.navigateToOrderConfirmation }\n                        onSubmitError={ this.handleError }\n                        onUnhandledError={ this.handleUnhandledError }\n                    />\n                </LazyContainer>\n            </CheckoutStep>\n        );\n    }\n\n    private renderCartSummary(): ReactNode {\n        return (\n            <MobileView>\n                { matched => {\n                    if (matched) {\n                        return <LazyContainer>\n                            <CartSummaryDrawer />\n                        </LazyContainer>;\n                    }\n\n                    return <aside className=\"layout-cart\">\n                        <LazyContainer>\n                            <CartSummary />\n                        </LazyContainer>\n                    </aside>;\n                } }\n            </MobileView>\n        );\n    }\n\n    private navigateToStep(type: CheckoutStepType, options?: { isDefault?: boolean }): void {\n        const { clearError, error, steps } = this.props;\n        const step = find(steps, { type });\n\n        if (!step) {\n            return;\n        }\n\n        if (options && options.isDefault) {\n            this.setState({ defaultStepType: step.type });\n        } else {\n            this.setState({ activeStepType: step.type });\n        }\n\n        if (error) {\n            clearError(error);\n        }\n    }\n\n    private handleToggleMultiShipping: () => void = () => {\n        const { isMultiShippingMode } = this.state;\n\n        this.setState({ isMultiShippingMode: !isMultiShippingMode });\n    };\n\n    private navigateToNextIncompleteStep: (options?: { isDefault?: boolean }) => void = options => {\n        const { steps } = this.props;\n        const activeStepIndex = findIndex(steps, { isActive: true });\n        const activeStep = activeStepIndex >= 0 && steps[activeStepIndex];\n\n        if (!activeStep) {\n            return;\n        }\n\n        const previousStep = steps[Math.max(activeStepIndex - 1, 0)];\n\n        if (previousStep && this.stepTracker) {\n            this.stepTracker.trackStepCompleted(previousStep.type);\n        }\n\n        this.navigateToStep(activeStep.type, options);\n    };\n\n    private navigateToOrderConfirmation: () => void = () => {\n        const { steps } = this.props;\n\n        if (this.stepTracker) {\n            this.stepTracker.trackStepCompleted(steps[steps.length - 1].type);\n        }\n\n        if (this.embeddedMessenger) {\n            this.embeddedMessenger.postComplete();\n        }\n\n        this.setState({ isRedirecting: true }, () => {\n            navigateToOrderConfirmation();\n        });\n    };\n\n    private checkEmbeddedSupport: (methodIds: string[]) => boolean = methodIds => {\n        const { embeddedSupport } = this.props;\n\n        return embeddedSupport.isSupported(...methodIds);\n    };\n\n    private handleCartChangedError: () => void = () => {\n        this.navigateToStep(CheckoutStepType.Shipping);\n    };\n\n    private handleConsignmentsUpdated: (state: CheckoutSelectors) => void = ({ data }) => {\n        const {\n            hasSelectedShippingOptions: prevHasSelectedShippingOptions,\n            activeStepType,\n        } = this.state;\n\n        const { steps } = this.props;\n\n        const newHasSelectedShippingOptions = hasSelectedShippingOptions(data.getConsignments() || []);\n\n        if (prevHasSelectedShippingOptions &&\n            !newHasSelectedShippingOptions &&\n            findIndex(steps, { type: CheckoutStepType.Shipping }) < findIndex(steps, { type: activeStepType })\n        ) {\n            this.navigateToStep(CheckoutStepType.Shipping);\n            this.setState({ error: new ShippingOptionExpiredError() });\n        }\n\n        this.setState({ hasSelectedShippingOptions: newHasSelectedShippingOptions });\n    };\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ error: undefined });\n    };\n\n    private handleChangeCustomerViewType: (viewType: CustomerViewType) => void = viewType => {\n        this.setState({ customerViewType: viewType });\n    };\n\n    private handleExpanded: (type: CheckoutStepType) => void = type => {\n        if (this.stepTracker) {\n           this.stepTracker.trackStepViewed(type);\n        }\n    };\n\n    private handleUnhandledError: (error: Error) => void = error => {\n        this.handleError(error);\n\n        // For errors that are not caught and handled by child components, we\n        // handle them here by displaying a generic error modal to the shopper.\n        this.setState({ error });\n    };\n\n    private handleError: (error: Error) => void = error => {\n        const { errorLogger } = this.props;\n\n        errorLogger.log(error);\n\n        if (this.embeddedMessenger) {\n            this.embeddedMessenger.postError(error);\n        }\n    };\n\n    private handleEditStep: (type: CheckoutStepType) => void = type => {\n        this.navigateToStep(type);\n    };\n\n    private handleReady: () => void = () => {\n        this.navigateToNextIncompleteStep({ isDefault: true });\n    };\n\n    private handleSignOut: (event: CustomerSignOutEvent) => void = ({ isCartEmpty }) => {\n        const { loginUrl, isGuestEnabled } = this.props;\n\n        if (this.embeddedMessenger) {\n            this.embeddedMessenger.postSignedOut();\n        }\n\n        if (isGuestEnabled) {\n            this.setState({ customerViewType: CustomerViewType.Guest });\n        }\n\n        if (isCartEmpty) {\n            this.setState({ isCartEmpty: true });\n\n            if (!isEmbedded()) {\n                return window.top.location.assign(loginUrl);\n            }\n        }\n\n        this.navigateToStep(CheckoutStepType.Customer);\n    };\n\n    private handleShippingNextStep: (billingSameAsShipping: boolean) => void = billingSameAsShipping => {\n        if (billingSameAsShipping) {\n            this.navigateToNextIncompleteStep();\n        } else {\n            this.navigateToStep(CheckoutStepType.Billing);\n        }\n    };\n\n    private handleShippingSignIn: () => void = () => {\n        this.navigateToStep(CheckoutStepType.Customer);\n        this.setState({ customerViewType: CustomerViewType.Login });\n    };\n}\n\nexport default withLanguage(withCheckout(mapToCheckoutProps)(Checkout));\n","import { noop } from 'lodash';\n\nexport default function navigateToOrderConfirmation(): Promise<never> {\n    const url = `${window.location.href}/order-confirmation`;\n\n    window.location.replace(url);\n\n    return new Promise(noop);\n}\n","import { CheckoutSelectors, CustomError } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport { EMPTY_ARRAY } from '../common/utility';\n\nimport getCheckoutStepStatuses from './getCheckoutStepStatuses';\nimport { WithCheckoutProps } from './Checkout';\nimport { CheckoutContextProps } from './CheckoutContext';\n\nexport default function mapToCheckoutProps(\n    { checkoutService, checkoutState }: CheckoutContextProps\n): WithCheckoutProps {\n    const { data, errors, statuses } = checkoutState;\n    const { promotions = EMPTY_ARRAY } = data.getCheckout() || {};\n    const submitOrderError = errors.getSubmitOrderError() as CustomError;\n    const {\n        checkoutSettings: { guestCheckoutEnabled: isGuestEnabled = false } = {},\n        links: { loginLink: loginUrl = '' } = {},\n    } = data.getConfig() || {};\n\n    const subscribeToConsignmentsSelector = createSelector(\n        ({ checkoutService: { subscribe} }: CheckoutContextProps) => subscribe,\n        subscribe => (subscriber: (state: CheckoutSelectors) => void) => {\n            return subscribe(subscriber, ({ data: { getConsignments } }) => getConsignments());\n        }\n    );\n\n    return {\n        billingAddress: data.getBillingAddress(),\n        cart: data.getCart(),\n        clearError: checkoutService.clearError,\n        consignments: data.getConsignments(),\n        hasCartChanged: submitOrderError && submitOrderError.type === 'cart_changed', // TODO: Need to clear the error once it's displayed\n        isGuestEnabled,\n        isLoadingCheckout: statuses.isLoadingCheckout(),\n        isPending: statuses.isPending(),\n        loadCheckout: checkoutService.loadCheckout,\n        loginUrl,\n        promotions,\n        subscribeToConsignments: subscribeToConsignmentsSelector({ checkoutService, checkoutState }),\n        steps: data.getCheckout() ? getCheckoutStepStatuses(checkoutState) : EMPTY_ARRAY,\n    };\n}\n","import { createCheckoutService, createEmbeddedCheckoutMessenger, createStepTracker, StepTracker } from '@bigcommerce/checkout-sdk';\nimport { BrowserOptions } from '@sentry/browser';\nimport React, { Component } from 'react';\nimport ReactModal from 'react-modal';\n\nimport '../../scss/App.scss';\nimport { createErrorLogger, ErrorBoundary, ErrorLogger } from '../common/error';\nimport { createEmbeddedCheckoutStylesheet, createEmbeddedCheckoutSupport } from '../embeddedCheckout';\nimport { getLanguageService, LocaleProvider } from '../locale';\n\nimport Checkout from './Checkout';\nimport CheckoutProvider from './CheckoutProvider';\n\nexport interface CheckoutAppProps {\n    checkoutId: string;\n    containerId: string;\n    publicPath?: string;\n    sentryConfig?: BrowserOptions;\n}\n\nexport default class CheckoutApp extends Component<CheckoutAppProps> {\n    private checkoutService = createCheckoutService({\n        locale: getLanguageService().getLocale(),\n        shouldWarnMutation: process.env.NODE_ENV === 'development',\n    });\n    private embeddedStylesheet = createEmbeddedCheckoutStylesheet();\n    private embeddedSupport = createEmbeddedCheckoutSupport(getLanguageService());\n    private errorLogger: ErrorLogger;\n\n    constructor(props: Readonly<CheckoutAppProps>) {\n        super(props);\n\n        this.errorLogger = createErrorLogger(\n            { sentry: props.sentryConfig },\n            {\n                errorTypes: ['UnrecoverableError'],\n                publicPath: props.publicPath,\n            }\n        );\n    }\n\n    componentDidMount(): void {\n        const { containerId } = this.props;\n\n        ReactModal.setAppElement(`#${containerId}`);\n    }\n\n    render() {\n        return (\n            <ErrorBoundary logger={ this.errorLogger }>\n                <LocaleProvider checkoutService={ this.checkoutService }>\n                    <CheckoutProvider checkoutService={ this.checkoutService }>\n                        <Checkout\n                            { ...this.props }\n                            createEmbeddedMessenger={ createEmbeddedCheckoutMessenger }\n                            createStepTracker={ this.createStepTracker }\n                            embeddedStylesheet={ this.embeddedStylesheet }\n                            embeddedSupport={ this.embeddedSupport }\n                            errorLogger={ this.errorLogger }\n                        />\n                    </CheckoutProvider>\n                </LocaleProvider>\n            </ErrorBoundary>\n        );\n    }\n\n    private createStepTracker: () => StepTracker = () => {\n        return createStepTracker(this.checkoutService);\n    };\n}\n","import { createRequestSender, RequestSender } from '@bigcommerce/request-sender';\n\nimport { CreatedCustomer, CreatedCustomerResponse } from './CreatedCustomer';\n\nexport interface CustomerCreateRequestBody {\n    confirmPassword: string;\n    newsletter: boolean;\n    orderId: number;\n    password: string;\n}\n\nexport default class AccountService {\n    constructor(\n        private requestSender: RequestSender = createRequestSender()\n    ) { }\n\n    create(body: CustomerCreateRequestBody): Promise<CreatedCustomer> {\n        return this.requestSender\n            .put<CreatedCustomerResponse>('/internalapi/v1/checkout/customer', { body })\n            .then(response => response.body.data.customer);\n    }\n}\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, Fragment, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\n\nexport interface PasswordField {\n    minLength: number;\n}\n\nconst SignUpPasswordField: FunctionComponent<PasswordField> = ({\n    minLength,\n}) => {\n    const renderPasswordInput = useCallback(({ field }: FieldProps<string>) => (\n        <TextInput\n            { ...field }\n            id={ field.name }\n            type=\"password\"\n        />\n    ), []);\n\n    const renderPasswordConfirmationInput = useCallback(({ field }: FieldProps<string>) => (\n        <TextInput\n            { ...field }\n            id={ field.name }\n            type=\"password\"\n        />\n    ), []);\n\n    const passwordLabelContent = useMemo(() => (\n        <Fragment>\n            <TranslatedString id={ 'customer.password_label' } />\n            { ' ' }\n            <small>\n                { `${minLength}-` }\n                <TranslatedString id={ 'customer.password_minimum_character_label' } />\n            </small>\n        </Fragment>\n    ), [minLength]);\n\n    const passwordConfirmationLabelContent = useMemo(() => (\n        <TranslatedString id={ 'customer.password_confirmation_label' } />\n    ), []);\n\n    return <Fragment>\n        <FormField\n            input={ renderPasswordInput }\n            labelContent={ passwordLabelContent }\n            name=\"password\"\n        />\n\n        <FormField\n            input={ renderPasswordConfirmationInput }\n            labelContent={ passwordConfirmationLabelContent }\n            name=\"confirmPassword\"\n        />\n    </Fragment>;\n};\n\nexport default memo(SignUpPasswordField);\n","import { withFormik, FormikProps } from 'formik';\nimport React, { memo, FunctionComponent } from 'react';\nimport { object, ref, string } from 'yup';\n\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport SignUpPasswordField from './SignUpPasswordField';\n\nexport interface PasswordRequirements {\n    minLength: number;\n    alpha: RegExp;\n    numeric: RegExp;\n    description?: string;\n}\n\nexport interface SignUpFormProps {\n    isSigningUp?: boolean;\n    passwordRequirements: PasswordRequirements;\n    onSignUp(data: SignUpFormValues): void;\n}\n\nexport interface SignUpFormValues {\n    password: string;\n    confirmPassword: string;\n}\n\nconst GuestSignUpForm: FunctionComponent<SignUpFormProps & WithLanguageProps & FormikProps<SignUpFormValues>> = ({\n    isSigningUp,\n    passwordRequirements: { minLength },\n}) => (\n    <Form className=\"guest-signup form\">\n        <Fieldset\n            legend={\n                <Legend>\n                    <TranslatedString id=\"customer.create_account_text\" />\n                </Legend>\n            }\n        >\n            <SignUpPasswordField minLength={ minLength } />\n\n            <div className=\"form-actions\">\n                <Button\n                    id=\"createAccountButton\"\n                    isLoading={ isSigningUp }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"customer.create_account_action\" />\n                </Button>\n            </div>\n        </Fieldset>\n    </Form>\n);\n\nexport default withLanguage(withFormik<SignUpFormProps & WithLanguageProps, SignUpFormValues>({\n    mapPropsToValues: () => ({\n        password: '',\n        confirmPassword: '',\n    }),\n    handleSubmit: (values, { props: { onSignUp } }) => {\n        onSignUp(values);\n    },\n    validationSchema: ({\n        language,\n        passwordRequirements: { description, numeric, alpha, minLength },\n    }: SignUpFormProps & WithLanguageProps) => object({\n        password: string()\n            .required(description || language.translate('customer.password_required_error'))\n            .matches(numeric, description || language.translate('customer.password_number_required_error'))\n            .matches(alpha, description || language.translate('customer.password_letter_required_error'))\n            .min(minLength, description || language.translate('customer.password_under_minimum_length_error'))\n            .max(100, language.translate('customer.password_over_maximum_length_error')),\n        confirmPassword: string()\n            .required(language.translate('customer.password_confirmation_required_error'))\n            .oneOf([ref('password')], language.translate('customer.password_confirmation_error')),\n    }),\n})(memo(GuestSignUpForm)));\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\n\nconst SignedUpSuccessAlert: FunctionComponent = () => (\n    <Alert type={ AlertType.Success }>\n        <strong>\n            <TranslatedString id=\"customer.create_account_success\" />\n        </strong>\n    </Alert>\n);\n\nexport default SignedUpSuccessAlert;\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AccountCreationRequirementsError extends CustomError {\n    constructor(data: Error, requirements: string) {\n        super({\n            name: 'ACCOUNT_CREATION_REQUIREMENTS_ERROR',\n            message: requirements,\n            title: getLanguageService().translate('customer.create_account_requirements_error_heading'),\n            data,\n        });\n\n        setPrototypeOf(this, AccountCreationRequirementsError.prototype);\n    }\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AccountCreationFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ACCOUNT_CREATION_FAILED',\n            message: getLanguageService().translate('customer.create_account_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AccountCreationFailedError.prototype);\n    }\n}\n","import { GatewayOrderPayment, Order, OrderPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\nimport { isStoreCreditPayment } from '../payment/storeCredit';\n\nexport interface PaymentInstructionsProps {\n    order: Order;\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return !isGiftCertificatePayment(payment) && !isStoreCreditPayment(payment);\n}\n\nfunction getPaymentInstructions(order: Order): string {\n    const gatewayPayment = (order.payments || []).find(isDefaultOrderPayment);\n    const instructions = gatewayPayment && gatewayPayment.detail.instructions;\n\n    return instructions || '';\n}\n\nexport default getPaymentInstructions;\n","import { GiftCertificate, OrderPayments } from '@bigcommerce/checkout-sdk';\n\nimport isGiftCertificatePayment from './isGiftCertificatePayment';\n\nexport default function mapFromPayments(payments: OrderPayments): GiftCertificate[] {\n    return payments\n        .filter(isGiftCertificatePayment)\n        .map(({ amount, detail }) => ({\n            code: detail.code,\n            remaining: detail.remaining,\n            used: amount,\n            balance: amount + detail.remaining,\n            purchaseDate: '',\n        }));\n}\n","import { OrderPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isStoreCreditPayment } from '../payment/storeCredit';\n\nexport default function getStoreCreditAmount(payments?: OrderPayment[]): number {\n    return (payments || []).filter(isStoreCreditPayment).reduce((total, payment) =>\n        total + payment.amount\n    , 0);\n}\n","import { Order } from '@bigcommerce/checkout-sdk';\n\nimport { mapFromPayments } from '../giftCertificate';\n\nimport getStoreCreditAmount from './getStoreCreditAmount';\nimport { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\n\nexport default function mapToOrderSummarySubtotalsProps({\n    baseAmount,\n    discountAmount,\n    shippingCostBeforeDiscount,\n    payments,\n    handlingCostTotal,\n    coupons,\n    taxes,\n}: Order): OrderSummarySubtotalsProps {\n    return {\n        subtotalAmount: baseAmount,\n        shippingAmount: shippingCostBeforeDiscount,\n        discountAmount,\n        storeCreditAmount: getStoreCreditAmount(payments),\n        handlingAmount: handlingCostTotal,\n        coupons,\n        giftCertificates: payments && mapFromPayments(payments),\n        taxes,\n    };\n}\n","import React, { FunctionComponent } from 'react';\n\nconst OrderConfirmationSection: FunctionComponent = ({\n    children,\n}) => (\n    <section className=\"orderConfirmation-section\">\n        { children }\n    </section>\n);\n\nexport default OrderConfirmationSection;\n","import { Order } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '../locale';\n\nimport OrderConfirmationSection from './OrderConfirmationSection';\n\nexport interface OrderStatusProps {\n    supportEmail: string;\n    supportPhoneNumber?: string;\n    order: Order;\n}\n\nconst OrderStatus: FunctionComponent<OrderStatusProps> = ({\n    order,\n    supportEmail,\n    supportPhoneNumber,\n}) => {\n    return <OrderConfirmationSection>\n        { order.orderId &&\n        <p data-test=\"order-confirmation-order-number-text\">\n            <TranslatedHtml\n                data={ { orderNumber: order.orderId } }\n                id=\"order_confirmation.order_number_text\"\n            />\n        </p> }\n\n        <p data-test=\"order-confirmation-order-status-text\">\n            <OrderStatusMessage\n                orderNumber={ order.orderId }\n                orderStatus={ order.status }\n                supportEmail={ supportEmail }\n                supportPhoneNumber={ supportPhoneNumber }\n            />\n        </p>\n\n        { order.mandate && <a href={ order.mandate } rel=\"noopener noreferrer\" target=\"_blank\">\n                <TranslatedString\n                    data={ {provider : order?.payments?.[0].description === 'Stripe (SEPA)' ? 'SEPA Direct Debit ' : order?.payments?.[0].description } }\n                    id=\"order_confirmation.mandate_link_text\"\n                />\n        </a> }\n\n        { order.hasDigitalItems &&\n        <p data-test=\"order-confirmation-digital-items-text\">\n            <TranslatedHtml\n                id={ order.isDownloadable ?\n                    'order_confirmation.order_with_downloadable_digital_items_text' :\n                    'order_confirmation.order_without_downloadable_digital_items_text' }\n            />\n        </p> }\n    </OrderConfirmationSection>;\n};\n\ninterface OrderStatusMessageProps {\n    orderNumber: number;\n    orderStatus: string;\n    supportEmail?: string;\n    supportPhoneNumber?: string;\n}\n\nconst OrderStatusMessage: FunctionComponent<OrderStatusMessageProps> = ({\n    orderNumber,\n    orderStatus,\n    supportEmail,\n    supportPhoneNumber,\n}) => {\n    switch (orderStatus) {\n    case 'MANUAL_VERIFICATION_REQUIRED':\n    case 'AWAITING_PAYMENT':\n        return <TranslatedString\n            id=\"order_confirmation.order_pending_review_text\"\n        />;\n\n    case 'PENDING':\n        return <TranslatedString\n            data={ { orderNumber, supportEmail } }\n            id=\"order_confirmation.order_pending_status_text\"\n        />;\n\n    case 'INCOMPLETE':\n        return <TranslatedString\n            data={ { orderNumber, supportEmail } }\n            id=\"order_confirmation.order_incomplete_status_text\"\n        />;\n\n    default:\n        return <TranslatedHtml\n            data={ { orderNumber, supportEmail, supportPhoneNumber } }\n            id={ supportPhoneNumber ?\n                'order_confirmation.order_with_support_number_text' :\n                'order_confirmation.order_without_support_number_text' }\n        />;\n    }\n};\n\nexport default memo(OrderStatus);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconPrint: FunctionComponent = () => (\n    <svg\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconPrint);\n","import { throttle } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { IconPrint } from '../ui/icon';\n\nexport interface PrintLinkProps {\n    className?: string;\n}\n\nconst PRINT_MODAL_THROTTLE = 500;\n\nconst PrintLink: FunctionComponent<PrintLinkProps> = ({ className }) => {\n\n    const handleClick = useCallback(throttle(() => {\n        window.print();\n    }, PRINT_MODAL_THROTTLE), []);\n\n    if (typeof window.print !== 'function') {\n        return null;\n    }\n\n    return (\n        <a\n            className={ className || 'cart-header-link' }\n            id=\"cart-print-link\"\n            onClick={ handleClick }\n        >\n            <IconPrint />\n            { ' ' }\n            <TranslatedString id=\"cart.print_action\" />\n        </a>\n    );\n};\n\nexport default memo(PrintLink);\n","import React, { FunctionComponent } from 'react';\n\nexport interface HeaderProps {\n    testId?: string;\n}\n\nconst PrimaryHeader: FunctionComponent<HeaderProps> = ({\n    children,\n    testId,\n}) => (\n    <h1\n        className=\"optimizedCheckout-headingPrimary\"\n        data-test={ testId }\n    >\n        { children }\n    </h1>\n);\n\nexport default PrimaryHeader;\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { PrimaryHeader } from '../ui/header';\n\nexport interface HeaderProps {\n    name?: string;\n}\n\nconst ThankYouHeader: FunctionComponent<HeaderProps> = ({\n    name,\n}) => (\n    <PrimaryHeader testId=\"order-confirmation-heading\">\n        { name && <TranslatedString\n            data={ { name } }\n            id=\"order_confirmation.thank_you_customer_heading\"\n        /> }\n\n        { !name && <TranslatedString\n            id=\"order_confirmation.thank_you_heading\"\n        /> }\n    </PrimaryHeader>\n);\n\nexport default memo(ThankYouHeader);\n","import { CheckoutSelectors, EmbeddedCheckoutMessenger, EmbeddedCheckoutMessengerOptions, Order, ShopperConfig, StepTracker, StoreConfig } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport DOMPurify from 'dompurify';\nimport React, { lazy, Component, Fragment, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { ErrorLogger, ErrorModal } from '../common/error';\nimport { retry } from '../common/utility';\nimport { isEmbedded, EmbeddedCheckoutStylesheet } from '../embeddedCheckout';\nimport { CreatedCustomer, GuestSignUpForm, SignedUpSuccessAlert, SignUpFormValues } from '../guestSignup';\nimport { AccountCreationFailedError, AccountCreationRequirementsError } from '../guestSignup/errors';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { LazyContainer, LoadingSpinner } from '../ui/loading';\nimport { MobileView } from '../ui/responsive';\n\nimport getPaymentInstructions from './getPaymentInstructions';\nimport mapToOrderSummarySubtotalsProps from './mapToOrderSummarySubtotalsProps';\nimport OrderConfirmationSection from './OrderConfirmationSection';\nimport OrderStatus from './OrderStatus';\nimport PrintLink from './PrintLink';\nimport ThankYouHeader from './ThankYouHeader';\n\nconst OrderSummary = lazy(() => retry(() => import(\n    /* webpackChunkName: \"order-summary\" */\n    './OrderSummary'\n)));\n\nconst OrderSummaryDrawer = lazy(() => retry(() => import(\n    /* webpackChunkName: \"order-summary-drawer\" */\n    './OrderSummaryDrawer'\n)));\n\nexport interface OrderConfirmationState {\n    error?: Error;\n    hasSignedUp?: boolean;\n    isSigningUp?: boolean;\n}\n\nexport interface OrderConfirmationProps {\n    containerId: string;\n    embeddedStylesheet: EmbeddedCheckoutStylesheet;\n    errorLogger: ErrorLogger;\n    orderId: number;\n    createAccount(values: SignUpFormValues): Promise<CreatedCustomer>;\n    createEmbeddedMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger;\n    createStepTracker(): StepTracker;\n}\n\ninterface WithCheckoutOrderConfirmationProps {\n    order?: Order;\n    config?: StoreConfig;\n    loadOrder(orderId: number): Promise<CheckoutSelectors>;\n    isLoadingOrder(): boolean;\n}\n\nclass OrderConfirmation extends Component<\n    OrderConfirmationProps & WithCheckoutOrderConfirmationProps,\n    OrderConfirmationState\n> {\n    state: OrderConfirmationState = {};\n\n    private embeddedMessenger?: EmbeddedCheckoutMessenger;\n\n    componentDidMount(): void {\n        const {\n            containerId,\n            createEmbeddedMessenger,\n            createStepTracker,\n            embeddedStylesheet,\n            loadOrder,\n            orderId,\n        } = this.props;\n\n        loadOrder(orderId)\n            .then(({ data }) => {\n                const { links: { siteLink = '' } = {} } = data.getConfig() || {};\n                const messenger = createEmbeddedMessenger({ parentOrigin: siteLink });\n\n                this.embeddedMessenger = messenger;\n\n                messenger.receiveStyles(styles => embeddedStylesheet.append(styles));\n                messenger.postFrameLoaded({ contentId: containerId });\n\n                createStepTracker().trackOrderComplete();\n            })\n            .catch(this.handleUnhandledError);\n    }\n\n    render(): ReactNode {\n        const {\n            order,\n            config,\n            isLoadingOrder,\n        } = this.props;\n\n        if (!order || !config || isLoadingOrder()) {\n            return <LoadingSpinner isLoading={ true } />;\n        }\n\n        const paymentInstructions = getPaymentInstructions(order);\n        const {\n            storeProfile: {\n                orderEmail,\n                storePhoneNumber,\n            },\n            shopperConfig,\n            links: {\n                siteLink,\n            },\n        } = config;\n\n        return (\n            <div className={ classNames(\n                'layout optimizedCheckout-contentPrimary',\n                { 'is-embedded': isEmbedded() }\n            ) }\n            >\n                <div className=\"layout-main\">\n                    <div className=\"orderConfirmation\">\n                        <ThankYouHeader name={ order.billingAddress.firstName } />\n\n                        <OrderStatus\n                            order={ order }\n                            supportEmail={ orderEmail }\n                            supportPhoneNumber={ storePhoneNumber }\n                        />\n\n                        { paymentInstructions && <OrderConfirmationSection>\n                            <div\n                                dangerouslySetInnerHTML={ {\n                                    __html: DOMPurify.sanitize(paymentInstructions),\n                                } }\n                                data-test=\"payment-instructions\"\n                            />\n                        </OrderConfirmationSection> }\n\n                        { this.renderGuestSignUp({\n                            customerCanBeCreated: order.customerCanBeCreated,\n                            shopperConfig,\n                        }) }\n\n                        <div className=\"continueButtonContainer\">\n                            <a href={ siteLink } target=\"_top\">\n                                <Button variant={ ButtonVariant.Secondary }>\n                                    <TranslatedString id=\"order_confirmation.continue_shopping\" />\n                                </Button>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n\n                { this.renderOrderSummary() }\n                { this.renderErrorModal() }\n            </div>\n        );\n    }\n\n    private renderGuestSignUp({ customerCanBeCreated, shopperConfig }: {\n        customerCanBeCreated: boolean;\n        shopperConfig: ShopperConfig;\n    }): ReactNode {\n        const {\n            isSigningUp,\n            hasSignedUp,\n        } = this.state;\n\n        return <Fragment>\n            { customerCanBeCreated && !hasSignedUp && <GuestSignUpForm\n                isSigningUp={ isSigningUp }\n                onSignUp={ this.handleSignUp }\n                passwordRequirements={ this.getPasswordRequirements(shopperConfig) }\n            /> }\n\n            { hasSignedUp && <SignedUpSuccessAlert /> }\n        </Fragment>;\n    }\n\n    private renderOrderSummary(): ReactNode {\n        const {\n            order,\n            config,\n        } = this.props;\n\n        if (!order || !config) {\n            return null;\n        }\n\n        const {\n            currency,\n            shopperCurrency,\n        } = config;\n\n        return <>\n            <MobileView>\n                { matched => {\n                    if (matched) {\n                        return <LazyContainer>\n                            <OrderSummaryDrawer\n                                { ...mapToOrderSummarySubtotalsProps(order) }\n                                headerLink={ <PrintLink className=\"modal-header-link cart-modal-link\" /> }\n                                lineItems={ order.lineItems }\n                                shopperCurrency={ shopperCurrency }\n                                storeCurrency={ currency }\n                                total={ order.orderAmount }\n                            />\n                        </LazyContainer>;\n                    }\n\n                    return <aside className=\"layout-cart\">\n                        <LazyContainer>\n                            <OrderSummary\n                                headerLink={ <PrintLink /> }\n                                { ...mapToOrderSummarySubtotalsProps(order) }\n                                lineItems={ order.lineItems }\n                                shopperCurrency={ shopperCurrency }\n                                storeCurrency={ currency }\n                                total={ order.orderAmount }\n                            />\n                        </LazyContainer>\n                    </aside>;\n                } }\n            </MobileView>\n        </>;\n    }\n\n    private renderErrorModal(): ReactNode {\n        const { error } = this.state;\n\n        return (\n            <ErrorModal\n                error={ error }\n                onClose={ this.handleErrorModalClose }\n                shouldShowErrorCode={ false }\n            />\n        );\n    }\n\n    private handleErrorModalClose: () => void = () => {\n        this.setState({ error: undefined });\n    };\n\n    private handleSignUp: (values: SignUpFormValues) => void = ({ password, confirmPassword }) => {\n        const { createAccount, config } = this.props;\n\n        const shopperConfig = config && config.shopperConfig;\n        const passwordRequirements = (shopperConfig &&\n            shopperConfig.passwordRequirements &&\n            shopperConfig.passwordRequirements.error) || '';\n\n        this.setState({\n            isSigningUp: true,\n        });\n\n        createAccount({\n            password,\n            confirmPassword,\n        })\n            .then(() => {\n                this.setState({\n                    hasSignedUp: true,\n                    isSigningUp: false,\n                });\n            })\n            .catch(error => {\n                this.setState({\n                    error: (error.status < 500) ?\n                        new AccountCreationRequirementsError(error, passwordRequirements) :\n                        new AccountCreationFailedError(error),\n                    hasSignedUp: false,\n                    isSigningUp: false,\n                });\n            });\n    };\n\n    private handleUnhandledError: (error: Error) => void = error => {\n        const { errorLogger } = this.props;\n\n        this.setState({ error });\n        errorLogger.log(error);\n\n        if (this.embeddedMessenger) {\n            this.embeddedMessenger.postError(error);\n        }\n    };\n\n    private getPasswordRequirements(config: ShopperConfig) {\n        const allSlashes = new RegExp('/', 'g');\n        const { passwordRequirements } = config;\n        const { minlength, error, alpha, numeric } = passwordRequirements;\n\n        return {\n            minLength: minlength,\n            description: error,\n            alpha: new RegExp(alpha.replace(allSlashes, '')),\n            numeric: new RegExp(numeric.replace(allSlashes, '')),\n        };\n    }\n}\n\nexport function mapToOrderConfirmationProps(\n    context: CheckoutContextProps\n): WithCheckoutOrderConfirmationProps | null {\n    const {\n        checkoutState: {\n            data: {\n                getOrder,\n                getConfig,\n            },\n            statuses: {\n                isLoadingOrder,\n            },\n        },\n        checkoutService,\n    } = context;\n\n    const config = getConfig();\n    const order = getOrder();\n\n    return {\n        config,\n        isLoadingOrder,\n        loadOrder: checkoutService.loadOrder,\n        order,\n    };\n}\n\nexport default withCheckout(mapToOrderConfirmationProps)(OrderConfirmation);\n","import { createCheckoutService, createEmbeddedCheckoutMessenger, createStepTracker, StepTracker } from '@bigcommerce/checkout-sdk';\nimport { BrowserOptions } from '@sentry/browser';\nimport React, { Component, ReactNode } from 'react';\nimport ReactModal from 'react-modal';\n\nimport '../../scss/App.scss';\nimport { CheckoutProvider } from '../checkout';\nimport { createErrorLogger, ErrorBoundary, ErrorLogger } from '../common/error';\nimport { createEmbeddedCheckoutStylesheet } from '../embeddedCheckout';\nimport { AccountService, CreatedCustomer, SignUpFormValues } from '../guestSignup';\nimport { getLanguageService, LocaleProvider } from '../locale';\n\nimport OrderConfirmation from './OrderConfirmation';\n\nexport interface OrderConfirmationAppProps {\n    containerId: string;\n    orderId: number;\n    publicPath?: string;\n    sentryConfig?: BrowserOptions;\n}\n\nclass OrderConfirmationApp extends Component<OrderConfirmationAppProps> {\n    private accountService = new AccountService();\n    private checkoutService = createCheckoutService({\n        locale: getLanguageService().getLocale(),\n        shouldWarnMutation: process.env.NODE_ENV === 'development',\n    });\n    private embeddedStylesheet = createEmbeddedCheckoutStylesheet();\n    private errorLogger: ErrorLogger;\n\n    constructor(props: Readonly<OrderConfirmationAppProps>) {\n        super(props);\n\n        this.errorLogger = createErrorLogger(\n            { sentry: props.sentryConfig },\n            {\n                errorTypes: ['UnrecoverableError'],\n                publicPath: props.publicPath,\n            }\n        );\n    }\n\n    componentDidMount(): void {\n        const { containerId } = this.props;\n\n        ReactModal.setAppElement(`#${containerId}`);\n    }\n\n    render(): ReactNode {\n        return (\n            <ErrorBoundary logger={ this.errorLogger }>\n                <LocaleProvider checkoutService={ this.checkoutService }>\n                    <CheckoutProvider checkoutService={ this.checkoutService }>\n                        <OrderConfirmation\n                            { ...this.props }\n                            createAccount={ this.createAccount }\n                            createEmbeddedMessenger={ createEmbeddedCheckoutMessenger }\n                            createStepTracker={ this.createStepTracker }\n                            embeddedStylesheet={ this.embeddedStylesheet }\n                            errorLogger={ this.errorLogger }\n                        />\n                    </CheckoutProvider>\n                </LocaleProvider>\n            </ErrorBoundary>\n        );\n    }\n\n    private createAccount: (values: SignUpFormValues) => Promise<CreatedCustomer> = ({\n        password,\n        confirmPassword,\n    }) => {\n        const { orderId } = this.props;\n\n        return this.accountService.create({\n            orderId,\n            newsletter: false,\n            password,\n            confirmPassword,\n        });\n    };\n\n    private createStepTracker: () => StepTracker = () => {\n        return createStepTracker(this.checkoutService);\n    };\n}\n\nexport default OrderConfirmationApp;\n","enum DynamicFormFieldType {\n    telephone = 'tel',\n    dropdown = 'dropdown',\n    number = 'number',\n    password = 'password',\n    checkbox = 'checkbox',\n    multiline = 'multiline',\n    date = 'date',\n    radio = 'radio',\n    text = 'text',\n}\n\nexport default DynamicFormFieldType;\n","// `document.currentScript` can only be called at the global level as it only\n// holds a reference to the script when it is initially processed.\nconst path = document.currentScript ?\n    (document.currentScript as HTMLScriptElement).src :\n    undefined;\n\nexport default function getCurrentScriptPath(): string | undefined {\n    return path;\n}\n","import getCurrentScriptPath from './getCurrentScriptPath';\n\nexport default function configurePublicPath(\n    publicPath?: string\n): string {\n    if (!publicPath) {\n        const scriptPath = getCurrentScriptPath();\n\n        if (!scriptPath) {\n            throw new Error('Unable to configure the public path of the application because it is not specified and it cannot be inferred using the path of the current script.');\n        }\n\n        __webpack_public_path__ = `${scriptPath.split('/').slice(0, -1).join('/')}/`;\n\n        return __webpack_public_path__;\n    }\n\n    __webpack_public_path__ = publicPath.substr(-1) === '/' ? publicPath : `${publicPath}/`;\n\n    return __webpack_public_path__;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { configurePublicPath } from '../common/bundler';\n\nimport { CheckoutAppProps } from './CheckoutApp';\n\nexport type RenderCheckoutOptions = CheckoutAppProps;\n\nexport default function renderCheckout({\n    containerId,\n    publicPath,\n    ...props\n}: RenderCheckoutOptions): void {\n    const configuredPublicPath = configurePublicPath(publicPath);\n\n    // We want to use `require` here because we want to set up the public path\n    // first before importing the app component and its dependencies.\n    const { default: CheckoutApp } = require('./CheckoutApp');\n\n    // We want to use `require` here because we only want to import the package\n    // in development mode.\n    if (process.env.NODE_ENV === 'development') {\n        const whyDidYouRender = require('@welldone-software/why-did-you-render');\n\n        whyDidYouRender(React, {\n            collapseGroups: true,\n        });\n    }\n\n    ReactDOM.render(\n        <CheckoutApp\n            containerId={ containerId }\n            publicPath={ configuredPublicPath }\n            { ...props }\n        />,\n        document.getElementById(containerId)\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { configurePublicPath } from '../common/bundler';\n\nimport { OrderConfirmationAppProps } from './OrderConfirmationApp';\n\nexport type RenderOrderConfirmationOptions = OrderConfirmationAppProps;\n\nexport default function renderOrderConfirmation({\n    containerId,\n    publicPath,\n    ...props\n}: RenderOrderConfirmationOptions): void {\n    const configuredPublicPath = configurePublicPath(publicPath);\n\n    // We want to use `require` here because we want to set up the public path\n    // first before importing the app component and its dependencies.\n    const { default: OrderConfirmationApp } = require('./OrderConfirmationApp');\n\n    // We want to use `require` here because we only want to import the package\n    // in development mode.\n    if (process.env.NODE_ENV === 'development') {\n        const whyDidYouRender = require('@welldone-software/why-did-you-render');\n\n        whyDidYouRender(React, {\n            collapseGroups: true,\n        });\n    }\n\n    ReactDOM.render(\n        <OrderConfirmationApp\n            containerId={ containerId }\n            publicPath={ configuredPublicPath }\n            { ...props }\n        />,\n        document.getElementById(containerId)\n    );\n}\n","import { Address, Country } from '@bigcommerce/checkout-sdk';\nimport { find, isEmpty } from 'lodash';\n\nimport { LocalizedGeography } from '../geography';\n\nconst localizeAddress = <T1 extends Address>(\n    address: T1,\n    countries?: Country[]\n): T1 & LocalizedGeography => {\n    const country =  find(countries, { code: address.countryCode });\n    const states = !country || isEmpty(country.subdivisions) ? [] : country.subdivisions;\n    const state = find(states, { code:  address.stateOrProvinceCode });\n\n    return {\n        ...address,\n        localizedCountry: country ? country.name : address.country,\n        localizedProvince: state ? state.name : address.stateOrProvince,\n    };\n};\n\nexport default localizeAddress;\n","import { Address, CheckoutSelectors, Country, FormField, ShippingInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { isEmpty } from 'lodash';\nimport React, { memo, FunctionComponent } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\n\nimport isValidAddress from './isValidAddress';\nimport localizeAddress from './localizeAddress';\nimport AddressType from './AddressType';\nimport './StaticAddress.scss';\n\nexport interface StaticAddressProps {\n    address: Address;\n    type?: AddressType;\n}\n\nexport interface StaticAddressEditableProps extends StaticAddressProps {\n    initialize?(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n}\n\ninterface WithCheckoutStaticAddressProps {\n    countries?: Country[];\n    fields?: FormField[];\n}\n\nconst StaticAddress: FunctionComponent<StaticAddressEditableProps & WithCheckoutStaticAddressProps> = ({\n    countries,\n    fields,\n    address: addressWithoutLocalization,\n}) => {\n    const address = localizeAddress(addressWithoutLocalization, countries);\n    const isValid = !fields ? !isEmpty(address) : isValidAddress(\n        address,\n        fields.filter(field => !field.custom)\n    );\n\n    return !isValid ? null : <div className=\"vcard checkout-address--static\">\n        {\n            (address.firstName || address.lastName) &&\n            <p className=\"fn address-entry\">\n                <span className=\"first-name\">{ `${address.firstName} ` }</span>\n                <span className=\"family-name\">{ address.lastName }</span>\n            </p>\n        }\n\n        {\n            (address.phone || address.company) &&\n            <p className=\"address-entry\">\n                <span className=\"company-name\">{ `${address.company} ` }</span>\n                <span className=\"tel\">{ address.phone }</span>\n            </p>\n        }\n\n        <div className=\"adr\">\n            <p className=\"street-address address-entry\">\n                <span className=\"address-line-1\">{ `${address.address1} ` }</span>\n                {\n                    address.address2 &&\n                    <span className=\"address-line-2\">\n                        { ` / ${address.address2 }` }\n                    </span>\n                }\n            </p>\n\n            <p className=\"address-entry\">\n                {\n                    address.city &&\n                    <span className=\"locality\">{ `${address.city}, ` }</span>\n                }\n                {\n                    address.localizedProvince &&\n                    <span className=\"region\">{ `${address.localizedProvince}, ` }</span>\n                }\n                {\n                    address.postalCode &&\n                    <span className=\"postal-code\">{ `${address.postalCode} / ` }</span>\n                }\n                {\n                    address.localizedCountry &&\n                    <span className=\"country-name\">{ `${address.localizedCountry} ` }</span>\n                }\n            </p>\n        </div>\n    </div>;\n};\n\nexport function mapToStaticAddressProps(\n    context: CheckoutContextProps,\n    { address, type }: StaticAddressProps\n): WithCheckoutStaticAddressProps | null {\n    const {\n        checkoutState: {\n            data: {\n                getBillingCountries,\n                getBillingAddressFields,\n                getShippingAddressFields,\n            },\n        },\n    } = context;\n\n    return {\n        countries: getBillingCountries(),\n        fields: type === AddressType.Billing ?\n            getBillingAddressFields(address.countryCode) :\n            type === AddressType.Shipping ?\n            getShippingAddressFields(address.countryCode) :\n            undefined,\n    };\n}\n\nexport default withCheckout(mapToStaticAddressProps)(memo(StaticAddress));\n","import React, { ReactNode } from 'react';\n\nimport ErrorLogger from './ErrorLogger';\n\nexport interface ErrorBoundaryProps {\n    children: ReactNode;\n    fallback?: ReactNode;\n    logger?: ErrorLogger;\n    filter?(error: Error): boolean;\n}\n\ninterface ErrorBoundaryState {\n    error?: Error;\n}\n\nclass ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n    static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n        return { error };\n    }\n\n    state: ErrorBoundaryState = {};\n\n    componentDidCatch(error: Error): void {\n        const {\n            filter = () => true,\n            logger,\n        } = this.props;\n\n        if (!filter(error)) {\n            throw error;\n        }\n\n        if (logger) {\n            logger.log(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            children,\n            fallback,\n            filter = () => true,\n        } = this.props;\n\n        const { error } = this.state;\n\n        if (error && filter(error)) {\n            return fallback ? fallback : null;\n        }\n\n        return children;\n    }\n}\n\nexport default ErrorBoundary;\n","import { SyntheticEvent } from 'react';\n\nexport default function preventDefault<TFunc extends (event: TEvent, ...args: any[]) => any, TEvent extends SyntheticEvent>(\n    fn?: TFunc\n): (event: TEvent) => void {\n    return event => {\n        event.preventDefault();\n\n        if (fn) {\n            fn(event);\n        }\n    };\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconClose: FunctionComponent = () => (\n    <svg\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconClose);\n","import { CurrencyService } from '@bigcommerce/checkout-sdk';\n\nimport { createInjectHoc, InjectHoc } from '../common/hoc';\n\nimport LocaleContext from './LocaleContext';\n\nexport interface WithCurrencyProps {\n    currency: CurrencyService;\n}\n\nconst withCurrency: InjectHoc<WithCurrencyProps> = createInjectHoc(LocaleContext, {\n    displayNamePrefix: 'WithCurrency',\n    pickProps: (value, key) => key === 'currency' && !!value,\n});\n\nexport default withCurrency;\n","// NOTE: For now, need to coerce the type as mutable array / object. Otherwise,\n// we'll need to change the props of all components as readonly.\nexport const EMPTY_ARRAY = Object.freeze([]) as never[];\nexport const EMPTY_OBJECT = Object.freeze({}) as {};\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { every } from 'lodash';\n\nexport default function hasSelectedShippingOptions(consignments: Consignment[]): boolean {\n    if (!consignments.length) {\n        return false;\n    }\n\n    return every(consignments,\n        consignment => consignment.selectedShippingOption && consignment.selectedShippingOption.id\n    );\n}\n","enum CustomerViewType {\n    Guest = 'guest',\n    Login = 'login',\n    SuggestedLogin = 'suggested_login',\n    EnforcedLogin = 'enforced_login',\n    CancellableEnforcedLogin = 'cancellable_enforced_login',\n}\n\nexport default CustomerViewType;\n","import classNames from 'classnames';\nimport { noop } from 'lodash';\nimport React, { useCallback, FunctionComponent, KeyboardEvent, MouseEvent, ReactNode } from 'react';\nimport ReactModal from 'react-modal';\nimport { Omit } from 'utility-types';\n\nimport { preventDefault } from '../../common/dom';\nimport { IconClose } from '../icon';\n\nexport type ModalProps = Omit<\n    ReactModal.Props,\n    'bodyOpenClassName' | 'className' | 'closeTimeoutMS' | 'overlayClassName'\n> & {\n    children: ReactNode;\n    closeButtonLabel?: string | ReactNode;\n    footer?: ReactNode;\n    header?: ReactNode;\n    additionalHeaderClassName?: string;\n    additionalBodyClassName?: string;\n    additionalModalClassName?: string;\n    shouldShowCloseButton?: boolean;\n};\n\nconst Modal: FunctionComponent<ModalProps> = ({\n    children,\n    closeButtonLabel = 'Close',\n    footer,\n    header,\n    additionalHeaderClassName,\n    additionalBodyClassName,\n    additionalModalClassName,\n    onRequestClose = noop,\n    shouldShowCloseButton = false,\n    ...rest\n}) => {\n    const handleClose = useCallback((event: MouseEvent | KeyboardEvent) => {\n        onRequestClose(event);\n    }, [onRequestClose]);\n\n    return <ReactModal\n        { ...rest }\n        ariaHideApp={ process.env.NODE_ENV !== 'test' }\n        bodyOpenClassName=\"has-activeModal\"\n        className={ {\n            base: classNames(\n                'modal optimizedCheckout-contentPrimary',\n                additionalModalClassName\n            ),\n            afterOpen: 'modal--afterOpen',\n            beforeClose: 'modal--beforeClose',\n        } }\n        closeTimeoutMS={ 200 }\n        onRequestClose={ onRequestClose }\n        overlayClassName={ {\n            base: 'modalOverlay',\n            afterOpen: 'modalOverlay--afterOpen',\n            beforeClose: 'modalOverlay--beforeClose',\n        } }\n        shouldCloseOnOverlayClick={ false }\n    >\n        <div\n            className={ classNames(\n                'modal-header',\n                additionalHeaderClassName\n            ) }\n        >\n            { header }\n\n            { shouldShowCloseButton && <a\n                className=\"modal-close\"\n                data-test=\"modal-close-button\"\n                href=\"#\"\n                onClick={ preventDefault(handleClose) }\n            >\n                { closeButtonLabel && <span className=\"is-srOnly\">\n                    { closeButtonLabel }\n                </span> }\n\n                <IconClose />\n            </a> }\n        </div>\n\n        <div\n            className={ classNames(\n                'modal-body',\n                additionalBodyClassName\n            ) }\n            data-test=\"modal-body\"\n        >\n            { children }\n        </div>\n\n        { footer && <div\n            className=\"modal-footer\"\n            data-test=\"modal-footer\"\n        >\n            { footer }\n        </div> }\n    </ReactModal>;\n};\n\nexport default Modal;\n","import { Address, CheckoutPayment, FormField } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent } from 'react';\n\nimport { AddressType, StaticAddress } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TranslatedString } from '../locale';\n\nexport interface StaticBillingAddressProps {\n    address: Address;\n}\n\ninterface WithCheckoutStaticBillingAddressProps {\n    fields: FormField[];\n    payments?: CheckoutPayment[];\n}\n\nconst StaticBillingAddress: FunctionComponent<\n    StaticBillingAddressProps &\n    WithCheckoutStaticBillingAddressProps\n> = ({\n    address,\n    payments = EMPTY_ARRAY,\n}) => {\n    if (payments.find(payment => payment.providerId === 'amazon')) {\n        return (\n            <p><TranslatedString id=\"billing.billing_address_amazon\" /></p>\n        );\n    }\n\n    if (payments.find(payment => payment.providerId === 'amazonpay' && address.firstName === '')) {\n        return (\n            <p><TranslatedString id=\"billing.billing_address_amazonpay\" /></p>\n        );\n    }\n\n    return (\n        <StaticAddress\n            address={ address }\n            type={ AddressType.Billing }\n        />\n    );\n};\n\nexport function mapToStaticBillingAddressProps(\n    { checkoutState }: CheckoutContextProps,\n    { address }: StaticBillingAddressProps\n): WithCheckoutStaticBillingAddressProps | null {\n    const {\n        data: {\n            getBillingAddressFields,\n            getCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n\n    return {\n        fields: getBillingAddressFields(address.countryCode),\n        payments: checkout && checkout.payments,\n    };\n}\n\nexport default withCheckout(mapToStaticBillingAddressProps)(memo(StaticBillingAddress));\n","import React, { memo } from 'react';\n\nimport { preventDefault } from '../../common/dom';\nimport { TranslatedString } from '../../locale';\nimport { Toggle } from '../../ui/toggle';\n\ninterface ShippingOptionAdditionalDescriptionProps {\n    description: string;\n}\n\nconst ShippingOptionAdditionalDescription: React.FunctionComponent<ShippingOptionAdditionalDescriptionProps> = ({\ndescription,\n}) => {\n    const CHRACTER_LIMIT = 45;\n\n    return (\n        <div className=\"shippingOption-additionalDescription--container\">\n            <Toggle openByDefault={ description.length < CHRACTER_LIMIT }>\n                { ({ isOpen, toggle }) => (\n                    <>\n                        <span className={ `shippingOption-additionalDescription ${ isOpen ?\n                            'shippingOption-additionalDescription--expanded' : 'shippingOption-additionalDescription--collapsed' }` }\n                        >\n                            { description }\n                        </span>\n                        { !isOpen &&\n                            <a className=\"shippingOption-readMore\" onClick={ preventDefault(toggle) }>\n                            <TranslatedString id=\"common.show_more\" />\n                        </a> }\n                    </>\n                ) }\n            </Toggle>\n        </div>\n    );\n};\n\nexport default memo(ShippingOptionAdditionalDescription);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React from 'react';\n\nimport { ShopperCurrency } from '../../currency';\n\nimport ShippingOptionAdditionalDescription from './ShippingOptionAdditionalDescription';\nimport './StaticShippingOption.scss';\n\ninterface StaticShippingOptionProps {\n    displayAdditionalInformation?: boolean;\n    method: ShippingOption;\n}\n\nconst StaticShippingOption: React.FunctionComponent<StaticShippingOptionProps> = ({\ndisplayAdditionalInformation = true,\nmethod,\n}) => {\n    return (\n        <>\n            <div className=\"shippingOption shippingOption--alt\">\n                { method.imageUrl &&\n                    <span className=\"shippingOption-figure\">\n                        <img\n                            alt={ method.description }\n                            className=\"shippingOption-img\"\n                            src={ method.imageUrl }\n                        />\n                    </span> }\n                <span className=\"shippingOption-desc\">\n                    { method.description }\n                    { method.transitTime &&\n                        <span className=\"shippingOption-transitTime\">\n                            { method.transitTime }\n                        </span> }\n                    { method.additionalDescription && displayAdditionalInformation &&\n                        <ShippingOptionAdditionalDescription description={ method.additionalDescription } /> }\n                </span>\n                <span className=\"shippingOption-price\">\n                    <ShopperCurrency amount={ method.cost } />\n                </span>\n            </div>\n        </>\n    );\n};\n\nexport default StaticShippingOption;\n","import CustomError from './CustomError';\n\n// todo: remove this method in favour of creating proper subclasses for each error type.\n// it's only provided for compatibility with errors defined in `app.errors.ts` while we transition\n// to proper error subclasses.\nexport default function createCustomErrorType({\n    name,\n    defaultError = '',\n    defaultTitle = '',\n    shouldReport = false,\n}: {\n    name: string;\n    defaultError?: string;\n    defaultTitle?: string;\n    shouldReport?: boolean;\n}) {\n    class CustomErrorType extends CustomError {\n        constructor(data = {}, errorMessage = '', errorTitle = '') {\n            super({\n                data,\n                message: errorMessage,\n                title: errorTitle,\n            });\n\n            // todo: this should use new.taget.prototype in the parent class once we can make it work\n            setPrototypeOf(this, CustomErrorType.prototype);\n\n            this.setDefaultValues({\n                name,\n                defaultError,\n                defaultTitle,\n            });\n        }\n    }\n\n    CustomErrorType.shouldReport = shouldReport;\n\n    return CustomErrorType;\n}\n\nexport function setPrototypeOf(object: any, prototype: any) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { createCurrencyService, CheckoutService, StoreConfig } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { Component, ReactNode } from 'react';\n\nimport getLanguageService from './getLanguageService';\nimport LocaleContext from './LocaleContext';\n\nexport interface LocaleProviderProps {\n    checkoutService: CheckoutService;\n}\n\nexport interface LocaleProviderState {\n    config?: StoreConfig;\n}\n\nclass LocaleProvider extends Component<LocaleProviderProps> {\n    state: Readonly<LocaleProviderState> = {};\n\n    private languageService = getLanguageService();\n    private unsubscribe?: () => void;\n\n    private getContextValue = memoizeOne((config?: StoreConfig) => {\n\n        return {\n            currency: config ? createCurrencyService(config) : undefined,\n            date: config ? {\n                inputFormat: config.inputDateFormat,\n            } : undefined,\n            language: this.languageService,\n        };\n    });\n\n    componentDidMount(): void {\n        const { checkoutService } = this.props;\n\n        this.unsubscribe = checkoutService.subscribe(\n            ({ data }) => {\n                this.setState({ config: data.getConfig() });\n            },\n            ({ data }) => data.getConfig()\n        );\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const { children } = this.props;\n        const { config } = this.state;\n\n        return (\n            <LocaleContext.Provider value={ this.getContextValue(config) }>\n                { children }\n            </LocaleContext.Provider>\n        );\n    }\n}\n\nexport default LocaleProvider;\n","const DEFAULT_OPTIONS = {\n    count: 5,\n    interval: 1000,\n};\n\nexport interface RetryOptions {\n    count?: number;\n    interval?: number;\n}\n\nexport default async function retry<T>(\n    fn: () => Promise<T>,\n    options?: RetryOptions\n): Promise<T> {\n    const { count, interval } = { ...DEFAULT_OPTIONS, ...options };\n\n    try {\n        return await fn();\n    } catch (error) {\n        if (count === 1) {\n            throw error;\n        }\n\n        await new Promise(resolve => setTimeout(resolve, interval));\n\n        return retry(fn, { interval, count: count - 1 });\n    }\n}\n","import classNames from 'classnames';\nimport React, { FunctionComponent } from 'react';\n\ninterface ModalHeaderProps {\n    children: React.ReactNode;\n    additionalClassName?: string;\n}\n\nconst ModalHeader: FunctionComponent<ModalHeaderProps> = ({\n    children,\n    additionalClassName,\n}) => (\n    <h2\n        className={ classNames(\n            'modal-header-title optimizedCheckout-headingSecondary',\n            additionalClassName\n        ) }\n        data-test=\"modal-heading\"\n    >\n        { children }\n    </h2>\n);\n\nexport default ModalHeader;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconError: FunctionComponent = () => (\n    <svg\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconError);\n","import classNames from 'classnames';\nimport React, { ButtonHTMLAttributes, FunctionComponent } from 'react';\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    isFullWidth?: boolean;\n    isLoading?: boolean;\n    size?: ButtonSize;\n    testId?: string;\n    variant?: ButtonVariant;\n}\n\nexport enum ButtonVariant {\n    Primary = 'primary',\n    Secondary = 'secondary',\n    Action = 'action',\n}\n\nexport enum ButtonSize {\n    Small = 'small',\n    Tiny = 'tiny',\n    Large = 'large',\n}\n\nfunction getClassName(props: Pick<ButtonProps, 'className' | 'isFullWidth' | 'isLoading' | 'size' | 'variant'>) {\n    const {\n        className,\n        isFullWidth,\n        isLoading,\n        size,\n        variant,\n    } = props;\n\n    return classNames(\n        'button',\n        className,\n        { 'button--primary': variant === ButtonVariant.Primary },\n        { 'button--tertiary': variant === ButtonVariant.Secondary },\n        { 'button--action': variant === ButtonVariant.Action },\n        { 'button--small': size === ButtonSize.Small },\n        { 'button--tiny': size === ButtonSize.Tiny },\n        { 'button--large': size === ButtonSize.Large },\n        { 'button--slab': isFullWidth },\n        { 'optimizedCheckout-buttonPrimary': variant === ButtonVariant.Primary || variant === ButtonVariant.Action },\n        { 'optimizedCheckout-buttonSecondary': variant === ButtonVariant.Secondary },\n        { 'is-loading': isLoading }\n    );\n}\n\nconst Button: FunctionComponent<ButtonProps> = ({\n    children,\n    className,\n    disabled,\n    isFullWidth,\n    isLoading,\n    size,\n    testId,\n    type,\n    variant,\n    ...rest\n}) => (\n    <button\n        { ...rest }\n        className={ getClassName({ className, isFullWidth, isLoading, size, variant }) }\n        data-test={ testId }\n        disabled={ disabled || isLoading }\n        type={ type ? type : 'button' }\n    >\n        { children }\n    </button>\n);\n\nexport default Button;\n","import React, { Fragment, FunctionComponent } from 'react';\n\nimport LoadingSpinner from './LoadingSpinner';\n\nexport interface LoadingOverlayProps {\n    isLoading: boolean;\n    hideContentWhenLoading?: boolean;\n    unmountContentWhenLoading?: boolean;\n}\n\nconst LoadingOverlay: FunctionComponent<LoadingOverlayProps> = ({\n    children,\n    hideContentWhenLoading,\n    unmountContentWhenLoading,\n    isLoading,\n}) => {\n    if (hideContentWhenLoading || unmountContentWhenLoading) {\n        return (\n            <Fragment>\n                <LoadingSpinner isLoading={ isLoading } />\n                { unmountContentWhenLoading && isLoading ? null :\n                    <div\n                        style={ {\n                            display: hideContentWhenLoading && isLoading ?\n                                'none' :\n                                undefined,\n                        } }\n                    >\n                        { children }\n                    </div> }\n            </Fragment>\n        );\n    }\n\n    return (\n        <div className=\"loadingOverlay-container\">\n            { children }\n            { isLoading && <div className=\"loadingOverlay optimizedCheckout-overlay\" /> }\n        </div>\n    );\n};\n\nexport default LoadingOverlay;\n","import DOMPurify from 'dompurify';\nimport React, { FunctionComponent } from 'react';\n\nimport withLanguage, { WithLanguageProps } from './withLanguage';\n\nexport interface TranslatedHtmlProps {\n    id: string;\n    data?: any;\n}\n\nconst TranslatedHtml: FunctionComponent<TranslatedHtmlProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n}) => (\n    <span dangerouslySetInnerHTML={ {\n        __html: DOMPurify.sanitize(language.translate(id, data), { ADD_ATTR: ['target'] }),\n    } }\n    />\n);\n\nexport default withLanguage(TranslatedHtml);\n","import React, { FunctionComponent, ReactNode, Suspense } from 'react';\n\nimport { ErrorBoundary } from '../../common/error';\nimport { TranslatedString } from '../../locale';\n\nimport './LazyContainer.scss';\nimport LoadingSpinner from './LoadingSpinner';\n\nexport interface LazyContainerProps {\n    children: ReactNode;\n}\n\nconst filterError = (error: Error) => error.name === 'ChunkLoadError';\n\nconst LazyContainer: FunctionComponent<LazyContainerProps> = ({ children }) => (\n    <ErrorBoundary\n        fallback={\n            <div className=\"lazyContainer-error\">\n                <TranslatedString id=\"common.unstable_network_error\" />\n            </div>\n        }\n        filter={ filterError }\n    >\n        <Suspense fallback={ <LoadingSpinner isLoading /> }>\n            { children }\n        </Suspense>\n    </ErrorBoundary>\n);\n\nexport default LazyContainer;\n","import { Component, ReactNode } from 'react';\n\nexport interface ToggleProps {\n    openByDefault?: boolean;\n    children(props: any): ReactNode;\n}\n\nexport interface ToggleState {\n    isOpen: boolean;\n}\n\nexport default class Toggle extends Component<ToggleProps, ToggleState> {\n    constructor(props: ToggleProps) {\n        super(props);\n\n        this.state = { isOpen: !!props.openByDefault };\n    }\n\n    render(): ReactNode {\n        const { children } = this.props;\n        const { isOpen } = this.state;\n\n        return children({\n            isOpen,\n            toggle: this.toggle,\n        });\n    }\n\n    private toggle: (event: Event) => void = event => {\n        const { isOpen } = this.state;\n\n        event.preventDefault();\n\n        this.setState({ isOpen: !isOpen });\n    };\n}\n","import React, { Fragment, FunctionComponent } from 'react';\n\nimport { withCurrency, WithCurrencyProps } from '../locale';\n\nexport interface ShopperCurrencyProps {\n    amount: number;\n}\n\nconst ShopperCurrency: FunctionComponent<ShopperCurrencyProps & WithCurrencyProps> = ({\n    amount,\n    currency,\n}) => (\n    <Fragment>\n        { currency.toCustomerCurrency(amount) }\n    </Fragment>\n);\n\nexport default withCurrency(ShopperCurrency);\n","import { CheckoutPayment, OrderPayment } from '@bigcommerce/checkout-sdk';\n\nexport default function isStoreCreditPayment(\n    payment: OrderPayment | CheckoutPayment\n): boolean {\n    return payment.providerId === 'storecredit';\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { Form as FormikForm, FormikFormProps } from 'formik';\nimport { values } from 'lodash';\nimport React, { createRef, memo, useCallback, useRef, FunctionComponent } from 'react';\n\nimport FormProvider, { FormContextType } from './FormProvider';\n\nexport interface FormProps extends FormikFormProps {\n    testId?: string;\n}\n\nconst Form: FunctionComponent<FormProps> = ({\n    className,\n    testId,\n    ...rest\n}) => {\n    const ref = useRef({ containerRef: createRef<HTMLDivElement>() });\n\n    const focusOnError = () => {\n        const { current } = ref.current.containerRef;\n\n        if (!current) {\n            return;\n        }\n\n        const errorInputSelectors = [\n            '.form-field--error input',\n            '.form-field--error textarea',\n            '.form-field--error select',\n        ];\n\n        const erroredFormField = current.querySelector<HTMLElement>(errorInputSelectors.join(', '));\n\n        if (erroredFormField) {\n            erroredFormField.focus();\n        }\n    };\n\n    const handleSubmitCapture = useCallback(memoizeOne((setSubmitted: FormContextType['setSubmitted']) => {\n        return () => {\n            setSubmitted(true);\n\n            // use timeout to allow Formik validation to happen\n            setTimeout(() => focusOnError());\n        };\n    }), [focusOnError]);\n\n    const renderContent = useCallback(memoizeOne(({ setSubmitted }: FormContextType) => {\n        return (\n            <div ref={ ref.current.containerRef }>\n                <FormikForm\n                    { ...rest }\n                    className={ className }\n                    data-test={ testId }\n                    noValidate\n                    onSubmitCapture={ handleSubmitCapture(setSubmitted) }\n                />\n            </div>\n        );\n    }), [\n        className,\n        handleSubmitCapture,\n        testId,\n        ...values(rest),\n    ]);\n\n    return (\n        <FormProvider>\n            { renderContent }\n        </FormProvider>\n    );\n};\n\nexport default memo(Form);\n","import classNames from 'classnames';\nimport React, { forwardRef, FieldsetHTMLAttributes, ReactNode, Ref } from 'react';\n\nexport interface FieldsetProps extends FieldsetHTMLAttributes<HTMLFieldSetElement> {\n    additionalClassName?: string;\n    testId?: string;\n    legend?: ReactNode;\n}\n\nconst Fieldset = forwardRef((\n    {\n        additionalClassName,\n        children,\n        className,\n        legend,\n        testId,\n        ...rest\n    }: FieldsetProps,\n    ref: Ref<HTMLFieldSetElement>\n) => (\n    <fieldset\n        { ...rest }\n        className={ className ? className : classNames(\n            'form-fieldset',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    >\n        { legend }\n\n        <div className=\"form-body\">\n            { children }\n        </div>\n    </fieldset>\n));\n\nexport default Fieldset;\n","import classNames from 'classnames';\nimport React, { FunctionComponent } from 'react';\n\nexport interface LegendProps extends React.HTMLAttributes<HTMLLegendElement> {\n    hidden?: boolean;\n    testId?: string;\n}\n\nconst Legend: FunctionComponent<LegendProps> = ({\n    children,\n    className,\n    hidden,\n    testId,\n    ...rest\n}) => (\n    <legend\n        { ...rest }\n        className={ classNames(\n            className || 'form-legend',\n            { 'is-srOnly': hidden },\n            { 'optimizedCheckout-headingSecondary': !hidden }\n        ) }\n        data-test={ testId }\n    >\n        { children }\n    </legend>\n);\n\nexport default Legend;\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\n\nexport interface TextInputProps extends InputProps {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    type?: 'text' | 'password' | 'tel' | 'email' | 'number';\n}\n\nconst TextInput = forwardRef((\n    {\n        additionalClassName,\n        appearFocused,\n        type = 'text',\n        ...rest\n    }: TextInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <Input\n        { ...rest }\n        className={ classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName\n        ) }\n        ref={ ref }\n        type={ type }\n    />\n));\n\nexport default TextInput;\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport FormFieldError from './FormFieldError';\nimport Label from './Label';\n\nexport interface FormFieldProps {\n    additionalClassName?: string;\n    name: string;\n    label?: ReactNode | ((fieldName: string) => ReactNode);\n    labelContent?: ReactNode;\n    footer?: ReactNode;\n    input(field: FieldProps<string>): ReactNode;\n    onChange?(value: string): void;\n}\n\nconst FormField: FunctionComponent<FormFieldProps> = ({\n    additionalClassName,\n    labelContent,\n    label,\n    onChange,\n    footer,\n    input,\n    name,\n}) => {\n    const renderField = useCallback(props => (\n        <Fragment>\n            { label && (typeof label === 'function' ? label(name) : label) }\n            { labelContent && !label && <Label htmlFor={ name }>\n                { labelContent }\n            </Label> }\n\n            { input(props) }\n\n            <FormFieldError\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n\n            { footer }\n        </Fragment>\n    ), [\n        label,\n        labelContent,\n        input,\n        name,\n        footer,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(FormField);\n","import { EmbeddedCheckoutStyles } from '@bigcommerce/checkout-sdk';\n\nimport { appendStylesheet } from '../common/dom';\n\nimport EmbeddedCheckoutStyleParser from './EmbeddedCheckoutStyleParser';\n\nexport default class EmbeddedCheckoutStylesheet {\n    private _parser: EmbeddedCheckoutStyleParser;\n\n    constructor(\n        embeddedCheckoutStyleParser: EmbeddedCheckoutStyleParser\n    ) {\n        this._parser = embeddedCheckoutStyleParser;\n    }\n\n    append(styles: EmbeddedCheckoutStyles): HTMLStyleElement {\n        return appendStylesheet(this._parser.parse(styles));\n    }\n}\n","export default function appendStylesheet(rules: string[]): HTMLStyleElement {\n    const style = document.createElement('style');\n\n    document.head.appendChild(style);\n\n    if (style.sheet instanceof CSSStyleSheet) {\n        const { sheet } = style;\n\n        rules.forEach((rule, index) => {\n            sheet.insertRule(rule, index);\n        });\n    }\n\n    return style;\n}\n","import { assign, kebabCase, map, pickBy } from 'lodash';\n\nexport default function toCSSRule(selector: string, ...styles: Array<{ [key: string]: any } | undefined>): string {\n    const mergedStyles = assign({}, ...styles);\n    const props = map(pickBy(mergedStyles, value => typeof value === 'string'), (value, key) =>\n        `${kebabCase(key)}: ${value};`\n    ).join(' ');\n\n    return `${selector} {${props}}`;\n}\n","import { EmbeddedCheckoutStyles } from '@bigcommerce/checkout-sdk';\n\nimport { toCSSRule } from '../common/dom';\n\nexport default class EmbeddedCheckoutStyleParser {\n    parse(styles: EmbeddedCheckoutStyles): string[] {\n        const rules: string[] = [];\n\n        if (styles.body) {\n            rules.push(toCSSRule('body', styles.body));\n            rules.push(toCSSRule('.optimizedCheckout-overlay', styles.body));\n        }\n\n        if (styles.text) {\n            rules.push(toCSSRule('.optimizedCheckout-contentPrimary', styles.text));\n        }\n\n        if (styles.secondaryText) {\n            rules.push(toCSSRule('.optimizedCheckout-contentSecondary', styles.secondaryText));\n        }\n\n        if (styles.heading) {\n            rules.push(toCSSRule('.optimizedCheckout-headingPrimary', styles.heading));\n        }\n\n        if (styles.secondaryHeading) {\n            rules.push(toCSSRule('.optimizedCheckout-headingSecondary', styles.secondaryHeading));\n        }\n\n        if (styles.link) {\n            rules.push(toCSSRule('a', styles.link));\n            rules.push(toCSSRule('a:focus', styles.link, styles.link.focus));\n            rules.push(toCSSRule('a:hover', styles.link, styles.link.hover));\n        }\n\n        if (styles.label) {\n            rules.push(toCSSRule('.optimizedCheckout-form-label', styles.label));\n            rules.push(toCSSRule(\n                '.form-field--error .optimizedCheckout-form-label',\n                styles.label, styles.label.error));\n            rules.push(toCSSRule('.form-field--error .form-inlineMessage', styles.label, styles.label.error));\n        }\n\n        if (styles.button) {\n            rules.push(toCSSRule('.optimizedCheckout-buttonPrimary', styles.button));\n            rules.push(toCSSRule('.optimizedCheckout-buttonPrimary:active', styles.button, styles.button.active));\n            rules.push(toCSSRule('.optimizedCheckout-buttonPrimary:focus', styles.button, styles.button.focus));\n            rules.push(toCSSRule('.optimizedCheckout-buttonPrimary:hover', styles.button, styles.button.hover));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonPrimary[disabled]',\n                styles.button,\n                styles.button.disabled\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonPrimary[disabled]:active',\n                styles.button,\n                styles.button.disabled\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonPrimary[disabled]:focus',\n                styles.button,\n                styles.button.disabled\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonPrimary[disabled]:hover',\n                styles.button,\n                styles.button.disabled\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonPrimary[disabled].is-active',\n                styles.button,\n                styles.button.disabled\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonPrimary[disabled].is-loading',\n                styles.button,\n                styles.button.disabled\n            ));\n        }\n\n        if (styles.secondaryButton) {\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonSecondary',\n                styles.secondaryButton\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonSecondary:active',\n                styles.secondaryButton,\n                styles.secondaryButton.active\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonSecondary:focus',\n                styles.secondaryButton,\n                styles.secondaryButton.focus\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonSecondary:hover',\n                styles.secondaryButton,\n                styles.secondaryButton.hover\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonSecondary[disabled]',\n                styles.secondaryButton,\n                styles.secondaryButton.disabled\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonSecondary[disabled]:active',\n                styles.secondaryButton,\n                styles.secondaryButton.disabled\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonSecondary[disabled]:focus',\n                styles.secondaryButton,\n                styles.secondaryButton.disabled\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonSecondary[disabled]:hover',\n                styles.secondaryButton,\n                styles.secondaryButton.disabled\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonSecondary[disabled].is-active',\n                styles.secondaryButton,\n                styles.secondaryButton.disabled\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-buttonSecondary[disabled].is-loading',\n                styles.secondaryButton,\n                styles.secondaryButton.disabled\n            ));\n        }\n\n        if (styles.input) {\n            rules.push(toCSSRule('.optimizedCheckout-form-input', styles.input));\n            rules.push(toCSSRule('.optimizedCheckout-form-input:focus', styles.input, styles.input.focus));\n            rules.push(toCSSRule('.optimizedCheckout-form-input:hover', styles.input, styles.input.hover));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-form-input::placeholder',\n                styles.input,\n                styles.input.placeholder\n            ));\n            rules.push(toCSSRule(\n                '.form-field--error .optimizedCheckout-form-input',\n                styles.input,\n                styles.input.error\n            ));\n            rules.push(toCSSRule(\n                '.form-field--error .optimizedCheckout-form-input:focus',\n                styles.input,\n                styles.input.error\n            ));\n            rules.push(toCSSRule(\n                '.form-field--error .optimizedCheckout-form-input:hover',\n                styles.input,\n                styles.input.error\n            ));\n        }\n\n        if (styles.select) {\n            rules.push(toCSSRule('.optimizedCheckout-form-select', styles.select));\n            rules.push(toCSSRule('.optimizedCheckout-form-select:focus', styles.select, styles.select.focus));\n            rules.push(toCSSRule('.optimizedCheckout-form-select:hover', styles.select, styles.select.hover));\n            rules.push(toCSSRule(\n                '.form-field--error .optimizedCheckout-form-select',\n                styles.select,\n                styles.select.error\n                ));\n            rules.push(toCSSRule(\n                '.form-field--error .optimizedCheckout-form-select:focus',\n                styles.select,\n                styles.select.error\n            ));\n            rules.push(toCSSRule(\n                '.form-field--error .optimizedCheckout-form-select:hover',\n                styles.select,\n                styles.select.error\n            ));\n        }\n\n        if (styles.checkbox) {\n            rules.push(toCSSRule('.optimizedCheckout-form-checkbox', styles.checkbox));\n            rules.push(toCSSRule('.optimizedCheckout-form-checkbox:focus', styles.checkbox, styles.checkbox.focus));\n            rules.push(toCSSRule('.optimizedCheckout-form-checkbox:hover', styles.checkbox, styles.checkbox.hover));\n            rules.push(toCSSRule(\n                '.form-field--error .optimizedCheckout-form-checkbox',\n                styles.checkbox,\n                styles.checkbox.error\n            ));\n            rules.push(toCSSRule(\n                '.form-field--error .optimizedCheckout-form-checkbox:focus',\n                styles.checkbox,\n                styles.checkbox.error\n            ));\n            rules.push(toCSSRule(\n                '.form-field--error .optimizedCheckout-form-checkbox:hover',\n                styles.checkbox,\n                styles.checkbox.error\n            ));\n        }\n\n        if (styles.radio) {\n            rules.push(toCSSRule('.optimizedCheckout-form-radio', styles.radio));\n            rules.push(toCSSRule('.optimizedCheckout-form-radio:focus', styles.radio, styles.radio.focus));\n            rules.push(toCSSRule('.optimizedCheckout-form-radio:hover', styles.radio, styles.radio.hover));\n            rules.push(toCSSRule('.form-field--error .optimizedCheckout-form-radio', styles.radio, styles.radio.error\n            ));\n            rules.push(toCSSRule(\n                '.form-field--error .optimizedCheckout-form-radio:focus',\n                styles.radio,\n                styles.radio.error\n            ));\n            rules.push(toCSSRule(\n                '.form-field--error .optimizedCheckout-form-radio:hover',\n                styles.radio,\n                styles.radio.error\n            ));\n        }\n\n        if (styles.step) {\n            rules.push(toCSSRule('.optimizedCheckout-checkoutStep', styles.step));\n            rules.push(toCSSRule('.optimizedCheckout-step', styles.step.icon));\n        }\n\n        if (styles.checklist) {\n            rules.push(toCSSRule('.optimizedCheckout-form-checklist', styles.checklist));\n            rules.push(toCSSRule('.optimizedCheckout-form-checklist-item', styles.checklist));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-form-checklist-item:hover',\n                styles.checklist,\n                styles.checklist.hover\n            ));\n            rules.push(toCSSRule(\n                '.optimizedCheckout-form-checklist-item--selected',\n                styles.checklist,\n                styles.checklist.checked\n            ));\n        }\n\n        if (styles.discountBanner) {\n            rules.push(toCSSRule('.optimizedCheckout-discountBanner', styles.discountBanner));\n        }\n\n        if (styles.loadingBanner) {\n            rules.push(toCSSRule('.optimizedCheckout-loadingToaster', styles.loadingBanner));\n        }\n\n        if (styles.orderSummary) {\n            rules.push(toCSSRule('.optimizedCheckout-orderSummary', styles.orderSummary));\n            rules.push(toCSSRule('.optimizedCheckout-orderSummary-cartSection', styles.orderSummary));\n        }\n\n        return rules;\n    }\n}\n","import EmbeddedCheckoutStylesheet from './EmbeddedCheckoutStylesheet';\nimport EmbeddedCheckoutStyleParser from './EmbeddedCheckoutStyleParser';\n\nexport default function createEmbeddedCheckoutStylesheet() {\n    const embeddedCheckoutStyleParser = new EmbeddedCheckoutStyleParser();\n\n    return new EmbeddedCheckoutStylesheet(embeddedCheckoutStyleParser);\n}\n","import { BrowserOptions } from '@sentry/browser';\n\nexport default interface ErrorLogger {\n    /**\n     * Logs an error in, tagging it with an error code.\n     *\n     * @param error The error object to be logged\n     * @param tags The tags attached to the log entry\n     * @param level The level of the log\n     */\n    log(\n        error: Error,\n        tags?: ErrorTags,\n        level?: ErrorLevelType\n    ): void;\n}\n\nexport interface ErrorLoggerOptions {\n    errorTypes?: string[];\n    publicPath?: string;\n}\n\nexport interface ErrorLoggerServiceConfig {\n    sentry?: BrowserOptions;\n}\n\nexport interface ErrorTags {\n    /**\n     * A code that identifies uniquely each error type\n     */\n    errorCode: string;\n}\n\nexport enum ErrorLevelType {\n    Info = 'info',\n    Warning = 'warning',\n    Error = 'error',\n}\n","import ErrorLogger, { ErrorLevelType, ErrorTags } from './ErrorLogger';\n\nexport interface ConsoleErrorLoggerOptions {\n    console?: Console;\n    errorTypes?: string[];\n}\n\n// tslint:disable:no-console\nexport default class ConsoleErrorLogger implements ErrorLogger {\n    private console: Console;\n\n    constructor(\n        options?: ConsoleErrorLoggerOptions\n    ) {\n        const {\n            console: customConsole = console,\n        } = options || {};\n\n        this.console = customConsole;\n    }\n\n    log(\n        error: Error,\n        tags?: ErrorTags,\n        level: ErrorLevelType = ErrorLevelType.Error\n    ): void {\n        switch (level) {\n        case ErrorLevelType.Error:\n            return this.console.error(error, tags);\n\n        case ErrorLevelType.Info:\n            return this.console.info(error, tags);\n\n        case ErrorLevelType.Warning:\n            return this.console.warn(error, tags);\n\n        default:\n            return this.console.log(error, tags);\n        }\n    }\n}\n","import ErrorLogger from './ErrorLogger';\n\nexport default class NoopErrorLogger implements ErrorLogger {\n    log() {\n        return;\n    }\n}\n","import { captureException, init, withScope, BrowserOptions, Event, Integrations, Severity, StackFrame } from '@sentry/browser';\nimport { RewriteFrames } from '@sentry/integrations';\nimport { EventHint, Exception } from '@sentry/types';\nimport { every, isEmpty, some } from 'lodash';\n\nimport computeErrorCode from './computeErrorCode';\nimport ConsoleErrorLogger from './ConsoleErrorLogger';\nimport ErrorLogger, { ErrorLevelType, ErrorTags } from './ErrorLogger';\nimport NoopErrorLogger from './NoopErrorLogger';\n\nexport interface SentryErrorLoggerOptions {\n    consoleLogger?: ConsoleErrorLogger;\n    errorTypes?: string[];\n    publicPath?: string;\n}\n\nexport default class SentryErrorLogger implements ErrorLogger {\n    private consoleLogger: ErrorLogger;\n    private publicPath: string;\n\n    constructor(\n        config: BrowserOptions,\n        options?: SentryErrorLoggerOptions\n    ) {\n        const {\n            consoleLogger = new NoopErrorLogger(),\n            publicPath = '',\n        } = options || {};\n\n        this.consoleLogger = consoleLogger;\n        this.publicPath = publicPath;\n\n        init({\n            beforeSend: this.handleBeforeSend,\n            blacklistUrls: [\n                ...(config.blacklistUrls || []),\n                'polyfill~checkout',\n                'sentry~checkout',\n            ],\n            integrations: [\n                new Integrations.GlobalHandlers({\n                    onerror: false,\n                    onunhandledrejection: true,\n                }),\n                new RewriteFrames({\n                    iteratee: this.handleRewriteFrame,\n                }),\n            ],\n            ...config,\n        });\n    }\n\n    log(\n        error: Error,\n        tags?: ErrorTags,\n        level: ErrorLevelType = ErrorLevelType.Error\n    ): void {\n        this.consoleLogger.log(error, tags, level);\n\n        withScope(scope => {\n            const { errorCode = computeErrorCode(error) } = tags || {};\n\n            if (errorCode) {\n                scope.setTags({ errorCode });\n            }\n\n            scope.setLevel(this.mapToSentryLevel(level));\n            scope.setFingerprint(['{{ default }}']);\n\n            captureException(error);\n        });\n    }\n\n    private mapToSentryLevel(level: ErrorLevelType): Severity {\n        switch (level) {\n        case ErrorLevelType.Info:\n            return Severity.Info;\n\n        case ErrorLevelType.Warning:\n            return Severity.Warning;\n\n        case ErrorLevelType.Error:\n        default:\n            return Severity.Error;\n        }\n    }\n\n    private hasUsefulStacktrace(exceptions: Exception[]): boolean {\n        return some(exceptions, exception => {\n            if (!exception.stacktrace) {\n                return false;\n            }\n\n            if (isEmpty(exception.stacktrace.frames)) {\n                return false;\n            }\n\n            if (every(exception.stacktrace.frames, frame => !frame.filename)) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n\n    private handleBeforeSend: (event: Event, hint?: EventHint) => Event | null = (event, hint) => {\n        if (event.exception) {\n            const { originalException = null } = hint || {};\n\n            if (!originalException || typeof originalException === 'string') {\n                return null;\n            }\n\n            if (!event.exception.values || !this.hasUsefulStacktrace(event.exception.values)) {\n                return null;\n            }\n\n            return event;\n        }\n\n        return event;\n    };\n\n    private handleRewriteFrame: (frame: StackFrame) => StackFrame = frame => {\n        if (this.publicPath && frame.filename) {\n            // We want to remove the base path of the filename, otherwise we\n            // will need to specify it when we upload the sourcemaps so that the\n            // filenames can match up.\n            const filename = frame.filename.replace(new RegExp(`^${this.publicPath}\\/?`), '');\n\n            // `frame` needs to be modified in-place (based on the example in\n            // their documentation).\n            if (filename !== frame.filename) {\n                frame.filename = `app:///${filename}`;\n            }\n        }\n\n        return frame;\n    };\n}\n","import ConsoleErrorLogger from './ConsoleErrorLogger';\nimport ErrorLogger, { ErrorLoggerOptions, ErrorLoggerServiceConfig } from './ErrorLogger';\nimport NoopErrorLogger from './NoopErrorLogger';\nimport SentryErrorLogger from './SentryErrorLogger';\n\nexport default function createErrorLogger(\n    serviceConfig?: ErrorLoggerServiceConfig,\n    options?: ErrorLoggerOptions\n): ErrorLogger {\n    if (serviceConfig && serviceConfig.sentry) {\n        return new SentryErrorLogger(\n            serviceConfig.sentry,\n            { ...options, consoleLogger: new ConsoleErrorLogger(options) }\n        );\n    }\n\n    if (process.env.NODE_ENV === 'test') {\n        return new NoopErrorLogger();\n    }\n\n    return new ConsoleErrorLogger(options);\n}\n","import classNames from 'classnames';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport { IconError, IconInfo, IconSuccess } from '../icon';\n\nexport interface AlertProps {\n    additionalClassName?: string;\n    icon?: ReactNode;\n    testId?: string;\n    type?: AlertType;\n}\n\nexport enum AlertType {\n    Error = 'error',\n    Info = 'info',\n    Success = 'success',\n    Warning = 'warning',\n}\n\nfunction renderDefaultIcon(type?: AlertType): ReactNode {\n    switch (type) {\n    case AlertType.Error:\n    case AlertType.Warning:\n        return <IconError />;\n\n    case AlertType.Success:\n        return <IconSuccess />;\n\n    case AlertType.Info:\n    default:\n        return <IconInfo />;\n    }\n}\n\nconst Alert: FunctionComponent<AlertProps> = ({\n    additionalClassName,\n    children,\n    icon,\n    testId,\n    type,\n}) => (\n    <div\n        className={ classNames(\n            'alertBox',\n            additionalClassName,\n            { 'alertBox--info': type === AlertType.Info || !type },\n            { 'alertBox--error': type === AlertType.Error },\n            { 'alertBox--success': type === AlertType.Success },\n            { 'alertBox--warning': type === AlertType.Warning }\n        ) }\n        data-test={ testId }\n    >\n        <div className=\"alertBox-column alertBox-icon\">\n            { icon ? icon : renderDefaultIcon(type) }\n        </div>\n\n        <div className=\"alertBox-column alertBox-message\">\n            { children }\n        </div>\n    </div>\n);\n\nexport default Alert;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconSuccess: FunctionComponent = () => (\n    <svg\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconSuccess);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconInfo: FunctionComponent = () => (\n    <svg\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconInfo);\n","import React, { memo, FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport './ErrorCode.scss';\n\nexport interface ErrorCodeProps {\n    code: string;\n    label?: ReactNode;\n}\n\nconst ErrorCode: FunctionComponent<ErrorCodeProps> = ({ code, label }) => {\n    return (\n        <div className=\"errorCode\">\n            <span className=\"errorCode-label\">\n                { label ?? <TranslatedString id=\"common.error_code\" /> }\n            </span>\n            { ' ' }\n            <span className=\"errorCode-value\">{ code }</span>\n        </div>\n    );\n};\n\nexport default memo(ErrorCode);\n","import { RequestError } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactNode, SyntheticEvent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { Button, ButtonSize } from '../../ui/button';\nimport { IconError, IconSize } from '../../ui/icon';\nimport { Modal, ModalHeader } from '../../ui/modal';\n\nimport computeErrorCode from './computeErrorCode';\nimport isCustomError from './isCustomError';\nimport isRequestError from './isRequestError';\nimport ErrorCode from './ErrorCode';\n\nexport interface ErrorModalProps {\n    error?: Error | RequestError;\n    message?: ReactNode;\n    title?: ReactNode;\n    shouldShowErrorCode?: boolean;\n    onClose?(event: Event, props: ErrorModalOnCloseProps): void;\n}\n\nexport interface ErrorModalOnCloseProps {\n    error: Error;\n}\n\nexport default class ErrorModal extends PureComponent<ErrorModalProps> {\n    render(): ReactNode {\n        const { error } = this.props;\n\n        return (\n            <Modal\n                additionalModalClassName=\"modal--error\"\n                footer={ this.renderFooter() }\n                header={ this.renderHeader() }\n                isOpen={ !!error }\n                onRequestClose={ this.handleOnRequestClose }\n            >\n                { this.renderBody() }\n            </Modal>\n        );\n    }\n\n    private renderHeader(): ReactNode {\n        const {\n            error,\n            title = error && isCustomError(error) && error.title,\n        } = this.props;\n\n        return (\n            <ModalHeader>\n                <IconError additionalClassName=\"icon--error modal-header-icon\" size={ IconSize.Small } />\n                { title || <TranslatedString id=\"common.error_heading\" /> }\n            </ModalHeader>\n        );\n    }\n\n    private renderBody(): ReactNode {\n        const {\n            error,\n            message = error && error.message,\n        } = this.props;\n\n        return (\n            <Fragment>\n                { message && <p>{ message }</p> }\n\n                <div className=\"optimizedCheckout-contentSecondary\">\n                    { this.renderErrorCode() }\n                </div>\n            </Fragment>\n        );\n    }\n\n    private renderFooter(): ReactNode {\n        return (\n            <Button\n                onClick={ this.handleOnRequestClose }\n                size={ ButtonSize.Small }\n            >\n                <TranslatedString id=\"common.ok_action\" />\n            </Button>\n        );\n    }\n\n    private renderErrorCode(): ReactNode {\n        const {\n            error,\n            shouldShowErrorCode = true,\n        } = this.props;\n\n        if (!error || !shouldShowErrorCode) {\n            return;\n        }\n\n        if (isRequestError(error) && error?.headers?.['x-request-id']) {\n            return <ErrorCode\n                code={ error.headers['x-request-id'] }\n                label={ <TranslatedString id=\"common.request_id\" /> }\n            />;\n        }\n\n        const errorCode = computeErrorCode(error);\n\n        if (!errorCode) {\n            return;\n        }\n\n        return <ErrorCode code={ errorCode } />;\n    }\n\n    private handleOnRequestClose: (event: SyntheticEvent) => void = event => {\n        const {\n            error,\n            onClose = noop,\n        } = this.props;\n\n        if (error) {\n            onClose(event.nativeEvent, { error });\n        }\n    };\n}\n","import CustomError from './CustomError';\n\nexport default function isCustomError(error: Error): error is CustomError {\n    const customError = error as CustomError;\n\n    return typeof customError.title !== 'undefined' &&\n        typeof customError.data !== 'undefined' &&\n        typeof customError.type !== 'undefined';\n}\n","import React, { memo, FunctionComponent } from 'react';\nimport Media, { MediaQueryObject, MultiQueryProps } from 'react-media';\n\nimport { MOBILE_MAX_WIDTH } from './breakpoints';\n\nconst queries = {\n    print: 'print',\n    mobile: `screen and (max-width: ${MOBILE_MAX_WIDTH}px)`,\n};\n\nconst ViewPicker: FunctionComponent<Pick<MultiQueryProps<MediaQueryObject>, 'children'>> = ({ children }) => {\n    return (\n        <Media queries={ queries }>\n            { children }\n        </Media>\n    );\n};\n\nexport default memo(ViewPicker);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport ViewPicker from './ViewPicker';\n\nconst MobileView: FunctionComponent<{children(matched: boolean): React.ReactNode}> = ({ children }) => {\n    return (\n        <ViewPicker>\n            { (matches: { mobile: boolean }) => {\n                return children(matches.mobile);\n            } }\n        </ViewPicker>\n    );\n};\n\nexport default memo(MobileView);\n","import { CurrencyService, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { createContext } from 'react';\n\nexport interface LocaleContextType {\n    language: LanguageService;\n    date?: {\n        inputFormat: string;\n    };\n    currency?: CurrencyService;\n}\n\nconst LocaleContext = createContext<LocaleContextType | undefined>(undefined);\n\nexport default LocaleContext;\n","import { isFunction, noop } from 'lodash';\nimport React, { createContext, memo, useMemo, useState, FunctionComponent, ReactNode } from 'react';\n\nexport interface FormContextType {\n    isSubmitted: boolean;\n    setSubmitted(isSubmitted: boolean): void;\n}\n\ntype FormContextFunction = (props: FormContextType) => ReactNode;\n\nexport interface FormProviderProps {\n    initialIsSubmitted?: boolean;\n    children: ReactNode | FormContextFunction;\n}\n\nexport const FormContext = createContext<FormContextType>({\n    isSubmitted: false,\n    setSubmitted: noop,\n});\n\nconst FormProvider: FunctionComponent<FormProviderProps> = ({\n    children,\n    initialIsSubmitted = false,\n}) => {\n    const [ isSubmitted, setSubmitted ] = useState(initialIsSubmitted);\n    const contextValue = useMemo(() => ({ isSubmitted, setSubmitted }), [isSubmitted]);\n\n    return (\n        <FormContext.Provider value={ contextValue }>\n            { isFunction(children) ?\n                children({ isSubmitted, setSubmitted }) :\n                children }\n        </FormContext.Provider>\n    );\n};\n\nexport default memo(FormProvider);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\n\nimport { createInjectHoc, InjectHoc } from '../common/hoc';\n\nimport LocaleContext from './LocaleContext';\n\nexport interface WithLanguageProps {\n    language: LanguageService;\n}\n\nconst withLanguage: InjectHoc<WithLanguageProps> = createInjectHoc(LocaleContext, {\n    displayNamePrefix: 'WithLanguage',\n    pickProps: (value, key) => key === 'language' && !!value,\n});\n\nexport default withLanguage;\n","import HashStatic from 'object-hash';\n\nexport default function computeErrorCode(value: any): string | undefined {\n    try {\n        return HashStatic(value).toUpperCase();\n    } catch (error) {\n        return;\n    }\n}\n","import { CheckoutSelectors, CheckoutService } from '@bigcommerce/checkout-sdk';\nimport { createContext } from 'react';\n\nexport interface CheckoutContextProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n}\n\nconst CheckoutContext = createContext<CheckoutContextProps | undefined>(undefined);\n\nexport default CheckoutContext;\n","import React, { memo, FunctionComponent } from 'react';\n\nexport interface LoadingSpinnerProps {\n    isLoading: boolean;\n}\n\nconst LoadingSpinner: FunctionComponent<LoadingSpinnerProps> = ({\n    isLoading,\n}) => {\n    if (!isLoading) {\n        return null;\n    }\n\n    return (\n        <div\n            className=\"loadingSpinner loadingOverlay-container\"\n            style={ { height: 100 } }\n        >\n            <div className=\"loadingOverlay optimizedCheckout-overlay\" />\n        </div>\n    );\n};\n\nexport default memo(LoadingSpinner);\n","// These values have to match with screensizes.scss\nexport const MOBILE_MAX_WIDTH = 968;\n","enum AddressType {\n    Billing = 'billing',\n    Shipping = 'shipping',\n}\n\nexport default AddressType;\n","import React, { memo, useContext, useMemo, ComponentType, Context, FunctionComponent } from 'react';\nimport { Omit } from 'utility-types';\n\nimport { MatchedProps } from './InjectHoc';\nimport MappableInjectHoc, { MapToProps, MapToPropsFactory } from './MappableInjectHoc';\n\nfunction isMapToPropsFactory<TContextProps, TMappedProps, TOwnProps>(\n    mapToProps: (\n        MapToProps<TContextProps, TMappedProps, TOwnProps> |\n        MapToPropsFactory<TContextProps, TMappedProps, TOwnProps>\n    )\n): mapToProps is MapToPropsFactory<TContextProps, TMappedProps, TOwnProps> {\n    return mapToProps.length === 0;\n}\n\nexport default function createMappableInjectHoc<TContextProps>(\n    ContextComponent: Context<TContextProps>,\n    options?: { displayNamePrefix?: string }\n): MappableInjectHoc<NonNullable<TContextProps>> {\n    return <TMappedProps, TOwnProps>(\n        mapToPropsOrFactory: (\n            MapToProps<NonNullable<TContextProps>, TMappedProps, TOwnProps> |\n            MapToPropsFactory<NonNullable<TContextProps>, TMappedProps, TOwnProps>\n        )\n    ) => {\n        return <TProps extends MatchedProps<TMappedProps, TProps>>(\n            OriginalComponent: ComponentType<TProps>\n        ) => {\n            const InnerDecoratedComponent: FunctionComponent<TProps> = memo(props =>\n                <OriginalComponent { ...props } />\n            );\n\n            const DecoratedComponent: FunctionComponent<Omit<TProps, keyof TMappedProps>> = props => {\n                const context = useContext(ContextComponent);\n\n                const mapToProps = useMemo(() => (\n                    isMapToPropsFactory(mapToPropsOrFactory) ?\n                        mapToPropsOrFactory() :\n                        mapToPropsOrFactory\n                ), []);\n\n                const mappedProps = context ?\n                    mapToProps(context as NonNullable<TContextProps>, props as unknown as TOwnProps) :\n                    context;\n\n                if (!mappedProps) {\n                    return null;\n                }\n\n                const mergedProps = { ...mappedProps, ...props } as unknown as TProps;\n\n                return <InnerDecoratedComponent { ...mergedProps } />;\n            };\n\n            if (options && options.displayNamePrefix && OriginalComponent) {\n                DecoratedComponent.displayName = `${options.displayNamePrefix}(${OriginalComponent.displayName || OriginalComponent.name})`;\n            }\n\n            return DecoratedComponent;\n        };\n    };\n}\n","import { createMappableInjectHoc } from '../common/hoc';\n\nimport CheckoutContext from './CheckoutContext';\n\nconst withCheckout = createMappableInjectHoc(CheckoutContext, { displayNamePrefix: 'WithCheckout' });\n\nexport default withCheckout;\n","import React, { Fragment, FunctionComponent } from 'react';\n\nimport withLanguage, { WithLanguageProps } from './withLanguage';\n\nexport interface TranslatedStringProps {\n    id: string;\n    data?: any;\n}\n\nconst TranslatedString: FunctionComponent<TranslatedStringProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n}) => (\n    <Fragment>\n        { language.translate(id, data) }\n    </Fragment>\n);\n\nexport default withLanguage(TranslatedString);\n","import React, { forwardRef, InputHTMLAttributes, Ref } from 'react';\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n    testId?: string;\n}\n\nconst Input = forwardRef((\n    { testId, ...rest }: InputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <input\n        { ...rest }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default Input;\n","import classNames from 'classnames';\nimport React, { FunctionComponent, LabelHTMLAttributes } from 'react';\n\nexport interface LabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n    testId?: string;\n    hidden?: boolean;\n}\n\nconst Label: FunctionComponent<LabelProps> = ({\n    children,\n    className,\n    hidden,\n    testId,\n    ...rest\n}) => (\n    <label\n        { ...rest }\n        className={ classNames(\n            className || 'form-label',\n            { 'is-srOnly': hidden },\n            'optimizedCheckout-form-label'\n        ) }\n        data-test={ testId }\n    >\n        { children }\n    </label>\n);\n\nexport default Label;\n","import { getIn, Field, FieldConfig, FieldProps } from 'formik';\nimport { isDate, noop } from 'lodash';\nimport React, { createElement, memo, useCallback, useMemo, Component, FunctionComponent } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport FormFieldContainer from './FormFieldContainer';\n\nexport interface BasicFormFieldProps extends FieldConfig {\n    additionalClassName?: string;\n    className?: string;\n    testId?: string;\n    onChange?(value: any): void;\n}\n\nconst BasicFormField: FunctionComponent<BasicFormFieldProps> = ({\n    additionalClassName,\n    className,\n    component,\n    render,\n    testId,\n    onChange,\n    ...rest\n}) => {\n    const renderInnerField = useCallback((props: FieldProps) => (\n        <InnerField\n            { ...props }\n            additionalClassName={ additionalClassName }\n            className={ className }\n            component={ component }\n            onChange={ onChange }\n            render={ render }\n            testId={ testId }\n        />\n    ), [\n        additionalClassName,\n        className,\n        component,\n        render,\n        testId,\n        onChange,\n    ]);\n\n    return <Field\n        { ...rest }\n        render={ renderInnerField }\n    />;\n};\n\ntype InnerFieldProps = Omit<BasicFormFieldProps, keyof FieldConfig> & InnerFieldInputProps;\n\nconst InnerField: FunctionComponent<InnerFieldProps> = memo(({\n    additionalClassName,\n    component,\n    field,\n    form,\n    onChange,\n    render,\n    testId,\n}) => {\n    const input = useMemo(() => <InnerFieldInput\n        component={ component }\n        field={ field }\n        form={ form }\n        onChange={ onChange }\n        render={ render }\n    />, [\n        field,\n        form,\n        onChange,\n        component,\n        render,\n    ]);\n\n    return (\n        <FormFieldContainer\n            additionalClassName={ additionalClassName }\n            hasError={ getIn(form.errors, field.name) }\n            testId={ testId }\n        >\n            { input }\n        </FormFieldContainer>\n    );\n}, (\n    { form: prevForm, field: prevField, ...prevProps },\n    { form: nextForm, field: nextField, ...nextProps }\n) => (\n    shallowEqual(prevProps, nextProps) &&\n    shallowEqual(prevForm, nextForm) &&\n    shallowEqual(prevField, nextField)\n));\n\ntype InnerFieldInputProps = FieldProps & Pick<FieldConfig, 'component' | 'render'> & {\n    onChange?(value: string): void;\n};\n\nclass InnerFieldInput extends Component<InnerFieldInputProps> {\n    componentDidUpdate({ field: prevField }: InnerFieldInputProps) {\n        const { field: { value }, onChange = noop } = this.props;\n        const comparableValue = isDate(value) ? value.getTime() : value;\n        const comparablePrevValue = isDate(prevField.value) ? prevField.value.getTime() : prevField.value;\n\n        if (comparableValue !== comparablePrevValue) {\n            onChange(value);\n        }\n    }\n\n    render() {\n        const {\n            component = 'input',\n            field,\n            render,\n        } = this.props;\n\n        if (render) {\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            return (render as any)(this.props);\n        }\n\n        if (typeof component === 'string') {\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            return createElement(component as any, field);\n        }\n\n        // tslint:disable-next-line:no-unnecessary-type-assertion\n        return createElement(component as any, this.props);\n    }\n}\n\nexport default memo(BasicFormField);\n","import { ErrorMessage } from 'formik';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { FormContext } from './FormProvider';\n\nexport interface FormFieldErrorProps {\n    name: string;\n    testId?: string;\n}\n\nconst FormFieldError: FunctionComponent<FormFieldErrorProps> = ({\n    name,\n    testId,\n}) => {\n    const renderMessage = useCallback((message: string) => (\n        <ul\n            className=\"form-field-errors\"\n            data-test={ testId }\n        >\n            <li className=\"form-field-error\">\n                <label\n                    className=\"form-inlineMessage\"\n                    htmlFor={ name }\n                >\n                    { message }\n                </label>\n            </li>\n        </ul>\n    ), [\n        name,\n        testId,\n    ]);\n\n    return <FormContext.Consumer>\n        { ({ isSubmitted }) => isSubmitted &&\n            <ErrorMessage\n                name={ name }\n                render={ renderMessage }\n            /> }\n    </FormContext.Consumer>;\n};\n\nexport default memo(FormFieldError);\n","import { Consignment, LineItemMap } from '@bigcommerce/checkout-sdk';\nimport { reduce } from 'lodash';\n\nexport default function hasUnassignedLineItems(consignments: Consignment[], lineItems: LineItemMap): boolean {\n    const totalAssigned = reduce(consignments,\n        (total, consignment) => total + consignment.lineItemIds.length,\n        0\n    );\n\n    return totalAssigned < lineItems.physicalItems.filter(item => !item.addedByPromotion).length;\n}\n","import { Address, FormField } from '@bigcommerce/checkout-sdk';\n\nimport getAddressValidationSchema from './getAddressValidationSchema';\nimport mapAddressToFormValues from './mapAddressToFormValues';\n\nexport default function isValidAddress(address: Address, formFields: FormField[]): boolean {\n    const addressSchema = getAddressValidationSchema({ formFields });\n\n    return addressSchema.isValidSync(mapAddressToFormValues(formFields, address));\n}\n","import { LineItem } from '@bigcommerce/checkout-sdk';\nimport { reduce } from 'lodash';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n","import { Cart, Consignment } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\n\nimport findLineItems from './findLineItems';\nimport getLineItemsCount from './getLineItemsCount';\n\nexport interface StaticConsignmentItemListProps {\n    consignment: Consignment;\n    cart: Cart;\n}\n\nconst StaticConsignmentItemList: FunctionComponent<StaticConsignmentItemListProps> = ({\n    cart,\n    consignment,\n}) => {\n    const lineItems = findLineItems(cart, consignment);\n\n    return (\n        <div className=\"staticConsignment-items\">\n            <strong>\n                <TranslatedString\n                    data={ { count: getLineItemsCount(lineItems) } }\n                    id=\"cart.item_count_text\"\n                />\n            </strong>\n\n            <ul>\n                { lineItems.map(item =>\n                    <li key={ item.id }>\n                        { `${item.quantity} x ${item.name}` }\n                    </li>\n                ) }\n            </ul>\n        </div>\n    );\n};\n\nexport default memo(StaticConsignmentItemList);\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { compact, find, map } from 'lodash';\n\nexport default function findLineItems(\n    cart: Cart,\n    consignment: Consignment\n): PhysicalItem[] {\n    return compact(\n        map(\n            consignment.lineItemIds,\n            itemId => find(cart.lineItems.physicalItems , { id: itemId })\n        )\n    );\n}\n","import { CustomerInitializeOptions, CustomerRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { PureComponent } from 'react';\n\nexport interface CheckoutButtonProps {\n    containerId: string;\n    methodId: string;\n    deinitialize(options: CustomerRequestOptions): void;\n    initialize(options: CustomerInitializeOptions): void;\n    onError?(error: Error): void;\n}\n\nexport default class CheckoutButton extends PureComponent<CheckoutButtonProps> {\n    componentDidMount() {\n        const {\n            containerId,\n            initialize,\n            methodId,\n            onError,\n        } = this.props;\n\n        initialize({\n            methodId,\n            [methodId]: {\n                container: containerId,\n                onError,\n            },\n        });\n    }\n\n    componentWillUnmount() {\n        const {\n            deinitialize,\n            methodId,\n        } = this.props;\n\n        deinitialize({ methodId });\n    }\n\n    render() {\n        const { containerId } = this.props;\n\n        return (\n            <div id={ containerId } />\n        );\n    }\n}\n","import { CustomerInitializeOptions, CustomerRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { memo, Fragment, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\n\nimport CheckoutButton from './CheckoutButton';\n\n// TODO: The API should tell UI which payment method offers its own checkout button\nexport const SUPPORTED_METHODS: string[] = [\n    'amazon',\n    'amazonpay',\n    'braintreevisacheckout',\n    'chasepay',\n    'masterpass',\n    'googlepayadyenv2',\n    'googlepayauthorizenet',\n    'googlepaybraintree',\n    'googlepaycheckoutcom',\n    'googlepaystripe',\n];\n\nexport interface CheckoutButtonListProps {\n    methodIds: string[];\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    deinitialize(options: CustomerRequestOptions): void;\n    initialize(options: CustomerInitializeOptions): void;\n    onError?(error: Error): void;\n}\n\nconst CheckoutButtonList: FunctionComponent<CheckoutButtonListProps> = ({\n    checkEmbeddedSupport,\n    onError,\n    methodIds,\n    ...rest\n}) => {\n    const supportedMethodIds = methodIds\n        .filter(methodId => SUPPORTED_METHODS.indexOf(methodId) !== -1);\n\n    if (supportedMethodIds.length === 0) {\n        return null;\n    }\n\n    if (checkEmbeddedSupport) {\n        try {\n            checkEmbeddedSupport(supportedMethodIds);\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            } else {\n                throw error;\n            }\n\n            return null;\n        }\n    }\n\n    return (\n        <Fragment>\n            <p><TranslatedString id=\"remote.continue_with_text\" /></p>\n\n            <div className=\"checkoutRemote\">\n                { supportedMethodIds.map(methodId =>\n                    <CheckoutButton\n                        containerId={ `${methodId}CheckoutButton` }\n                        key={ methodId }\n                        methodId={ methodId }\n                        onError={ onError }\n                        { ...rest }\n                    />\n                ) }\n            </div>\n        </Fragment>\n    );\n};\n\nexport default memo(CheckoutButtonList);\n","import { createLanguageService, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\n\nimport { DEFAULT_TRANSLATIONS } from './translations';\n\nfunction getLanguageService(): LanguageService {\n    return createLanguageService({\n        ...(window as any).language,\n        defaultTranslations: DEFAULT_TRANSLATIONS,\n    });\n}\n\nexport default memoize(getLanguageService);\n","export default function isEmbedded(\n    pathname: string = document.location.pathname\n): boolean {\n    const basePath = `/${pathname.split('/')[1]}`;\n\n    return basePath === '/embedded-checkout';\n}\n","export default abstract class CustomError extends Error {\n    static shouldReport: boolean;\n\n    data: any;\n    title: any;\n    type: string;\n\n    constructor({\n        data = {},\n        message = '',\n        title = '',\n        name = '',\n    }: {\n        data?: any;\n        message?: string;\n        title?: string;\n        name?: string;\n    }) {\n        super();\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, CustomError);\n        } else {\n            this.stack = (new Error()).stack;\n        }\n\n        this.data = data;\n        this.message = message;\n        this.name = name;\n        this.title = title;\n        this.type = 'custom';\n    }\n\n    // todo: remove these methods when all error types has specific subclasses.\n    // they are only provided for compatibility with errors defined in `app.errors.ts` while we transition\n    // to proper error subclasses.\n    protected setDefaultValues({\n        name,\n        defaultError,\n        defaultTitle,\n    }: { name: string; defaultError: string; defaultTitle: string}): void {\n        this.name = this.name || name;\n        this.message = this.message || defaultError;\n        this.title = this.title || defaultTitle;\n    }\n}\n","import { CheckoutSelectors, CheckoutService } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { Component, ReactNode } from 'react';\n\nimport CheckoutContext from './CheckoutContext';\n\nexport interface CheckoutProviderProps {\n    checkoutService: CheckoutService;\n}\n\nexport interface CheckoutProviderState {\n    checkoutState: CheckoutSelectors;\n}\n\nexport default class CheckoutProvider extends Component<CheckoutProviderProps, CheckoutProviderState> {\n    state: Readonly<CheckoutProviderState>;\n\n    private unsubscribe?: () => void;\n\n    private getContextValue = memoizeOne((checkoutService, checkoutState) => {\n        return {\n            checkoutService,\n            checkoutState,\n        };\n    });\n\n    constructor(props: Readonly<CheckoutProviderProps>) {\n        super(props);\n\n        this.state = {\n            checkoutState: props.checkoutService.getState(),\n        };\n    }\n\n    componentDidMount(): void {\n        const { checkoutService } = this.props;\n\n        this.unsubscribe = checkoutService.subscribe(checkoutState =>\n            this.setState({ checkoutState })\n        );\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const { checkoutService, children } = this.props;\n        const { checkoutState } = this.state;\n\n        return (\n            <CheckoutContext.Provider value={ this.getContextValue(checkoutService, checkoutState) }>\n                { children }\n            </CheckoutContext.Provider>\n        );\n    }\n}\n","import { RequestError } from '@bigcommerce/checkout-sdk';\n\nexport default function isRequestError(error: Error): error is RequestError {\n    const requestError = error as RequestError;\n\n    return requestError.type === 'request';\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { object, string, ObjectSchema, StringSchema } from 'yup';\n\nimport getAddressCustomFieldsValidationSchema, { AddressValidationSchemaOptions } from './getAddressCustomFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nconst ERROR_KEYS: { [fieldName: string]: string } = {\n    countryCode: 'address.country',\n    firstName: 'address.first_name',\n    lastName: 'address.last_name',\n    company: 'address.company_name',\n    address1: 'address.address_line_1',\n    address2: 'address.address_line_1',\n    city: 'address.city',\n    stateOrProvince: 'address.state',\n    stateOrProvinceCode: 'address.state',\n    postalCode: 'address.postal_code',\n    phone: 'address.phone_number',\n};\n\nexport default memoize(function getAddressValidationSchema({\n    formFields,\n    language,\n}: AddressValidationSchemaOptions): ObjectSchema<Partial<AddressFormValues>> {\n    const translate: (\n        key: string,\n        data?: any\n    ) => string | undefined = (key, data) => language && language.translate(key, data);\n\n    return object({\n        ...formFields\n            .filter(({ custom }) => !custom)\n            .reduce((schema, { name, required }) => {\n                schema[name] = string();\n\n                if (required) {\n                    schema[name] = schema[name].required(\n                        translate(`${ERROR_KEYS[name]}_required_error`)\n                    );\n                }\n\n                return schema;\n            },\n            {} as { [key: string]: StringSchema }\n        ),\n    }).concat(getAddressCustomFieldsValidationSchema({ formFields, language })) as ObjectSchema<Partial<AddressFormValues>>;\n});\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { array, date, number, object, string, ArraySchema, NumberSchema, ObjectSchema, Schema } from 'yup';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface AddressValidationSchemaOptions {\n    formFields: FormField[];\n    language?: LanguageService;\n}\n\nconst ERROR_KEYS: { [fieldName: string]: string } = {\n    custom: 'address.custom',\n};\n\nexport default memoize(function getAddressCustomFieldsValidationSchema({\n    formFields,\n    language,\n}: AddressValidationSchemaOptions): ObjectSchema<Partial<AddressFormValues>> {\n    const translate: (\n        key: string,\n        data?: any\n    ) => string | undefined = (key, data) => language && language.translate(key, data);\n\n    return object({\n        customFields: object(\n            formFields\n                .filter(({ custom }) => !!custom)\n                .reduce((schema, { name, label, required, fieldType, type, min, max }) => {\n                    const requiredErrorMessage = translate(`${ERROR_KEYS.custom}_required_error`, { label });\n                    let maxValue: number | undefined;\n                    let minValue: number | undefined;\n\n                    if (type === 'date') {\n                        schema[name] = date()\n                            // Transform NaN values to undefined to avoid empty string (empty input) to fail date\n                            // validation when it's optional\n                            .strict(true)\n                            .nullable(true)\n                            .transform((value, originalValue) => originalValue === '' ? null : value);\n                    } else if (type === 'integer') {\n                        schema[name] = number()\n                            // Transform NaN values to undefined to avoid empty string (empty input) to fail number\n                            // validation when it's optional\n                            .strict(true)\n                            .transform(value => isNaN(value) ? undefined : value);\n\n                        maxValue = typeof max === 'number' ? max : undefined;\n                        minValue = typeof min === 'number' ? min : undefined;\n                    } else if (fieldType === DynamicFormFieldType.checkbox) {\n                        schema[name] = array();\n                    } else {\n                        schema[name] = string();\n                    }\n\n                    if (maxValue !== undefined) {\n                        schema[name] = (schema[name] as NumberSchema).max(maxValue,\n                            translate(`${ERROR_KEYS.custom}_max_error`, { label, max: maxValue + 1 })\n                        );\n                    }\n\n                    if (minValue !== undefined) {\n                        schema[name] = (schema[name] as NumberSchema).min(minValue,\n                            translate(`${ERROR_KEYS.custom}_min_error`, { label, min: minValue - 1 })\n                        );\n                    }\n\n                    if (required) {\n                        schema[name] = fieldType === DynamicFormFieldType.checkbox ?\n                            (schema[name] as ArraySchema<string>).min(1, requiredErrorMessage) :\n                            (schema[name] as ArraySchema<string>).required(requiredErrorMessage);\n                    }\n\n                    return schema;\n                },\n                {} as { [key: string]: Schema<any> }\n            )\n        ).nullable(true),\n    }) as ObjectSchema<Partial<AddressFormValues>>;\n});\n","import { Address, AddressKey, FormField } from '@bigcommerce/checkout-sdk';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport type AddressFormValues = Pick<Address, Exclude<AddressKey, 'customFields'>> & {\n    customFields: { [id: string]: any };\n};\n\nexport default function mapAddressToFormValues(fields: FormField[], address?: Address): AddressFormValues {\n    const values = ({\n        ...fields.reduce(\n            (addressFormValues, { name, custom, fieldType, default: defaultValue }) => {\n                if (custom) {\n                    if (!addressFormValues.customFields) {\n                        addressFormValues.customFields = {};\n                    }\n\n                    const field = address &&\n                        address.customFields &&\n                        address.customFields.find(({ fieldId }) => fieldId === name);\n\n                    const fieldValue = (field && field.fieldValue);\n\n                    addressFormValues.customFields[name] = getValue(fieldType, fieldValue, defaultValue);\n\n                    return addressFormValues;\n                }\n\n                if (isSystemAddressFieldName(name)) {\n                    addressFormValues[name] = (address && address[name]) || '';\n                }\n\n                return addressFormValues;\n            },\n            {} as AddressFormValues\n        ),\n    });\n\n    values.shouldSaveAddress = address && address.shouldSaveAddress !== undefined ?\n        address.shouldSaveAddress :\n        true;\n\n    // Manually backfill stateOrProvince to avoid Formik warning (uncontrolled to controlled input)\n    if (values.stateOrProvince === undefined) {\n        values.stateOrProvince = '';\n    }\n\n    if (values.stateOrProvinceCode === undefined) {\n        values.stateOrProvinceCode = '';\n    }\n\n    return values;\n}\n\nfunction getValue(fieldType?: string, fieldValue?: string | string[] | number, defaultValue?: string): string | string[] | number | Date | undefined {\n    if (fieldValue === undefined || fieldValue === null) {\n        return getDefaultValue(fieldType, defaultValue);\n    }\n\n    if (fieldType === DynamicFormFieldType.date && typeof fieldValue === 'string') {\n        return fieldValue ? new Date(fieldValue) : undefined;\n    }\n\n    return fieldValue;\n}\n\nfunction getDefaultValue(fieldType?: string, defaultValue?: string): string | string[] | Date {\n    if (defaultValue && fieldType === DynamicFormFieldType.date) {\n        return new Date(defaultValue);\n    }\n\n    if (fieldType === DynamicFormFieldType.checkbox) {\n        return [];\n    }\n\n    return defaultValue || '';\n}\n\nfunction isSystemAddressFieldName(fieldName: string): fieldName is Exclude<keyof Address, 'customFields' | 'shouldSaveAddress'> {\n    return fieldName !== 'customFields' && fieldName !== 'shouldSaveAddress';\n}\n","import { CheckoutPayment, GiftCertificateOrderPayment, OrderPayment } from '@bigcommerce/checkout-sdk';\n\nexport default function isGiftCertificatePayment(\n    payment: OrderPayment | CheckoutPayment\n): payment is GiftCertificateOrderPayment {\n    return payment.providerId === 'giftcertificate';\n}\n","import classNames from 'classnames';\nimport React, { memo, FunctionComponent, ReactNode } from 'react';\n\nimport { FormContext } from './FormProvider';\n\nexport interface FormFieldContainerProps {\n    additionalClassName?: string;\n    children: ReactNode;\n    className?: string;\n    hasError?: boolean;\n    testId?: string;\n}\n\nconst FormFieldContainer: FunctionComponent<FormFieldContainerProps> = ({\n    additionalClassName,\n    children,\n    className,\n    hasError,\n    testId,\n}) => (\n    <FormContext.Consumer>\n        { ({ isSubmitted }) => (\n            <div\n                className={ className ? className : classNames(\n                    'form-field',\n                    additionalClassName,\n                    { 'form-field--error': hasError && isSubmitted }\n                ) }\n                data-test={ testId }\n            >\n                { children }\n            </div>\n        ) }\n    </FormContext.Consumer>\n);\n\nexport default memo(FormFieldContainer);\n","\nimport { isEmpty, pickBy } from 'lodash';\nimport React, { memo, useContext, ComponentType, Context, FunctionComponent } from 'react';\n\nimport InjectHoc from './InjectHoc';\n\nexport interface InjectHocOptions<TInjectedProps> {\n    displayNamePrefix?: string;\n    pickProps?(value: TInjectedProps[keyof TInjectedProps], key: keyof TInjectedProps): boolean;\n}\n\nexport default function createInjectHoc<\n    TInjectedProps extends object | undefined,\n    TPickedProps extends Partial<TInjectedProps> = TInjectedProps\n>(\n    ContextComponent: Context<TInjectedProps>,\n    options?: InjectHocOptions<TInjectedProps>\n): InjectHoc<NonNullable<TPickedProps>> {\n    return <TProps extends TPickedProps>(\n        OriginalComponent: ComponentType<TProps>\n    ) => {\n        const {\n            displayNamePrefix = '',\n            pickProps = () => true,\n        } = options || {};\n\n        const InnerDecoratedComponent: FunctionComponent<TProps> = memo(props =>\n            <OriginalComponent { ...props } />\n        );\n\n        const DecoratedComponent = (props: Omit<TProps, keyof NonNullable<TPickedProps>>) => {\n            const context = useContext(ContextComponent);\n            const injectedProps = pickBy(context, (value, key) => pickProps(value, key as keyof TInjectedProps));\n\n            if (isEmpty(injectedProps)) {\n                return null;\n            }\n\n            const mergedProps = { ...injectedProps, ...props } as unknown as TProps;\n\n            return <InnerDecoratedComponent { ...mergedProps } />;\n        };\n\n        if (displayNamePrefix) {\n            DecoratedComponent.displayName = `${displayNamePrefix}(${OriginalComponent.displayName || OriginalComponent.name})`;\n        }\n\n        return DecoratedComponent;\n    };\n}\n","import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.async-iterator\";\nimport \"core-js/modules/es.symbol.has-instance\";\nimport \"core-js/modules/es.symbol.is-concat-spreadable\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.symbol.match\";\nimport \"core-js/modules/es.symbol.replace\";\nimport \"core-js/modules/es.symbol.search\";\nimport \"core-js/modules/es.symbol.species\";\nimport \"core-js/modules/es.symbol.split\";\nimport \"core-js/modules/es.symbol.to-primitive\";\nimport \"core-js/modules/es.symbol.to-string-tag\";\nimport \"core-js/modules/es.symbol.unscopables\";\nimport \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.copy-within\";\nimport \"core-js/modules/es.array.every\";\nimport \"core-js/modules/es.array.fill\";\nimport \"core-js/modules/es.array.filter\";\nimport \"core-js/modules/es.array.find\";\nimport \"core-js/modules/es.array.find-index\";\nimport \"core-js/modules/es.array.flat\";\nimport \"core-js/modules/es.array.flat-map\";\nimport \"core-js/modules/es.array.for-each\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.includes\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.join\";\nimport \"core-js/modules/es.array.last-index-of\";\nimport \"core-js/modules/es.array.map\";\nimport \"core-js/modules/es.array.of\";\nimport \"core-js/modules/es.array.reduce\";\nimport \"core-js/modules/es.array.reduce-right\";\nimport \"core-js/modules/es.array.reverse\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.array.some\";\nimport \"core-js/modules/es.array.sort\";\nimport \"core-js/modules/es.array.species\";\nimport \"core-js/modules/es.array.splice\";\nimport \"core-js/modules/es.array.unscopables.flat\";\nimport \"core-js/modules/es.array.unscopables.flat-map\";\nimport \"core-js/modules/es.array-buffer.constructor\";\nimport \"core-js/modules/es.array-buffer.is-view\";\nimport \"core-js/modules/es.array-buffer.slice\";\nimport \"core-js/modules/es.data-view\";\nimport \"core-js/modules/es.date.to-iso-string\";\nimport \"core-js/modules/es.date.to-json\";\nimport \"core-js/modules/es.date.to-primitive\";\nimport \"core-js/modules/es.date.to-string\";\nimport \"core-js/modules/es.function.has-instance\";\nimport \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.json.to-string-tag\";\nimport \"core-js/modules/es.map\";\nimport \"core-js/modules/es.math.acosh\";\nimport \"core-js/modules/es.math.asinh\";\nimport \"core-js/modules/es.math.atanh\";\nimport \"core-js/modules/es.math.cbrt\";\nimport \"core-js/modules/es.math.clz32\";\nimport \"core-js/modules/es.math.cosh\";\nimport \"core-js/modules/es.math.expm1\";\nimport \"core-js/modules/es.math.fround\";\nimport \"core-js/modules/es.math.hypot\";\nimport \"core-js/modules/es.math.imul\";\nimport \"core-js/modules/es.math.log10\";\nimport \"core-js/modules/es.math.log1p\";\nimport \"core-js/modules/es.math.log2\";\nimport \"core-js/modules/es.math.sign\";\nimport \"core-js/modules/es.math.sinh\";\nimport \"core-js/modules/es.math.tanh\";\nimport \"core-js/modules/es.math.to-string-tag\";\nimport \"core-js/modules/es.math.trunc\";\nimport \"core-js/modules/es.number.constructor\";\nimport \"core-js/modules/es.number.epsilon\";\nimport \"core-js/modules/es.number.is-finite\";\nimport \"core-js/modules/es.number.is-integer\";\nimport \"core-js/modules/es.number.is-nan\";\nimport \"core-js/modules/es.number.is-safe-integer\";\nimport \"core-js/modules/es.number.max-safe-integer\";\nimport \"core-js/modules/es.number.min-safe-integer\";\nimport \"core-js/modules/es.number.parse-float\";\nimport \"core-js/modules/es.number.parse-int\";\nimport \"core-js/modules/es.number.to-fixed\";\nimport \"core-js/modules/es.number.to-precision\";\nimport \"core-js/modules/es.object.assign\";\nimport \"core-js/modules/es.object.define-getter\";\nimport \"core-js/modules/es.object.define-setter\";\nimport \"core-js/modules/es.object.entries\";\nimport \"core-js/modules/es.object.freeze\";\nimport \"core-js/modules/es.object.from-entries\";\nimport \"core-js/modules/es.object.get-own-property-descriptor\";\nimport \"core-js/modules/es.object.get-own-property-descriptors\";\nimport \"core-js/modules/es.object.get-own-property-names\";\nimport \"core-js/modules/es.object.get-prototype-of\";\nimport \"core-js/modules/es.object.is\";\nimport \"core-js/modules/es.object.is-extensible\";\nimport \"core-js/modules/es.object.is-frozen\";\nimport \"core-js/modules/es.object.is-sealed\";\nimport \"core-js/modules/es.object.keys\";\nimport \"core-js/modules/es.object.lookup-getter\";\nimport \"core-js/modules/es.object.lookup-setter\";\nimport \"core-js/modules/es.object.prevent-extensions\";\nimport \"core-js/modules/es.object.seal\";\nimport \"core-js/modules/es.object.set-prototype-of\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.object.values\";\nimport \"core-js/modules/es.parse-float\";\nimport \"core-js/modules/es.parse-int\";\nimport \"core-js/modules/es.promise\";\nimport \"core-js/modules/es.promise.finally\";\nimport \"core-js/modules/es.reflect.apply\";\nimport \"core-js/modules/es.reflect.construct\";\nimport \"core-js/modules/es.reflect.define-property\";\nimport \"core-js/modules/es.reflect.delete-property\";\nimport \"core-js/modules/es.reflect.get\";\nimport \"core-js/modules/es.reflect.get-own-property-descriptor\";\nimport \"core-js/modules/es.reflect.get-prototype-of\";\nimport \"core-js/modules/es.reflect.has\";\nimport \"core-js/modules/es.reflect.is-extensible\";\nimport \"core-js/modules/es.reflect.own-keys\";\nimport \"core-js/modules/es.reflect.prevent-extensions\";\nimport \"core-js/modules/es.reflect.set\";\nimport \"core-js/modules/es.reflect.set-prototype-of\";\nimport \"core-js/modules/es.regexp.constructor\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.regexp.flags\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.set\";\nimport \"core-js/modules/es.string.code-point-at\";\nimport \"core-js/modules/es.string.ends-with\";\nimport \"core-js/modules/es.string.from-code-point\";\nimport \"core-js/modules/es.string.includes\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.string.match\";\nimport \"core-js/modules/es.string.pad-end\";\nimport \"core-js/modules/es.string.pad-start\";\nimport \"core-js/modules/es.string.raw\";\nimport \"core-js/modules/es.string.repeat\";\nimport \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/es.string.search\";\nimport \"core-js/modules/es.string.split\";\nimport \"core-js/modules/es.string.starts-with\";\nimport \"core-js/modules/es.string.trim\";\nimport \"core-js/modules/es.string.trim-end\";\nimport \"core-js/modules/es.string.trim-start\";\nimport \"core-js/modules/es.string.anchor\";\nimport \"core-js/modules/es.string.big\";\nimport \"core-js/modules/es.string.blink\";\nimport \"core-js/modules/es.string.bold\";\nimport \"core-js/modules/es.string.fixed\";\nimport \"core-js/modules/es.string.fontcolor\";\nimport \"core-js/modules/es.string.fontsize\";\nimport \"core-js/modules/es.string.italics\";\nimport \"core-js/modules/es.string.link\";\nimport \"core-js/modules/es.string.small\";\nimport \"core-js/modules/es.string.strike\";\nimport \"core-js/modules/es.string.sub\";\nimport \"core-js/modules/es.string.sup\";\nimport \"core-js/modules/es.typed-array.float32-array\";\nimport \"core-js/modules/es.typed-array.float64-array\";\nimport \"core-js/modules/es.typed-array.int8-array\";\nimport \"core-js/modules/es.typed-array.int16-array\";\nimport \"core-js/modules/es.typed-array.int32-array\";\nimport \"core-js/modules/es.typed-array.uint8-array\";\nimport \"core-js/modules/es.typed-array.uint8-clamped-array\";\nimport \"core-js/modules/es.typed-array.uint16-array\";\nimport \"core-js/modules/es.typed-array.uint32-array\";\nimport \"core-js/modules/es.typed-array.copy-within\";\nimport \"core-js/modules/es.typed-array.every\";\nimport \"core-js/modules/es.typed-array.fill\";\nimport \"core-js/modules/es.typed-array.filter\";\nimport \"core-js/modules/es.typed-array.find\";\nimport \"core-js/modules/es.typed-array.find-index\";\nimport \"core-js/modules/es.typed-array.for-each\";\nimport \"core-js/modules/es.typed-array.from\";\nimport \"core-js/modules/es.typed-array.includes\";\nimport \"core-js/modules/es.typed-array.index-of\";\nimport \"core-js/modules/es.typed-array.iterator\";\nimport \"core-js/modules/es.typed-array.join\";\nimport \"core-js/modules/es.typed-array.last-index-of\";\nimport \"core-js/modules/es.typed-array.map\";\nimport \"core-js/modules/es.typed-array.of\";\nimport \"core-js/modules/es.typed-array.reduce\";\nimport \"core-js/modules/es.typed-array.reduce-right\";\nimport \"core-js/modules/es.typed-array.reverse\";\nimport \"core-js/modules/es.typed-array.set\";\nimport \"core-js/modules/es.typed-array.slice\";\nimport \"core-js/modules/es.typed-array.some\";\nimport \"core-js/modules/es.typed-array.sort\";\nimport \"core-js/modules/es.typed-array.subarray\";\nimport \"core-js/modules/es.typed-array.to-locale-string\";\nimport \"core-js/modules/es.typed-array.to-string\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/es.weak-set\";\nimport \"core-js/modules/esnext.aggregate-error\";\nimport \"core-js/modules/esnext.array.last-index\";\nimport \"core-js/modules/esnext.array.last-item\";\nimport \"core-js/modules/esnext.composite-key\";\nimport \"core-js/modules/esnext.composite-symbol\";\nimport \"core-js/modules/esnext.global-this\";\nimport \"core-js/modules/esnext.map.delete-all\";\nimport \"core-js/modules/esnext.map.every\";\nimport \"core-js/modules/esnext.map.filter\";\nimport \"core-js/modules/esnext.map.find\";\nimport \"core-js/modules/esnext.map.find-key\";\nimport \"core-js/modules/esnext.map.from\";\nimport \"core-js/modules/esnext.map.group-by\";\nimport \"core-js/modules/esnext.map.includes\";\nimport \"core-js/modules/esnext.map.key-by\";\nimport \"core-js/modules/esnext.map.key-of\";\nimport \"core-js/modules/esnext.map.map-keys\";\nimport \"core-js/modules/esnext.map.map-values\";\nimport \"core-js/modules/esnext.map.merge\";\nimport \"core-js/modules/esnext.map.of\";\nimport \"core-js/modules/esnext.map.reduce\";\nimport \"core-js/modules/esnext.map.some\";\nimport \"core-js/modules/esnext.map.update\";\nimport \"core-js/modules/esnext.math.clamp\";\nimport \"core-js/modules/esnext.math.deg-per-rad\";\nimport \"core-js/modules/esnext.math.degrees\";\nimport \"core-js/modules/esnext.math.fscale\";\nimport \"core-js/modules/esnext.math.iaddh\";\nimport \"core-js/modules/esnext.math.imulh\";\nimport \"core-js/modules/esnext.math.isubh\";\nimport \"core-js/modules/esnext.math.rad-per-deg\";\nimport \"core-js/modules/esnext.math.radians\";\nimport \"core-js/modules/esnext.math.scale\";\nimport \"core-js/modules/esnext.math.seeded-prng\";\nimport \"core-js/modules/esnext.math.signbit\";\nimport \"core-js/modules/esnext.math.umulh\";\nimport \"core-js/modules/esnext.number.from-string\";\nimport \"core-js/modules/esnext.observable\";\nimport \"core-js/modules/esnext.promise.all-settled\";\nimport \"core-js/modules/esnext.promise.any\";\nimport \"core-js/modules/esnext.promise.try\";\nimport \"core-js/modules/esnext.reflect.define-metadata\";\nimport \"core-js/modules/esnext.reflect.delete-metadata\";\nimport \"core-js/modules/esnext.reflect.get-metadata\";\nimport \"core-js/modules/esnext.reflect.get-metadata-keys\";\nimport \"core-js/modules/esnext.reflect.get-own-metadata\";\nimport \"core-js/modules/esnext.reflect.get-own-metadata-keys\";\nimport \"core-js/modules/esnext.reflect.has-metadata\";\nimport \"core-js/modules/esnext.reflect.has-own-metadata\";\nimport \"core-js/modules/esnext.reflect.metadata\";\nimport \"core-js/modules/esnext.set.add-all\";\nimport \"core-js/modules/esnext.set.delete-all\";\nimport \"core-js/modules/esnext.set.difference\";\nimport \"core-js/modules/esnext.set.every\";\nimport \"core-js/modules/esnext.set.filter\";\nimport \"core-js/modules/esnext.set.find\";\nimport \"core-js/modules/esnext.set.from\";\nimport \"core-js/modules/esnext.set.intersection\";\nimport \"core-js/modules/esnext.set.is-disjoint-from\";\nimport \"core-js/modules/esnext.set.is-subset-of\";\nimport \"core-js/modules/esnext.set.is-superset-of\";\nimport \"core-js/modules/esnext.set.join\";\nimport \"core-js/modules/esnext.set.map\";\nimport \"core-js/modules/esnext.set.of\";\nimport \"core-js/modules/esnext.set.reduce\";\nimport \"core-js/modules/esnext.set.some\";\nimport \"core-js/modules/esnext.set.symmetric-difference\";\nimport \"core-js/modules/esnext.set.union\";\nimport \"core-js/modules/esnext.string.at\";\nimport \"core-js/modules/esnext.string.code-points\";\nimport \"core-js/modules/esnext.string.replace-all\";\nimport \"core-js/modules/esnext.symbol.dispose\";\nimport \"core-js/modules/esnext.symbol.observable\";\nimport \"core-js/modules/esnext.symbol.pattern-match\";\nimport \"core-js/modules/esnext.weak-map.delete-all\";\nimport \"core-js/modules/esnext.weak-map.from\";\nimport \"core-js/modules/esnext.weak-map.of\";\nimport \"core-js/modules/esnext.weak-set.add-all\";\nimport \"core-js/modules/esnext.weak-set.delete-all\";\nimport \"core-js/modules/esnext.weak-set.from\";\nimport \"core-js/modules/esnext.weak-set.of\";\nimport \"core-js/modules/web.dom-collections.for-each\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport \"core-js/modules/web.immediate\";\nimport \"core-js/modules/web.queue-microtask\";\nimport \"core-js/modules/web.url\";\nimport \"core-js/modules/web.url.to-json\";\nimport \"core-js/modules/web.url-search-params\";\nimport \"core-js/modules/esnext.string.match-all\";","import classNames from 'classnames';\nimport React, { memo, ComponentType } from 'react';\n\nexport enum IconSize {\n    Regular = 'regular',\n    Small = 'small',\n    Medium = 'medium',\n    Large = 'large',\n}\n\nexport interface IconProps {\n    additionalClassName?: string;\n    size?: IconSize;\n    testId?: string;\n}\n\nexport default function withIconContainer<TProps>(\n    OriginalComponent: ComponentType<TProps>\n): ComponentType<TProps & IconProps> {\n    return memo(({\n        additionalClassName,\n        size,\n        testId,\n        ...rest\n    }) => (\n        <div\n            className={ classNames(\n                'icon',\n                additionalClassName,\n                size === IconSize.Small ? 'icon--small' : null,\n                size === IconSize.Large ? 'icon--large' : null,\n                size === IconSize.Medium ? 'icon--medium' : null\n            ) }\n            data-test={ testId }\n        >\n            <OriginalComponent { ...rest as TProps } />\n        </div>\n    ));\n}\n"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 192);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction |\n    ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedContentOptions } from './iframe-content';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport enum BillingAddressFormat {\n    /*\n     * Name, country code, and postal code (default).\n     */\n    Min = 'MIN',\n    /*\n     * Name, street address, locality, region, country code, and postal code.\n     */\n    Full = 'FULL',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: BillingAddressFormat;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: TokenizationSpecification;\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","module.exports = require(\"card-validator\");","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    SendSignInEmailRequestedAction |\n    SendSignInEmailSucceededAction |\n    SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { FormattedPayload, FormattedVaultedInstrument, HostedVaultedInstrument, PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(instrument: PaymentInstrument): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !instrument.hasOwnProperty('ccNumber') &&\n        !instrument.hasOwnProperty('ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(instrument: PaymentInstrument): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>).formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token);\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorData, PaymentErrorResponseBody } from '../../common/error';\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n}\n\n// Events\nexport type HostedInputEvent = (\n    HostedInputAttachSuccessEvent |\n    HostedInputAttachErrorEvent |\n    HostedInputBinChangeEvent |\n    HostedInputBlurEvent |\n    HostedInputChangeEvent |\n    HostedInputCardTypeChangeEvent |\n    HostedInputEnterEvent |\n    HostedInputFocusEvent |\n    HostedInputSubmitSuccessEvent |\n    HostedInputSubmitErrorEvent |\n    HostedInputValidateEvent\n);\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","module.exports = require(\"local-storage-fallback\");","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import { isBillingAddressLike, BillingAddress } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[]\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","module.exports = require(\"shallowequal\");","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n}\n\nexport type HostedFieldEvent = (\n    HostedFieldAttachEvent |\n    HostedFieldSubmitRequestEvent |\n    HostedFieldValidateRequestEvent\n);\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"reselect\");","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port = anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ?\n        anchor.port :\n        '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? ':' + port : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && find(lineItem.socialMedia, item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","export type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    Pay: AmazonPayV2Client;\n}\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParams): HTMLElement;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonParams {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. Default is false.\n     */\n    sandbox?: boolean;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport enum AmazonPayV2Regions {\n    de = 'eu',\n    jp = 'fe',\n    uk = 'eu',\n    us = 'na',\n}\n\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport { BraintreeClientCreator, BraintreeDataCollectorCreator, BraintreeHostedFieldsCreator, BraintreeHostWindow, BraintreePaypalCheckoutCreator, BraintreePaypalCreator, BraintreeThreeDSecureCreator, BraintreeVisaCheckoutCreator } from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        await this._scriptLoader.loadScript('//js.braintreegateway.com/web/3.59.0/js/hosted-fields.min.js');\n\n        if (!this._window.braintree || !this._window.braintree.hostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.braintree.hostedFields;\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { BraintreeClient, BraintreeDataCollector, BraintreeHostedFields, BraintreeHostedFieldsCreatorConfig, BraintreeModule, BraintreePaypal, BraintreePaypalCheckout, BraintreeThreeDSecure, BraintreeVisaCheckout, GooglePayBraintreeSDK } from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>\n    ): Promise<BraintreeHostedFields> {\n        const [client, hostedFields] = await Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadHostedFields(),\n        ]);\n\n        return hostedFields.create({ ...options, client });\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear = year.length === 4 ? year.slice(-2) : (year ? year.slice(0, 2) : month.slice(2));\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map(info => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter(gapIndex => unformattedValue.length > gapIndex)\n            .reduce((output, gapIndex, index) => (\n                [\n                    output.slice(0, gapIndex + index),\n                    output.slice(gapIndex + index),\n                ].join(NUMBER_SEPARATOR)\n            ), unformattedValue);\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = []\n): string {\n    return Array.isArray(includeDictionaryOrList) ?\n        joinIncludes([\n            ...baseIncludes,\n            ...includeDictionaryOrList,\n        ]) :\n        mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean }\n): string {\n    const deletions = keys(pickBy(includesDictionary, on => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([\n            ...difference(baseIncludes, deletions),\n            ...additions,\n        ]);\n}\n","module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { CheckoutIncludes, CheckoutParams, CheckoutRequestSender, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, { ConsignmentsRequestBody, ConsignmentAssignmentRequestBody, ConsignmentCreateRequestBody, ConsignmentLineItem, ConsignmentRequestBody, ConsignmentShippingOptionRequestBody, ConsignmentUpdateRequestBody } from './consignment';\nimport { ConsignmentActionType, CreateConsignmentsAction, DeleteConsignmentAction, LoadShippingOptionsAction, UpdateConsignmentAction, UpdateShippingOptionAction } from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            shippingAddress,\n            lineItems: [ ...physicalItems, ...customItems ].map(item => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport { joinIncludes, joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ];\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport { CardExpiryFormatter, CardNumberFormatter, HostedInputValues } from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, { HostedCreditCardInstrument, HostedVaultedInstrument, PaymentInstrument } from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) || isFormattedVaultedInstrument(payment.paymentData)) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(values: HostedInputValues, data: HostedFormOrderData, nonce: string): PaymentRequestBody {\n        const { additionalAction, authToken, checkout, config, order, orderMeta, payment = {}, paymentMethod, paymentMethodMeta } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer: order && order.billingAddress && checkout && mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress: order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress: shippingAddress && checkout && mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: config && pick(config.storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string\n    ): PaymentInstrument {\n        return 'instrumentId' in payment ?\n            {\n                ...payment,\n                ccCvv: values.cardCodeVerification,\n                ccNumber: values.cardNumberVerification && this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                hostedFormNonce: nonce,\n            } :\n            {\n                ...payment,\n                ccCvv: values.cardCode,\n                ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                ccName: values.cardName || '',\n                ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                hostedFormNonce: nonce,\n            };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, { InternalErrorResponseBody, StorefrontErrorResponseBody } from './error-response-body';\nimport { mapFromInternalErrorResponse, mapFromPaymentErrorResponse, mapFromStorefrontErrorResponse, RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nfunction arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n\nexport default objectMerge;\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction | ContinueAsGuestAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction | ContinueAsGuestAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction | ContinueAsGuestAction\n): Customer | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): PaymentInstrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionStarted:\n    case ShippingStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionFinished:\n    case ShippingStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, { DEFAULT_STATE, SignInEmailErrorsState, SignInEmailStatusesState } from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction\n): SignInEmail | undefined {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction\n): SignInEmailErrorsState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(errors, 'sendError', undefined);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n        return objectSet(errors, 'sendError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction\n): SignInEmailStatusesState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n        return objectSet(statuses, 'isSending', true);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(statuses, 'isSending', false);\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, { DEFAULT_STATE, SubscriptionsErrorsState, SubscriptionsStatusesState } from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction\n): SubscriptionsErrorsState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction\n): SubscriptionsStatusesState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | SpamProtectionAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case SpamProtectionActionType.ExecuteRequested:\n        return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n    case SpamProtectionActionType.ExecuteFailed:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        getBillingAddress => () => {\n            return guard(getBillingAddress(), () => new MissingDataError(MissingDataErrorType.MissingBillingAddress));\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        signInEmail => () => signInEmail\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        error => () => error\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SignInEmailState = DEFAULT_STATE\n    ): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getCartOrThrow = createSelector(\n        getCart,\n        getCart => () => {\n          return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        data => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined ?\n                flashMessages.filter(({ type }) => filterType === type) :\n                flashMessages;\n        }\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getStoreConfigOrThrow = createSelector(\n        getStoreConfig,\n        getStoreConfig => () => {\n          return guard(getStoreConfig(), () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig));\n        }\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getFlashMessages: getFlashMessages(state),\n            getStoreConfig: getStoreConfig(state),\n            getStoreConfigOrThrow: getStoreConfigOrThrow(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getVariantIdentificationToken: getVariantIdentificationToken(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { createSelector } from '../../common/selector';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway ? `${paymentMethod.gateway}.${paymentMethod.id}` : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        }\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) => (instrumentId: string) => {\n            const cards = values(supportedInstruments);\n\n            return instruments.find((instrument): instrument is CardInstrument =>\n                instrument.bigpayToken === instrumentId &&\n                instrument.type === 'card' &&\n                cards.some(card => isMatch(instrument, card))\n            );\n        }\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, supportedProvider =>\n                filter(instruments, (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                    return isMatch(instrument, supportedProvider);\n                })\n            );\n\n            return allSupportedInstruments;\n        }\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState, DEFAULT_STATE } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId ?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        getPaymentMethod => (methodId: string, gatewayId?: string) => {\n            return guard(getPaymentMethod(methodId, gatewayId), () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getCheckoutOrThrow = createSelector(\n        getCheckout,\n        getCheckout => () => {\n            return guard(getCheckout(), () => new MissingDataError(MissingDataErrorType.MissingCheckout));\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        isExecutingSpamCheck => () => isExecutingSpamCheck === true\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isExecutingSpamCheck: isExecutingSpamCheck(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderOrThrow = createSelector(\n        getOrder,\n        getOrder => () => {\n            return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SubscriptionsState = DEFAULT_STATE\n    ): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get<Checkout>(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<TSuccessEvent extends IframeEvent, TErrorEvent extends IframeEvent> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<TSuccessEvent extends IframeEvent = IframeEvent, TErrorEvent extends IframeEvent = IframeEvent>(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>\n    ): Promise<TSuccessEvent>;\n    post<TSuccessEvent extends IframeEvent = IframeEvent, TErrorEvent extends IframeEvent = IframeEvent>(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>\n    ): Promise<TSuccessEvent> | void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result = options && fromEvent<MessageEvent>(window, 'message')\n            .pipe(\n                filter(event =>\n                    event.origin === this._targetOrigin &&\n                    isIframeEvent(event.data, event.data.type) &&\n                    [options.successType, options.errorType].indexOf(event.data.type) !== -1\n                ),\n                map(event => {\n                    if (options.errorType === event.data.type) {\n                        throw event.data;\n                    }\n\n                    return event.data;\n                }),\n                take(1)\n            )\n            .toPromise();\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { parseUrl } from '../url';\nimport { bindDecorator as bind } from '../utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    AMAZON_PAY_V2 = 'amazonpay',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_ADYENV2 = 'googlepayadyenv2',\n    GOOGLEPAY_AUTHORIZENET = 'googlepayauthorizenet',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_CHECKOUTCOM = 'googlepaycheckoutcom',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n    PAYPALCOMMERCE = 'paypalcommerce',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","\nexport interface ApproveDataOptions {\n    orderID: string;\n}\n\nexport interface ClickDataOptions {\n    fundingSource: string;\n}\n\nexport interface OrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonLayout {\n    vertical = 'vertical',\n    horizontal = 'horizontal',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect' ,\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: StyleButtonLayout;\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55;\n    label?: StyleButtonLabel;\n    tagline?: boolean;\n}\n\nexport interface ButtonsOptions {\n    style?: PaypalButtonStyleOptions;\n    createOrder(): Promise<string>;\n    onApprove(data: ApproveDataOptions): void;\n    onClick(data: ClickDataOptions): void;\n}\n\nexport interface PaypalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PaypalCommerceHostedFieldOption;\n        cvv?: PaypalCommerceHostedFieldOption;\n        expirationDate?: PaypalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PaypalCommerceHostedFields {\n    submit(): { orderId: string };\n    on(eventName: string, callback: (event: PaypalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PaypalCommerceHostedFieldsState {\n    cards: PaypalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PaypalCommerceHostedFieldsFieldData;\n        expirationDate?: PaypalCommerceHostedFieldsFieldData;\n        expirationMonth?: PaypalCommerceHostedFieldsFieldData;\n        expirationYear?: PaypalCommerceHostedFieldsFieldData;\n        cvv?: PaypalCommerceHostedFieldsFieldData;\n        postalCode?: PaypalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PaypalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface PaypalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface PaypalCommerceSDK {\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PaypalCommerceHostedFieldsRenderOptions): Promise<PaypalCommerceHostedFields>;\n    };\n    Buttons({createOrder, onApprove}: ButtonsOptions): {\n        render(id: string): void;\n    };\n}\n\nexport interface PaypalCommerceHostWindow extends Window {\n    paypal?: PaypalCommerceSDK;\n}\n\nexport interface PaypalCommerceInitializationData {\n    clientId: string;\n    merchantId?: string;\n    intent?: 'capture' | 'authorize';\n    isPayPalCreditAvailable?: boolean;\n    isProgressiveOnboardingAvailable?: boolean;\n    clientToken?: string;\n}\n\nexport type DisableFundingType = Array<'credit' | 'card'>;\n\nexport type ComponentsScriptType = Array<'buttons' | 'hosted-fields'>;\n\nexport interface PaypalCommerceScriptOptions {\n    clientId: string;\n    merchantId?: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: 'capture' | 'authorize';\n    disableFunding?: DisableFundingType;\n    components?: ComponentsScriptType;\n}\n\nexport interface PaypalCommerceScriptAttribute {\n    clientToken?: string;\n    partnerAttributionId?: string;\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { AmazonPayV2ButtonParams, AmazonPayV2PaymentProcessor, AmazonPayV2PayOptions, AmazonPayV2Placement } from '../../../payment/strategies/amazon-pay-v2';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { AmazonPayV2ButtonInitializeOptions } from './amazon-pay-v2-button-options';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor\n    ) { }\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId, amazonpay } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" or \"methodId\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        await this._amazonPayV2PaymentProcessor.initialize(paymentMethod);\n        this._walletButton = await this._createSignInButton(containerId, paymentMethod, amazonpay);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private async _createSignInButton(containerId: string, paymentMethod: PaymentMethod, options?: AmazonPayV2ButtonInitializeOptions): Promise<HTMLElement> {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const amazonButtonOptions = options ?? await this._getAmazonPayV2ButtonOptions(paymentMethod);\n\n        this._amazonPayV2PaymentProcessor.createButton(`#${containerId}`, amazonButtonOptions);\n\n        return container;\n    }\n\n    private async _getAmazonPayV2ButtonOptions(paymentMethod: PaymentMethod): Promise<AmazonPayV2ButtonParams> {\n        const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const cart = state.cart.getCart();\n        const { storeProfile: { shopPath } } = state.config.getStoreConfigOrThrow();\n\n        const {\n            config: {\n                merchantId,\n                testMode,\n            },\n            initializationData: {\n                checkoutLanguage,\n                ledgerCurrency,\n                checkoutSessionMethod,\n                extractAmazonCheckoutSessionId,\n            },\n        } = paymentMethod;\n\n        if (!merchantId || !ledgerCurrency || !shopPath) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            merchantId,\n            createCheckoutSession: {\n                url: `${shopPath}/remote-checkout/${paymentMethod.id}/payment-session`,\n                method: checkoutSessionMethod,\n                extractAmazonCheckoutSessionId,\n            },\n            sandbox: !!testMode,\n            ledgerCurrency,\n            checkoutLanguage,\n            productType: cart && getShippableItemsCount(cart) === 0 ?\n                AmazonPayV2PayOptions.PayOnly :\n                AmazonPayV2PayOptions.PayAndShip,\n            placement: AmazonPayV2Placement.Cart,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeError, BraintreePaypalCheckout, BraintreeShippingAddressOverride, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: payload.details.firstName,\n                last_name: payload.details.lastName,\n                phone_number: payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeShippingAddressOverride {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        await this._googlePayPaymentProcessor.initialize(this._getMethodId());\n\n        this._walletButton = this._createSignInButton(containerId);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private async _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n        const cart = this._store.getState().cart.getCartOrThrow();\n        const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n            }\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader.loadPaypal(paymentMethod.config.merchantId)\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart } from '../../../cart';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { ApproveDataOptions, ButtonsOptions, ClickDataOptions, DisableFundingType, PaypalButtonStyleOptions, PaypalCommerceInitializationData, PaypalCommerceRequestSender, PaypalCommerceScriptLoader, PaypalCommerceScriptOptions, StyleButtonColor, StyleButtonLabel, StyleButtonLayout, StyleButtonShape  } from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    providerId?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _formPoster: FormPoster,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        let state = this._store.getState();\n        const {\n            id: providerId,\n            initializationData,\n        } = state.paymentMethods.getPaymentMethodOrThrow(options.methodId);\n        this.providerId = providerId;\n\n        if (!initializationData.clientId) {\n            throw new InvalidArgumentError();\n        }\n\n        state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const cart = state.cart.getCartOrThrow();\n        const paypalOptions = options.paypalCommerce;\n\n        const buttonParams: ButtonsOptions = {\n            onClick: data => this._handleClickButtonProvider(providerId, data),\n            createOrder: () => this._setupPayment(cart.id),\n            onApprove: data => this._tokenizePayment(data),\n        };\n\n        if (paypalOptions && paypalOptions.style) {\n            buttonParams.style = this._validateStyleParams(paypalOptions.style);\n        }\n\n        const paramsScript = this._getParamsScript(initializationData, cart);\n        const paypal = await this._paypalScriptLoader.loadPaypalCommerce({ options: paramsScript }, initializationData.isProgressiveOnboardingAvailable);\n\n        return paypal.Buttons(buttonParams).render(`#${options.containerId}`);\n    }\n\n    deinitialize(): Promise<void> {\n        this.providerId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClickButtonProvider(providerId: string, { fundingSource }: ClickDataOptions): void {\n        this.providerId = fundingSource === 'credit' ? 'paypalcommercecredit' : providerId;\n    }\n\n    private async _setupPayment(cartId: string): Promise<string> {\n        if (!this.providerId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { orderId } = await this._paypalCommerceRequestSender.setupPayment(this.providerId, cartId);\n\n        return orderId;\n    }\n\n    private _tokenizePayment({ orderID }: ApproveDataOptions) {\n        if (!orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: this.providerId,\n            order_id: orderID,\n        });\n    }\n\n    private _validateStyleParams(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const updatedStyle: PaypalButtonStyleOptions = { ...style };\n        const { label, color, layout, shape, height, tagline } = style;\n\n        if (label && !StyleButtonLabel[label]) {\n            delete updatedStyle.label;\n        }\n\n        if (layout && !StyleButtonLayout[layout]) {\n            delete updatedStyle.layout;\n        }\n\n        if (color && !StyleButtonColor[color]) {\n            delete updatedStyle.color;\n        }\n\n        if (shape && !StyleButtonShape[shape]) {\n            delete updatedStyle.shape;\n        }\n\n        if (typeof height === 'number') {\n            updatedStyle.height = height < 25\n                ? 25\n                : (height > 55 ? 55 : height);\n        } else {\n            delete updatedStyle.height;\n        }\n\n        if (typeof tagline !== 'boolean' || (tagline && updatedStyle.layout !== StyleButtonLayout[StyleButtonLayout.horizontal])) {\n            delete updatedStyle.tagline;\n        }\n\n        return updatedStyle;\n    }\n\n    private _getParamsScript(initializationData: PaypalCommerceInitializationData, cart: Cart): PaypalCommerceScriptOptions {\n        const { clientId, intent, isPayPalCreditAvailable, merchantId } = initializationData;\n        const disableFunding: DisableFundingType = [ 'card' ];\n\n        if (!isPayPalCreditAvailable) {\n            disableFunding.push('credit');\n        }\n\n        return {\n            clientId,\n            merchantId,\n            commit: false,\n            currency: cart.currency.code,\n            disableFunding,\n            intent,\n        };\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayAdyenV2Initializer, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayCheckoutcomInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport { PaypalCommerceRequestSender, PaypalCommerceScriptLoader } from '../payment/strategies/paypal-commerce';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\nimport { PaypalCommerceButtonStrategy } from './strategies/paypal-commerce';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_ADYENV2, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAdyenV2Initializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayCheckoutcomInitializer(requestSender)\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALCOMMERCE, () =>\n        new PaypalCommerceButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalCommerceScriptLoader(scriptLoader),\n            formPoster,\n            new PaypalCommerceRequestSender(requestSender)\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.AMAZON_PAY_V2, () =>\n        new AmazonPayV2ButtonStrategy(\n            store,\n            checkoutActionCreator,\n            createAmazonPayV2PaymentProcessor()\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IframeEventListener, IframeEventPoster, IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport const ALLOW_COOKIE_ATTEMPT_INTERVAL = 10 * 60 * 1000;\nexport const IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\nexport const LAST_ALLOW_COOKIE_ATTEMPT_KEY = 'lastAllowCookieAttempt';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post<{ redirectUrl: string }>(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            return Promise.resolve();\n        }\n\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        // It could be possible that the flag is set to true but the browser has\n        // already removed the permission to store third-party cookies. In that\n        // case, we should try to redirect the user again. But we only want to\n        // do it once within a fixed interval. This is to avoid getting into a\n        // redirect loop if the shopper actually doesn't have a valid card\n        // session.\n        this._storage.setItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY, Date.now());\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const lastAttempt = Number(this._storage.getItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY));\n        const canRetry = (\n            (!lastAttempt || Date.now() - lastAttempt > ALLOW_COOKIE_ATTEMPT_INTERVAL) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `, 0);\n        }\n    }\n}\n","import { iframeResizer, isIframeEvent, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport { EmbeddedCheckoutCompleteEvent, EmbeddedCheckoutErrorEvent, EmbeddedCheckoutEvent, EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType, EmbeddedCheckoutFrameErrorEvent, EmbeddedCheckoutFrameLoadedEvent, EmbeddedCheckoutLoadedEvent, EmbeddedCheckoutSignedOutEvent } from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                if (message.type !== key) {\n                    return;\n                }\n\n                const handler = this._messageHandlers[key];\n\n                if (handler) {\n                    (handler as (event: EmbeddedCheckoutEvent) => void).call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { setupContentWindowForIframeResizer, IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    UpdateSubscriptionsRequestedAction |\n    UpdateSubscriptionsSucceededAction |\n    UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    updateSubscriptions(subscriptions: Subscriptions, { timeout }: RequestOptions = {}): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload, TokenizeType } from './googlepay';\n\nexport default class GooglePayAdyenV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type: type as TokenizeType,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'adyen',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizationSpecification, TokenizePayload, TokenizeType } from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress)\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type: type as TokenizeType,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePaymentDataRequest(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(paymentGatewaySpecification, supportedCards);\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo : {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(tokenizationSpecification: TokenizationSpecification, supportedCards: string[]) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: BillingAddressFormat.Full,\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return Promise.resolve({\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        });\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { ContentType } from '../../../common/http-request';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\nimport { CheckoutcomGooglePayToken, CheckoutcomToken } from '../checkoutcom';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayCheckoutcomInitializer implements GooglePayInitializer {\n    private _publishableKey: string = '';\n    private _testMode: boolean = true;\n\n    constructor(\n       private _requestSender: RequestSender\n    ) {}\n\n    async initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        this._publishableKey = paymentMethod.initializationData.checkoutcomkey;\n        this._testMode = !!paymentMethod.config.testMode;\n\n        return this._mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let token;\n        try {\n            token = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        if (!token.signature || !token.protocolVersion || !token.signedMessage) {\n            throw new PaymentMethodFailedError('Unable to parse response from Google Pay.');\n        }\n        const finalToken = await this._convertToken(this._testMode, this._publishableKey, token);\n\n        return {\n            nonce: finalToken,\n            type: 'CreditCard',\n            description: paymentData.paymentMethodData.description,\n            details: {\n                cardType: paymentData.paymentMethodData.info.cardNetwork,\n                lastFour: paymentData.paymentMethodData.info.cardDetails,\n            },\n        };\n    }\n\n    private async _convertToken(testMode: boolean, checkoutcomkey: string, token: CheckoutcomGooglePayToken): Promise<string> {\n        if (!token || !token.protocolVersion) {\n            throw new PaymentMethodFailedError('Unable to parse response from GooglePay.');\n        }\n\n        const checkoutcomToken: CheckoutcomToken = await this._requestCheckoutcomTokenize(testMode, checkoutcomkey, {\n            type: 'googlepay',\n            token_data: token,\n        });\n\n        if (!checkoutcomToken || !checkoutcomToken.token) {\n            throw new PaymentMethodFailedError('Unable to parse response from Checkout.com');\n        }\n\n        return checkoutcomToken.token;\n    }\n\n    private async _requestCheckoutcomTokenize(testMode: boolean, checkoutcomKey: string, data = {}): Promise<CheckoutcomToken> {\n        const TEST_URL: string = 'https://api.sandbox.checkout.com/tokens';\n        const LIVE_URL: string = 'https://api.checkout.com/tokens';\n\n        const url = testMode ? TEST_URL : LIVE_URL;\n\n        const response = await this._requestSender.post(url, {\n            credentials: false,\n            body: data,\n            headers: {\n                'Content-Type': ContentType.Json,\n                Authorization: checkoutcomKey,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return response.body as CheckoutcomToken;\n    }\n\n    private _mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'checkoutltd',\n                        gatewayMerchantId: initializationData.checkoutcomkey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return Promise.resolve({\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            });\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': stripeVersion,\n                        'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to invalid configuration provided for the hosted payment form.');\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(\n        public errors: HostedInputValidateErrorDataMap\n    ) {\n        super([\n            'Unable to proceed due to invalid user input values',\n            ...flatMap(values(errors), fieldErrors => map(fieldErrors, ({ message }) => message)),\n        ].join('. '));\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId: string = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = { async: true, attributes: { 'data-merchant-id': merchantId } };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\nimport { isNil, kebabCase } from 'lodash';\n\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalCommerceHostWindow, PaypalCommerceScriptAttribute, PaypalCommerceScriptOptions, PaypalCommerceSDK } from './paypal-commerce-sdk';\n\ninterface DataPaypalCommerceScript {\n    options: PaypalCommerceScriptOptions;\n    attr?: PaypalCommerceScriptAttribute;\n}\n\nexport default class PaypalCommerceScriptLoader {\n    private _window: PaypalCommerceHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypalCommerce({options, attr}: DataPaypalCommerceScript, isProgressiveOnboardingAvailable?: boolean): Promise<PaypalCommerceSDK> {\n        this._validateParams(options, isProgressiveOnboardingAvailable);\n\n        let attributes: LoadScriptOptions['attributes'] = {};\n        const { disableFunding } = options;\n        const updatedOptions = disableFunding\n            ? { ...options, disableFunding: disableFunding.join(',') }\n            : options;\n\n        const params = (Object.keys(updatedOptions) as Array<keyof PaypalCommerceScriptOptions>)\n            .filter(key => !isNil(options[key]))\n            .map(key => `${kebabCase(key)}=${options[key]}`)\n            .join('&');\n\n        if (attr) {\n            attributes = (Object.keys(attr) as Array<keyof PaypalCommerceScriptAttribute>)\n                .reduce((attributes, key) =>\n                    attr[key] ? { ...attributes, [`data-${kebabCase(key)}`]: attr[key] } : attributes\n                , {});\n        }\n\n        const scriptSrc = `https://www.paypal.com/sdk/js?${params}`;\n\n        await this._scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n\n    _validateParams(options: PaypalCommerceScriptOptions, isProgressiveOnboardingAvailable?: boolean): void {\n        const CLIENT_ID = 'clientId';\n        const MERCHANT_ID = 'merchantId';\n        let param;\n\n        if (!options) {\n            param = 'options';\n        } else if (!options[CLIENT_ID]) {\n            param = CLIENT_ID;\n        } else if (!options[MERCHANT_ID] && !isProgressiveOnboardingAvailable) {\n            param = MERCHANT_ID;\n        }\n\n        if (param) {\n            throw new InvalidArgumentError(`Unable to proceed because \"${param}\" argument in PayPal script is not provided.`);\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\n\nimport { OrderData } from './paypal-commerce-sdk';\n\nexport default class PaypalCommerceRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    async setupPayment(provider: string, cartId: string): Promise<OrderData> {\n        const url = `/api/storefront/payment/${provider}`;\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n        };\n\n        const res = await this._requestSender.post(url, { headers, body });\n\n        return res.body as OrderData;\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    /* eslint-disable-next-line import/no-internal-modules */\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport { CustomerStrategyActionType, CustomerStrategyDeinitializeAction, CustomerStrategyInitializeAction, CustomerStrategySignInAction, CustomerStrategySignOutAction, CustomerStrategyWidgetAction } from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<void> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport { VisaCheckoutAddress, VisaCheckoutInitOptions, VisaCheckoutPaymentSuccessPayload, VisaCheckoutTokenizedPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    ADYENV2_GOOGLEPAY = 'googlepayadyenv2',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    AUTHORIZENET_GOOGLE_PAY = 'googlepayauthorizenet',\n    AMAZONPAYV2 = 'amazonpay',\n    BLUESNAPV2 = 'bluesnapv2',\n    BOLT = 'bolt',\n    CHECKOUTCOM = 'checkoutcom',\n    CREDIT_CARD = 'creditcard',\n    CHECKOUTCOM_GOOGLE_PAY = 'googlepaycheckoutcom',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    KLARNAV2 = 'klarnav2',\n    LAYBUY = 'laybuy',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    PAYPAL_COMMERCE = 'paypalcommerce',\n    PAYPAL_COMMERCE_CREDIT = 'paypalcommercecredit',\n    /**\n     * @alpha\n     */\n    PAYPAL_COMMERCE_CREDIT_CARD = 'paypalcommercecreditcards',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    SEZZLE = 'sezzle',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { ChasePayHostWindow, JPMC } from './chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayV2PaymentProcessor, AmazonPayV2PayOptions, AmazonPayV2Placement } from '../../../payment/strategies/amazon-pay-v2';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class AmazonPayV2CustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor\n    ) {}\n\n    async initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, amazonpay } = options;\n\n        if (!methodId || !amazonpay) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.methodId\" or \"options.amazonpay\" argument is not provided.');\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        await this._amazonPayV2PaymentProcessor.initialize(paymentMethod);\n        this._walletButton = this._createSignInButton(amazonpay.container, methodId);\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Amazon, the shopper must click on \"Amazon Pay\" button.'\n        );\n    }\n\n    async signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        await this._amazonPayV2PaymentProcessor.signout();\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string, methodId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            config: {\n                merchantId,\n                testMode,\n            },\n            initializationData: {\n                checkoutLanguage,\n                ledgerCurrency,\n                checkoutSessionMethod,\n                extractAmazonCheckoutSessionId,\n            },\n        } = paymentMethod;\n\n        if (!merchantId) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid merchant ID.');\n        }\n\n        const amazonButtonOptions = {\n            merchantId,\n            sandbox: !!testMode,\n            checkoutLanguage,\n            ledgerCurrency,\n            productType: cart && getShippableItemsCount(cart) === 0 ?\n                AmazonPayV2PayOptions.PayOnly :\n                AmazonPayV2PayOptions.PayAndShip,\n            createCheckoutSession: {\n                method: checkoutSessionMethod,\n                url: `${config.storeProfile.shopPath}/remote-checkout/${methodId}/payment-session`,\n                extractAmazonCheckoutSessionId,\n            },\n            placement: AmazonPayV2Placement.Checkout,\n        };\n\n        this._amazonPayV2PaymentProcessor.createButton(`#${containerId}`, amazonButtonOptions);\n\n        return container;\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutPaymentSuccessPayload, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response<any>> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepayadyenv2' && options.googlepayadyenv2) {\n            return options.googlepayadyenv2;\n        }\n\n        if (options.methodId === 'googlepayauthorizenet' && options.googlepayauthorizenet) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaycheckoutcom' && options.googlepaycheckoutcom) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    @bind\n    private async _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n        const cart = this._store.getState().cart.getCartOrThrow();\n        const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n            }\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { isNil, omitBy } from 'lodash';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport interface SubmitOrderRequestOptions extends RequestOptions {\n    headers?: {\n        checkoutVariant?: string;\n    };\n}\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { headers, timeout }: SubmitOrderRequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, {\n            body,\n            headers: omitBy({\n                'X-Checkout-Variant': headers && headers.checkoutVariant,\n                'X-Checkout-SDK-Version': LIBRARY_VERSION,\n            }, isNil),\n            timeout,\n        });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam check. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const variantIdentificationToken = state.config.getVariantIdentificationToken();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (checkout.shouldExecuteSpamCheck) {\n                    throw new SpamProtectionNotCompletedError();\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(\n                            this._mapToOrderRequestBody(\n                                payload,\n                                checkout.customerMessage,\n                                externalSource\n                            ),\n                            {\n                                ...options,\n                                headers: {\n                                    checkoutVariant: variantIdentificationToken,\n                                },\n                            }))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from '../spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport { PaymentStrategyActionType, PaymentStrategyDeinitializeAction, PaymentStrategyExecuteAction, PaymentStrategyFinalizeAction, PaymentStrategyInitializeAction, PaymentStrategyWidgetAction } from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n        const meta = { methodId: payment.methodId };\n\n        return store => concat(\n            this._spamProtectionActionCreator.execute()(store),\n            of(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta)),\n            defer(() => {\n                const state = store.getState();\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                return strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta))\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .initialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }))\n        );\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .deinitialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }))\n        );\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() => createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta))\n        );\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { StandardError } from '../../error/errors';\n\nexport default class UnexpectedDetachmentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the required element is unexpectedly detached from the page.');\n\n        this.name = 'UnexpectedDetachmentError';\n        this.type = 'unexpected_detachment';\n    }\n}\n","import { CancellablePromise } from '../utility';\n\nimport { UnexpectedDetachmentError } from './errors';\nimport { MutationObserverFactory } from './mutation-observer';\n\nexport default class DetachmentObserver {\n    constructor(\n        private _mutationObserver: MutationObserverFactory\n    ) {}\n\n    async ensurePresence<T>(targets: Node[], promise: Promise<T>): Promise<T> {\n        const cancellable = new CancellablePromise(promise);\n\n        const observer = this._mutationObserver.create(mutationsList => {\n            mutationsList.forEach(mutation => {\n                const removedTargets = Array.from(mutation.removedNodes)\n                    .filter(node =>\n                        targets.some(target =>\n                            node === target || node.contains(target)\n                        )\n                    );\n\n                if (removedTargets.length === 0) {\n                    return;\n                }\n\n                cancellable.cancel(new UnexpectedDetachmentError());\n            });\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n\n        try {\n            const output = await cancellable.promise;\n\n            observer.disconnect();\n\n            return output;\n        } catch (error) {\n            observer.disconnect();\n\n            throw error;\n        }\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection challenge. Please try again.');\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('Please complete our human verification challenge and try again.');\n\n        this.name = 'CardingProtectionChallengeNotCompletedError';\n        this.type = 'carding_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class CardingProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to verify that you are not a robot. Please try again.');\n\n        this.name = 'CardingProtectionFailedError';\n        this.type = 'carding_protection_failed';\n    }\n}\n","import { switchMap, take } from 'rxjs/operators';\n\nimport { RequestError } from '../common/error/errors';\nimport { PaymentAdditionalAction } from '../payment';\n\nimport { CardingProtectionChallengeNotCompletedError, CardingProtectionFailedError, SpamProtectionChallengeNotCompletedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\n\nexport default class PaymentHumanVerificationHandler {\n\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    async handle(error: Error): Promise<PaymentAdditionalAction> {\n        if (!this._isPaymentHumanVerificationRequest(error)) {\n            throw error;\n        }\n\n        await this._initialize(error.body.additional_action_required.data.key);\n\n        return this._googleRecaptcha.execute()\n            .pipe(take(1))\n            .pipe(switchMap(async ({ error, token }) => {\n                if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                    throw new CardingProtectionChallengeNotCompletedError();\n                }\n\n                if (error || !token) {\n                    throw new CardingProtectionFailedError();\n                }\n\n                return {\n                    type: 'recaptcha_v2_verification',\n                    data: {\n                        human_verification_token: token,\n                    },\n                };\n            })).toPromise();\n    }\n\n    private _initialize(recaptchaSitekey: string): Promise<void> {\n        const cardingProtectionElementId = 'cardingProtectionContainer';\n\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\n        }\n\n        cardingProtectionElement = document.createElement('div');\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\n        document.body.appendChild(cardingProtectionElement);\n\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\n    }\n\n    private _isPaymentHumanVerificationRequest(error: Error): error is RequestError {\n        const { additional_action_required, status } = (error as RequestError).body || {};\n\n        return status === 'additional_action_required'\n            && additional_action_required\n            && additional_action_required.type === 'recaptcha_v2_verification';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, of, throwError, Observable, Subject } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError, SpamProtectionNotLoadedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nconst TIMEOUT = 7000;\nconst RETRY_INTERVAL = 250;\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => Subject<RecaptchaResult>;\n    private _widgetId?: number;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {\n        this._memoized = memoize((recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n            const event$ = new Subject<RecaptchaResult>();\n\n            if (!container) {\n                throw new Error();\n            }\n\n            this._widgetId = recaptcha.render(container.id, {\n                sitekey,\n                size: 'invisible',\n                callback: () => {\n                    event$.next({\n                        token: recaptcha.getResponse(this._widgetId),\n                    });\n                    recaptcha.reset(this._widgetId);\n                },\n                'error-callback': () => {\n                    event$.next({\n                        error: new SpamProtectionFailedError(),\n                    });\n                },\n            });\n\n            return event$;\n        }, { isEqual: (a, b) => a === b });\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                this._event$ = this._memoized(recaptcha, sitekey, document.getElementById(containerId));\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        return defer(() => {\n            const event$ = this._event$;\n            const recaptcha = this._recaptcha;\n\n            if (!event$ || !recaptcha) {\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n            }\n\n            return defer(() => {\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\n            })\n                .pipe(\n                    retryWhen(errors => errors.pipe(\n                        delay(RETRY_INTERVAL),\n                        switchMap((error, index) =>\n                            index < MAX_RETRIES ? of(error) : throwError(error)\n                        )\n                    )),\n                    switchMap(element => {\n                        this._watchRecaptchaChallengeWindow(event$, element);\n                        recaptcha.execute(this._widgetId);\n\n                        return event$;\n                    }),\n                    catchError(error => of({ error }))\n                );\n        });\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionChallengeNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { DetachmentObserver } from '../common/dom';\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { parseUrl } from '../common/url';\nimport { CardInstrument } from '../payment/instrument';\n\nimport { InvalidHostedFormConfigError, InvalidHostedFormError, InvalidHostedFormValueError } from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport { HostedInputEventMap, HostedInputEventType, HostedInputSubmitErrorEvent, HostedInputValidateEvent } from './iframe-content';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _detachmentObserver: DetachmentObserver,\n        private _cardInstrument?: CardInstrument\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        this._iframe.src = `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}`;\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    async attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError('Unable to proceed because the provided container ID is not valid.');\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        const promise = fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post({\n                        type: HostedFieldEventType.AttachRequested,\n                        payload: {\n                            accessibilityLabel: this._accessibilityLabel,\n                            cardInstrument: this._cardInstrument,\n                            fontUrls: this._getFontUrls(),\n                            placeholder: this._placeholder,\n                            styles: this._styles,\n                            type: this._type,\n                        },\n                    }, {\n                        successType: HostedInputEventType.AttachSucceeded,\n                        errorType: HostedInputEventType.AttachFailed,\n                    });\n                }),\n                take(1)\n            ).toPromise();\n\n        await this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData\n    ): Promise<void> {\n        try {\n            const promise = this._eventPoster.post({\n                type: HostedFieldEventType.SubmitRequested,\n                payload: { fields, data },\n            }, {\n                successType: HostedInputEventType.SubmitSucceeded,\n                errorType: HostedInputEventType.SubmitFailed,\n            });\n\n            await this._detachmentObserver.ensurePresence([this._iframe], promise);\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async validateForm(): Promise<void> {\n        const promise = this._eventPoster.post<HostedInputValidateEvent>({\n            type: HostedFieldEventType.ValidateRequested,\n        }, {\n            successType: HostedInputEventType.Validated,\n        });\n\n        const { payload } = await this._detachmentObserver.ensurePresence([this._iframe], promise);\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice.call(links)\n            .filter(link => parseUrl(link.href).hostname === hostname)\n            .filter(link => values(this._styles)\n                .map(style => style && style.fontFamily)\n                .filter((family): family is string => typeof family === 'string')\n                .some(family => family.split(/,\\s/).some(name => link.href.indexOf(name.replace(' ', '+')) !== -1))\n            )\n            .map(link => link.href);\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { OrderPaymentRequestBody } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport HostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport { HostedInputEnterEvent, HostedInputEventMap, HostedInputEventType } from './iframe-content';\n\ntype HostedFormEventCallbacks = Pick<HostedFormOptions, 'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onEnter' | 'onValidate'>;\n\nexport default class HostedForm {\n    private _bin?: string;\n    private _cardType?: string;\n\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _payloadTransformer: HostedFormOrderDataTransformer,\n        private _eventCallbacks: HostedFormEventCallbacks,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler\n    ) {\n        const { onBlur = noop, onCardTypeChange = noop, onFocus = noop, onValidate = noop } = this._eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) => onBlur(payload));\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) => onCardTypeChange(payload));\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) => onFocus(payload));\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) => onValidate(payload));\n        this._eventListener.addListener(HostedInputEventType.Entered, this._handleEnter);\n\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) => this._cardType = payload.cardType);\n        this._eventListener.addListener(HostedInputEventType.BinChanged, ({ payload }) => this._bin = payload.bin);\n    }\n\n    getBin(): string | undefined {\n        return this._bin;\n    }\n\n    getCardType(): string | undefined {\n        return this._cardType;\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map(otherField => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach(field => {\n            field.detach();\n        });\n    }\n\n    async submit(payload: OrderPaymentRequestBody): Promise<void> {\n        try {\n            return await this._getFirstField().submitForm(\n                this._fields.map(field => field.getType()),\n                this._payloadTransformer.transform(payload)\n            );\n        } catch (error) {\n            const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n            return await this._getFirstField().submitForm(\n                this._fields.map(field => field.getType()),\n                this._payloadTransformer.transform(payload, additionalAction)\n            );\n        }\n    }\n\n    async validate(): Promise<void> {\n        return await this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError('Unable to proceed because the payment form has no field defined.');\n        }\n\n        return field;\n    }\n\n    private _handleEnter: (event: HostedInputEnterEvent) => Promise<void> = async ({ payload }) => {\n        try {\n            await this.validate();\n        } catch (error) {\n            // Catch form validation error because we want to trigger `onEnter`\n            // irrespective of the validation result.\n            if (error.name !== 'InvalidHostedFormValueError') {\n                throw error;\n            }\n        }\n\n        const { onEnter = noop } = this._eventCallbacks;\n\n        onEnter(payload);\n    };\n}\n","import { omit } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { OrderPaymentRequestBody } from '../order';\nimport { isVaultedInstrument, HostedCreditCardInstrument, PaymentAdditionalAction } from '../payment';\n\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport default class HostedFormOrderDataTransformer {\n    constructor(\n        private _store: ReadableCheckoutStore\n    ) {}\n\n    transform(payload: OrderPaymentRequestBody, additionalAction?: PaymentAdditionalAction): HostedFormOrderData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const order = state.order.getOrder();\n        const orderMeta = state.order.getOrderMeta();\n        const payment = omit(payload.paymentData, 'ccExpiry', 'ccName', 'ccNumber', 'ccCvv') as HostedCreditCardInstrument;\n        const paymentMethod = state.paymentMethods.getPaymentMethod(payload.methodId, payload.gatewayId);\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const authToken = instrumentMeta && payment && isVaultedInstrument(payment) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment,\n            paymentMethod,\n            paymentMethodMeta,\n        };\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\nimport { pick } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { DetachmentObserver, MutationObserverFactory } from '../common/dom';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { CardInstrument } from '../payment/instrument';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport HostedFormOptions, { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\n\nexport default class HostedFormFactory {\n    constructor(\n        private _store: ReadableCheckoutStore\n    ) {}\n\n    create(host: string, options: HostedFormOptions): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields as HostedStoredCardFieldOptionsMap & HostedCardFieldOptionsMap;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new DetachmentObserver(new MutationObserverFactory()),\n                    'instrumentId' in fieldOptions ?\n                        this._getCardInstrument(fieldOptions.instrumentId) :\n                        undefined\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            new HostedFormOrderDataTransformer(this._store),\n            pick(options, 'onBlur', 'onEnter', 'onFocus', 'onCardTypeChange', 'onValidate'),\n            new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader()))\n        );\n    }\n\n    private _getCardInstrument(instrumentId: string): CardInstrument {\n        const { instruments: { getCardInstrument } } = this._store.getState();\n        const instrument = getCardInstrument(instrumentId);\n\n        if (!instrument) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\n        }\n\n        return instrument;\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha,\n        private _requestSender: SpamProtectionRequestSender\n    ) {}\n\n    initialize(options?: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\n            defer(async () => {\n                const spamProtectionElementId = options ? options.containerId : 'spamProtectionContainer';\n\n                if (!options && !document.getElementById(spamProtectionElementId)) {\n                    const spamProtectionElement = document.createElement('div');\n                    spamProtectionElement.setAttribute('id', spamProtectionElementId);\n                    document.body.appendChild(spamProtectionElement);\n                }\n\n                const state = store.getState();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n                await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\n\n                return createAction(SpamProtectionActionType.InitializeSucceeded);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(SpamProtectionActionType.InitializeFailed, error))\n        );\n    }\n\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const { checkout } = store.getState();\n            const { id: checkoutId, shouldExecuteSpamCheck } = checkout.getCheckoutOrThrow();\n\n            if (!shouldExecuteSpamCheck) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n                this.initialize()(store),\n                this._googleRecaptcha.execute()\n                    .pipe(take(1))\n                    .pipe(switchMap(async ({ error, token }) => {\n                        if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                            throw error;\n                        }\n\n                        if (error || !token) {\n                            throw new SpamProtectionFailedError();\n                        }\n\n                        const { body } = await this._requestSender.validate(checkoutId, token);\n\n                        return createAction(SpamProtectionActionType.ExecuteSucceeded, body);\n                    }))\n            ).pipe(\n                catchError(error => throwErrorAction(SpamProtectionActionType.ExecuteFailed, error))\n            );\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class SpamProtectionRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    validate(checkoutId: string, token: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: { token }, headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(\n        private _storeCreditRequestSender: StoreCreditRequestSender\n    ) {}\n\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n            defer(async () => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { body } = await (useStoreCredit ?\n                    this._storeCreditRequestSender.applyStoreCredit(checkout.id, options) :\n                    this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport Payment, { FormattedHostedInstrument, FormattedPayload, FormattedVaultedInstrument } from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\ninterface InitializeOffsitePaymentSettings {\n    methodId: string;\n    gatewayId?: string;\n    instrumentId?: string;\n    target?: string;\n    promise?: Promise<undefined>;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n\ntype InitializeOffsitePayment = (settings: InitializeOffsitePaymentSettings)\n    => ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors>;\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            defer(async () => {\n                try {\n                    return await this._paymentRequestSender.submitPayment(\n                        this._paymentRequestTransformer.transform(payment, store.getState())\n                    );\n                } catch (error) {\n                    const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n                    return await this._paymentRequestSender.submitPayment(\n                        this._paymentRequestTransformer.transform({ ...payment, additionalAction }, store.getState())\n                    );\n                }\n            })\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment: InitializeOffsitePayment = ({\n        methodId,\n        gatewayId,\n        instrumentId,\n        target,\n        promise,\n        shouldSaveInstrument,\n        shouldSetAsDefaultInstrument,\n    }) => {\n        return store => {\n            let paymentData: FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument> | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = {\n                    formattedPayload: {\n                        vault_payment_instrument: shouldSaveInstrument,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                };\n            }\n\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId, paymentData }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race([this._paymentRequestSender.initializeOffsitePayment(payload, target), promise].filter(Boolean))\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    };\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry, RegistryOptions } from '../common/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n\n        const cacheToken = [paymentMethod.gateway, paymentMethod.id]\n            .filter(value => value !== undefined && value !== null)\n            .join('-');\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        if (paymentMethod.gateway === 'klarna') {\n            return PaymentStrategyType.KLARNAV2;\n        }\n\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen' || paymentMethod.gateway === 'barclaycard') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    return {\n        color_depth: screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language: navigator.language || (navigator as any).userLanguage,\n        screen_height: screen.height,\n        screen_width: screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","export enum AdyenActionType {\n    /*\n    * The payment qualifies for 3D Secure 2, and will go through either the frictionless\n    * or the challenge flow.\n    * */\n    ThreeDS2Fingerprint = 'threeDS2Fingerprint',\n\n    /*\n    * The payment qualifies for 3D Secure 2, and the issuer is initiating a challenge flow.\n    * */\n    ThreeDS2Challenge = 'threeDS2Challenge',\n\n    /*\n    * We will initiate a 3D Secure 1 fallback, because the issuer does not support 3D Secure 2.\n    * */\n    Redirect = 'redirect',\n\n    /*\n    * The Component presents the QR code and calls the onAdditionalDetails event.\n    * */\n    QRCode = 'qrCode',\n\n    /*\n    * The Component displays the voucher which the shopper uses to complete the payment.\n    * */\n    Voucher = 'voucher',\n}\n\nexport enum AdyenComponentType {\n    SecuredFields = 'securedfields',\n}\n\nexport enum AdyenPaymentMethodType {\n    ACH = 'ach',\n    AliPay = 'alipay',\n    Bancontact = 'bcmc',\n    CreditCard = 'scheme',\n    iDEAL = 'ideal',\n    GiroPay = 'giropay',\n    GooglePay = 'paywithgoogle',\n    SEPA = 'sepadirectdebit',\n    Sofort = 'directEbanking',\n    Vipps = 'vipps',\n    WeChatPayQR = 'wechatpayQR',\n}\n\nexport enum HTTPMethod {\n    POST = 'POST',\n}\n\nexport enum ResultCode {\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n}\n\ninterface AdyenPaymentMethodState {\n    type: string;\n}\n\ninterface CardDataPaymentMethodState {\n    paymentMethod: CardPaymentMethodState;\n}\n\ninterface WechatDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\ninterface CardPaymentMethodState extends AdyenPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName?: string;\n}\n\nexport interface AdyenAction {\n    method: HTTPMethod;\n\n    /**\n     * Value that you need to submit in your /payments/details request when handling\n     * the redirect.\n     */\n    paymentData: string;\n\n    paymentMethodType: AdyenPaymentMethodType;\n\n    /*\n     * The Component performs additional front-end actions depending on the action.type.\n     * Your next steps depend on the type of action that the Component performs.\n     */\n    type: AdyenActionType;\n\n    /**\n     * The HTTP request method that you should use. After the shopper completes the payment,\n     * they will be redirected back to your returnURL using the same method.\n     */\n    url: string;\n}\n\nexport interface AdyenAdditionalAction {\n    resultCode: ResultCode;\n    action: string;\n}\n\nexport interface AdyenAdditionalActionCallbacks {\n    /**\n     * A callback that gets called before adyen component is loaded\n     */\n    onBeforeLoad?(shopperInteraction?: boolean): void;\n\n    /**\n     * A callback that gets called when adyen component is loaded\n     */\n    onLoad?(cancel?: () => void): void;\n\n    /**\n     * A callback that gets called when adyen component verification\n     * is completed\n     */\n    onComplete?(): void;\n}\n\nexport interface AdyenAdditionalActionErrorResponse {\n    provider_data: AdyenAdditionalAction;\n    errors: [\n        {\n            code: string;\n        }\n    ];\n}\n\nexport interface AdyenAdditionalActionOptions extends AdyenAdditionalActionCallbacks {\n    /**\n     * The location to insert the additional action component.\n     */\n    containerId: string;\n}\n\nexport interface AdyenAdditionalActionState {\n    data: AdyenAdditionalAction;\n    isValid?: boolean;\n}\n\nexport interface AdyenBaseCardComponentOptions {\n    /**\n     * Array of card brands that will be recognized by the component.\n     *\n     */\n    brands?: string[];\n\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: StyleOptions;\n}\n\nexport interface AdyenComponentEvents {\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenComponentState, component: AdyenComponent): void;\n\n    /**\n     * Called in case of an invalid card number, invalid expiry date, or\n     *  incomplete field. Called again when errors are cleared.\n     */\n    onError?(state: AdyenComponentState, component: AdyenComponent): void;\n}\n\nexport interface AdyenClient {\n    create(type: string, componentOptions?: AdyenComponentOptions): AdyenComponent;\n\n    createFromAction(action: AdyenAction, componentOptions?: ThreeDS2DeviceFingerprintComponentOptions | ThreeDS2ChallengeComponentOptions ): AdyenComponent;\n}\n\nexport interface AdyenComponent {\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey?: string;\n\n    /*\n     * The Client Key of your Adyen account.\n     */\n    clientKey?: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: CardState, component?: AdyenComponent): void;\n\n    onAdditionalDetails?(state: CardState, component?: AdyenComponent): void;\n}\n\nexport interface AdyenPlaceholderData {\n    holderName?: string;\n    billingAddress?: {\n        street: string;\n        houseNumberOrName: string;\n        postalCode: string;\n        city: string;\n        stateOrProvince: string;\n        country: string;\n    };\n}\n\nexport interface AdyenCreditCardComponentOptions extends AdyenBaseCardComponentOptions, AdyenComponentEvents {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Information to prefill fields.\n     */\n    data?: AdyenPlaceholderData;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n}\n\nexport interface AdyenCustomCardComponentOptions extends AdyenBaseCardComponentOptions, AdyenComponentEvents {\n    /**\n     * Specify aria attributes for the input fields for web accessibility.\n     */\n    ariaLabels?: CustomCardAriaLabels;\n\n    /**\n     * Automatically shift the focus from date field to the CVC field.\n     */\n    autofocus?: boolean;\n}\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface AdyenHostWindow extends Window {\n    AdyenCheckout?: new(configuration: AdyenConfiguration) => AdyenClient;\n}\n\nexport interface AdyenIdealComponentOptions {\n    /**\n     * Optional. Set to **false** to remove the bank logos from the iDEAL form.\n     */\n    showImage?: boolean;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface AdyenThreeDS2Options extends AdyenAdditionalActionCallbacks {\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CardState {\n    data: CardDataPaymentMethodState;\n    isValid?: boolean;\n}\n\nexport interface WechatState {\n    data: WechatDataPaymentMethodState;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\ninterface AccountDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\nexport interface AccountState {\n    data: AccountDataPaymentMethodState;\n}\n\nexport interface CssProperties {\n    background?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface CustomCardAriaLabel {\n    label?: string;\n    iframeTitle?: string;\n}\n\nexport interface CustomCardAriaLabels {\n    lang?: string;\n    encryptedCardNumber?: CustomCardAriaLabel;\n    encryptedExpiryDate?: CustomCardAriaLabel;\n    encryptedSecurityCode?: CustomCardAriaLabel;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface PaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface PaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: PaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: PaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface RecurringDetail extends PaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface StyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface ThreeDS2ChallengeComponentOptions {\n    size?: string;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport type AdyenComponentState = (\n    CardState | WechatState\n);\n\nexport type AdyenComponentOptions = (\n    AdyenCreditCardComponentOptions | AdyenIdealComponentOptions | AdyenCustomCardComponentOptions\n);\n\nexport function isCardState(param: any): param is CardState {\n    return param && typeof param.data.paymentMethod.encryptedSecurityCode === 'string' ||\n        typeof param.data.paymentMethod.encryptedExpiryMonth === 'string';\n}\n\nexport function isAccountState(param: any): param is AccountState {\n    const bankSupported = ['ideal', 'sepadirectdebit', 'directEbanking', 'giropay'];\n\n    return bankSupported.indexOf(param.data.paymentMethod.type) !== -1;\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { some } from 'lodash';\n\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { getBrowserInfo } from '../../../common/browser-info';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { isAccountState, isCardState, AdyenAction, AdyenActionType, AdyenAdditionalAction, AdyenAdditionalActionState, AdyenClient, AdyenComponent, AdyenComponentState, AdyenComponentType, AdyenError, AdyenPaymentMethodType, AdyenPlaceholderData } from './adyenv2';\nimport AdyenV2PaymentInitializeOptions from './adyenv2-initialize-options';\nimport AdyenV2ScriptLoader from './adyenv2-script-loader';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenClient?: AdyenClient;\n    private _cardVerificationComponent?: AdyenComponent;\n    private _componentState?: AdyenComponentState;\n    private _paymentComponent?: AdyenComponent;\n    private _paymentInitializeOptions?: AdyenV2PaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: AdyenV2ScriptLoader,\n        private _locale: string\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.adyenv2\" argument is not provided.');\n        }\n\n        this._paymentInitializeOptions = adyenv2;\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethodOrThrow(options.methodId);\n        const clientSideAuthentication = {\n            key: '',\n            value: '',\n        };\n\n        if (paymentMethod.initializationData.originKey) {\n            clientSideAuthentication.key = 'originKey';\n            clientSideAuthentication.value = paymentMethod.initializationData.originKey;\n        } else {\n            clientSideAuthentication.key = 'clientKey';\n            clientSideAuthentication.value = paymentMethod.initializationData.clientKey;\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment:  paymentMethod.initializationData.environment,\n            locale: this._locale,\n            [clientSideAuthentication.key]: clientSideAuthentication.value,\n            paymentMethodsResponse: paymentMethod.initializationData.paymentMethodsResponse,\n        });\n\n        this._paymentComponent = await this._mountPaymentComponent(paymentMethod);\n\n        if (paymentMethod.method === AdyenPaymentMethodType.CreditCard ||\n            paymentMethod.method === AdyenPaymentMethodType.Bancontact) {\n            this._cardVerificationComponent = await this._mountCardVerificationComponent();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n        const shouldSetAsDefaultInstrument = paymentData && (paymentData as HostedInstrument).shouldSetAsDefaultInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                const componentState = this._componentState;\n\n                if (!componentState) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    let bigpayToken = {};\n                    if (isCardState(componentState)) {\n                        const { encryptedCardNumber, encryptedSecurityCode, encryptedExpiryMonth, encryptedExpiryYear } = componentState.data.paymentMethod;\n\n                        bigpayToken = {\n                            credit_card_number_confirmation: encryptedCardNumber,\n                            expiry_month: encryptedExpiryMonth,\n                            expiry_year: encryptedExpiryYear,\n                            verification_value: encryptedSecurityCode,\n                        };\n                    }\n\n                    if (isCardState(componentState) || isAccountState(componentState)) {\n                        return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                            ...payment,\n                            paymentData: {\n                                formattedPayload: {\n                                    bigpay_token: {\n                                        ...bigpayToken,\n                                        token: paymentData.instrumentId,\n                                    },\n                                    browser_info: getBrowserInfo(),\n                                    set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                                },\n                            },\n                        }));\n                    }\n                }\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                    methodId: payment.methodId,\n                    paymentData: {\n                        formattedPayload: {\n                            credit_card_token: {\n                                token: JSON.stringify({\n                                    ...componentState.data.paymentMethod,\n                                    origin: window.location.origin,\n                                }),\n                            },\n                            browser_info: getBrowserInfo(),\n                            vault_payment_instrument: shouldSaveInstrument || null,\n                            set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                        },\n                    },\n                }));\n            })\n            .catch(error => this._processAdditionalAction(error, shouldSaveInstrument, shouldSetAsDefaultInstrument));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._paymentComponent) {\n            this._paymentComponent.unmount();\n            this._paymentComponent = undefined;\n        }\n\n        if (this._cardVerificationComponent) {\n            this._cardVerificationComponent.unmount();\n            this._cardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n\n    private _getPaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._paymentInitializeOptions) {\n            throw new InvalidArgumentError('\"options.adyenv2\" argument was not provided during initialization.');\n        }\n\n        return this._paymentInitializeOptions;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { widgetSize } = this._getPaymentInitializeOptions().threeDS2Options;\n\n        if (!widgetSize) {\n            return '05';\n        }\n\n        return widgetSize;\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const { threeDS2ContainerId, additionalActionOptions } = this._getPaymentInitializeOptions();\n            const { onBeforeLoad, containerId, onLoad, onComplete } = additionalActionOptions;\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    if (onComplete) {\n                        onComplete();\n                    }\n\n                    resolve(paymentPayload);\n                },\n                size: this._getThreeDS2ChallengeWidgetSize(),\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            if (onBeforeLoad) {\n                onBeforeLoad(adyenAction.type === AdyenActionType.ThreeDS2Challenge ||\n                    adyenAction.type === AdyenActionType.QRCode);\n            }\n\n            additionalActionComponent.mount(`#${containerId || threeDS2ContainerId}`);\n\n            if (onLoad) {\n                onLoad(() => {\n                    reject(new PaymentMethodCancelledError());\n                    additionalActionComponent.unmount();\n                });\n            }\n        });\n    }\n\n    private _mapAdyenPlaceholderData(billingAddress?: BillingAddress): AdyenPlaceholderData {\n        if (!billingAddress) {\n            return {};\n        }\n\n        const {\n            firstName,\n            lastName,\n            address1: street,\n            address2: houseNumberOrName,\n            postalCode,\n            city,\n            stateOrProvinceCode: stateOrProvince,\n            countryCode: country,\n        } = billingAddress;\n\n        return {\n            holderName: `${firstName} ${lastName}`,\n            billingAddress: {\n                street,\n                houseNumberOrName,\n                postalCode,\n                city,\n                stateOrProvince,\n                country,\n            },\n        };\n    }\n\n    private _mountCardVerificationComponent(): Promise<AdyenComponent> {\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n        let cardVerificationComponent: AdyenComponent;\n\n        return new Promise((resolve, reject) => {\n            if (adyenv2.cardVerificationContainerId) {\n                cardVerificationComponent = adyenClient.create(AdyenComponentType.SecuredFields, {\n                    ...adyenv2.options,\n                    onChange: componentState => this._updateComponentState(componentState),\n                    onError: componentState => this._updateComponentState(componentState),\n                });\n\n                try {\n                    cardVerificationComponent.mount(`#${adyenv2.cardVerificationContainerId}`);\n                } catch (error) {\n                    reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                }\n            }\n\n            resolve(cardVerificationComponent);\n        });\n    }\n\n    private _mountPaymentComponent(paymentMethod: PaymentMethod): Promise<AdyenComponent> {\n        let paymentComponent: AdyenComponent;\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n\n        return new Promise((resolve, reject) => {\n            switch (paymentMethod.method) {\n                case AdyenPaymentMethodType.CreditCard:\n                case AdyenPaymentMethodType.ACH:\n                case AdyenPaymentMethodType.Bancontact:\n                    const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n                    paymentComponent = adyenClient.create(paymentMethod.method, {\n                        ...adyenv2.options,\n                        onChange: componentState => this._updateComponentState(componentState),\n                        data: this._mapAdyenPlaceholderData(billingAddress),\n                    });\n\n                    try {\n                        paymentComponent.mount(`#${adyenv2.containerId}`);\n                    } catch (error) {\n                        reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                    }\n\n                    break;\n\n                case AdyenPaymentMethodType.iDEAL:\n                case AdyenPaymentMethodType.SEPA:\n                    if (!adyenv2.hasVaultedInstruments) {\n                        paymentComponent = adyenClient.create(paymentMethod.method, {\n                            ...adyenv2.options,\n                            onChange: componentState => this._updateComponentState(componentState),\n                        });\n\n                        try {\n                            paymentComponent.mount(`#${adyenv2.containerId}`);\n                        } catch (error) {\n                            reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                        }\n\n                    } else {\n                        this._updateComponentState({\n                            data: {\n                                paymentMethod: {\n                                    type: paymentMethod.method,\n                                },\n                            },\n                        });\n                    }\n                    break;\n\n                case AdyenPaymentMethodType.AliPay:\n                case AdyenPaymentMethodType.GiroPay:\n                case AdyenPaymentMethodType.Sofort:\n                case AdyenPaymentMethodType.Vipps:\n                case AdyenPaymentMethodType.WeChatPayQR:\n                    this._updateComponentState({\n                        data: {\n                            paymentMethod: {\n                                type: paymentMethod.method,\n                            },\n                        },\n                    });\n            }\n\n            resolve(paymentComponent);\n        });\n    }\n\n    private async _processAdditionalAction(error: unknown, shouldSaveInstrument?: boolean, shouldSetAsDefaultInstrument?: boolean): Promise<InternalCheckoutSelectors> {\n        if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'additional_action_required'})) {\n            return Promise.reject(error);\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            return await this._store.dispatch(this._paymentActionCreator.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                },\n            }));\n        } catch (error) {\n            return this._processAdditionalAction(error, shouldSaveInstrument, shouldSetAsDefaultInstrument);\n        }\n    }\n\n    private _updateComponentState(componentState: AdyenComponentState) {\n        this._componentState = componentState;\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { AdyenClient, AdyenConfiguration, AdyenHostWindow } from './adyenv2';\n\nexport default class AdyenV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenHostWindow = window\n    ) { }\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.10.1/adyen.css`),\n            this._scriptLoader.loadScript(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.10.1/adyen.js`),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return new this._window.AdyenCheckout(configuration);\n    }\n}\n","import { LineItemCategory } from '../../../cart';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderIncludes, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","import { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey: string = '', testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this._window.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nimport { Affirm, AffirmHostWindow } from './affirm';\n\ninterface AffirmConfig {\n    public_api_key: string;\n    script: string;\n}\n\nexport default function loadAffirmJS(apiKey: string, scriptURL: string) {\n    const _AFFIRM_CONFIG: AffirmConfig = {\n        public_api_key: apiKey,\n        script: scriptURL,\n    };\n\n    (function foo(m: AffirmHostWindow | any, g: AffirmConfig, n: 'affirm', d: 'checkout', a: 'ui', e: 'script', h: 'ready', c: 'jsReady') {\n        const b = m[n] || {};\n        const k = document.createElement(e);\n        const p = document.getElementsByTagName(e)[0];\n        const l = function bar(a: Affirm | any, b: keyof Affirm, c: string) {\n            return function baz() {\n                a[b]._.push([c, arguments]);\n            };\n        };\n        b[d] = l(b, d, 'set');\n        const f = b[d];\n        b[a] = {};\n        b[a]._ = [];\n        f._ = [];\n        b._ = [];\n        b[a][h] = l(b, a, h);\n        b[c] = function qux() {\n            b._.push([h, arguments]);\n        };\n        let a1 = 0;\n        for (\n          const c1 = 'set add save post open empty reset on off trigger ready setProduct'.split(\n            ' '\n          );\n          a1 < c1.length;\n          a1++\n        ) {\n            f[c1[a1]] = l(b, d, c1[a1]);\n        }\n        let a2 = 0;\n        for (const c2 = ['get', 'token', 'url', 'items']; a2 < c2.length; a2++) {\n            f[c2[a2]] = function foobar() {};\n        }\n        k.async = !0;\n        k.src = g[e];\n        if (p.parentNode) {\n            p.parentNode.insertBefore(k, p);\n        }\n        delete g[e];\n        f(g);\n        m[n] = b;\n    })(\n        window,\n        _AFFIRM_CONFIG,\n        'affirm',\n        'checkout',\n        'ui',\n        'script',\n        'ready',\n        'jsReady'\n    );\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName));\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        let state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit)\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n        );\n\n        await this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as unknown as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { BraintreeVerifyPayload } from './braintree';\n\n/**\n * A set of options that are required to initialize the Braintree payment\n * method. You need to provide the options if you want to support 3D Secure\n * authentication flow.\n */\nexport interface BraintreePaymentInitializeOptions {\n    threeDSecure?: BraintreeThreeDSecureOptions;\n\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    form?: BraintreeFormOptions;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\nexport interface BraintreeThreeDSecureOptions {\n    /**\n     * A callback that gets called when the iframe is ready to be added to the\n     * current page. It is responsible for determining where the iframe should\n     * be inserted in the DOM.\n     *\n     * @param error - Any error raised during the verification process;\n     * undefined if there is none.\n     * @param iframe - The iframe element containing the verification web page\n     * provided by the card issuer.\n     * @param cancel - A function, when called, will cancel the verification\n     * process and remove the iframe.\n     */\n    addFrame(error: Error | undefined, iframe: HTMLIFrameElement, cancel: () => Promise<BraintreeVerifyPayload> | undefined): void;\n\n    /**\n     * A callback that gets called when the iframe is about to be removed from\n     * the current page.\n     */\n    removeFrame(): void;\n}\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<Pick<\n    CSSStyleDeclaration,\n    'color' |\n    'fontFamily' |\n    'fontSize' |\n    'fontWeight'\n>>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n    private _isPaymentMethodSelected: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n        this._isPaymentMethodSelected = false;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        if (!this._isPaymentMethodSelected) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _getOrderReferenceIdFromInitializationData(): string | undefined {\n        return this._paymentMethod ? this._paymentMethod.initializationData.orderReferenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId() || this._getOrderReferenceIdFromInitializationData();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => {\n                            this._isPaymentMethodSelected = true;\n                            onPaymentSelect(orderReference);\n                        })\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!this._getOrderReferenceId()) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean | undefined, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({ useStoreCredit }, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","import { noop } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { AmazonPayV2ChangeActionType, AmazonPayV2PaymentProcessor, AmazonPayV2PayOptions, AmazonPayV2Placement } from '.';\n\nexport default class AmazonPayV2PaymentStrategy implements PaymentStrategy {\n\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor\n    ) { }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, amazonpay } = options;\n\n        if (!methodId || !amazonpay) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazonpay\" argument is not provided.');\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        await this._amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        const { paymentToken } = paymentMethod.initializationData;\n        const buttonId = amazonpay.editButtonId;\n\n        if (paymentToken && buttonId) {\n            this._bindEditButton(buttonId, paymentToken, 'changePayment');\n        } else {\n            this._walletButton = this._createSignInButton(paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        const { paymentToken } = paymentMethod.initializationData;\n\n        if (paymentToken) {\n            const paymentPayload = {\n                methodId,\n                paymentData: { nonce: paymentToken },\n            };\n\n            await this._store.dispatch(this._orderActionCreator.submitOrder(orderRequest, options));\n\n            try {\n                return await this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            } catch (error) {\n                if (error instanceof RequestError && error.body.status === 'additional_action_required') {\n                    return new Promise(() => {\n                        window.location.replace(error.body.additional_action_required.data.redirect_url);\n                    });\n                }\n\n                throw error;\n            }\n        }\n\n        if (!this._walletButton) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._walletButton.click();\n\n        return new Promise<never>(noop);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(_options?: PaymentRequestOptions | undefined): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        await this._amazonPayV2PaymentProcessor.deinitialize();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _bindEditButton(id: string, sessionId: string, changeAction: AmazonPayV2ChangeActionType): void {\n        const button = document.getElementById(id);\n\n        if (!button || !button.parentNode) {\n            return;\n        }\n\n        const clone = button.cloneNode(true);\n        button.parentNode.replaceChild(clone, button);\n\n        clone.addEventListener('click', () => this._showLoadingSpinner(() => new Promise(noop)));\n\n        this._amazonPayV2PaymentProcessor.bindButton(id, sessionId, changeAction);\n    }\n\n    private _showLoadingSpinner(callback?: () => Promise<void> | Promise<never>): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n\n            if (callback) {\n                return callback();\n            }\n\n            return Promise.reject();\n        }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createContainer(): HTMLDivElement {\n        let container = document.getElementById('AmazonPayButton') as HTMLDivElement;\n\n        if (container) {\n            return container;\n        }\n\n        container = document.createElement('div');\n        container.id = 'AmazonPayButton';\n        container.style.display = 'none';\n\n        return document.body.appendChild(container);\n    }\n\n    private _createSignInButton(paymentMethod: PaymentMethod): HTMLElement {\n        const state = this._store.getState();\n        const cart = state.cart.getCart();\n        const config = state.config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            config: {\n                merchantId,\n                testMode,\n            },\n            initializationData: {\n                checkoutLanguage,\n                ledgerCurrency,\n                checkoutSessionMethod,\n                extractAmazonCheckoutSessionId,\n            },\n        } = paymentMethod;\n\n        if (!merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const amazonButtonOptions = {\n            merchantId,\n            sandbox: !!testMode,\n            checkoutLanguage,\n            ledgerCurrency,\n            productType: cart && getShippableItemsCount(cart) === 0 ?\n                AmazonPayV2PayOptions.PayOnly :\n                AmazonPayV2PayOptions.PayAndShip,\n            createCheckoutSession: {\n                method: checkoutSessionMethod,\n                url: `${config.links.siteLink}/remote-checkout/${paymentMethod.id}/payment-session`,\n                extractAmazonCheckoutSessionId,\n            },\n            placement: AmazonPayV2Placement.Checkout,\n        };\n\n        const container = this._createContainer();\n        this._amazonPayV2PaymentProcessor.createButton(`#${container.id}`, amazonButtonOptions);\n\n        return container;\n    }\n}\n","import { noop } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BlueSnapV2StyleProps } from './bluesnapv2';\nimport { BlueSnapV2PaymentInitializeOptions } from './bluesnapv2-payment-options';\n\nconst IFRAME_NAME = 'bluesnapv2_hosted_payment_page';\n\nexport default class BlueSnapV2PaymentStrategy implements PaymentStrategy {\n\n    private _initializeOptions?: BlueSnapV2PaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(\n                NotInitializedErrorType.PaymentNotInitialized\n            );\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(orderRequest, options));\n\n        const { onLoad, style } = this._initializeOptions;\n        const frame = this._createIframe(IFRAME_NAME, style);\n        const promise = new CancellablePromise<undefined>(new Promise(noop));\n\n        onLoad(frame, () => promise.cancel(new PaymentMethodCancelledError()));\n\n        return this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({\n            methodId: payment.methodId,\n            gatewayId: payment.gatewayId,\n            shouldSaveInstrument: false,\n            target: frame.name,\n            promise: promise.promise,\n        }));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._initializeOptions = options && options.bluesnapv2;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _createIframe(name: string, style?: BlueSnapV2StyleProps): HTMLIFrameElement {\n        const iframe = document.createElement('iframe');\n\n        iframe.name = name;\n\n        if (style) {\n            const { border, height, width } = style;\n\n            iframe.style.border = border as string;\n            iframe.style.height = height as string;\n            iframe.style.width = width as string;\n        }\n\n        return iframe;\n    }\n}\n","import { isNonceLike } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BoltCheckout, BoltTransaction } from './bolt';\nimport BoltScriptLoader from './bolt-script-loader';\n\nexport default class BoltPaymentStrategy implements PaymentStrategy {\n    private _boltClient?: BoltCheckout;\n    private _useBoltClient: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _boltScriptLoader: BoltScriptLoader\n    ) { }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { bolt, methodId } = options;\n\n        this._useBoltClient = !!(bolt && bolt.useBigCommerceCheckout);\n\n        if (this._useBoltClient) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n            if (!paymentMethod || !paymentMethod.initializationData.publishableKey) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            const { publishableKey } = paymentMethod.initializationData;\n\n            this._boltClient = await this._boltScriptLoader.load(publishableKey, paymentMethod.config.testMode);\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._boltClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._useBoltClient) {\n            return this._executeWithBoltClient(payload, options);\n        } else {\n            return this._executeWithBoltCheckout(payload, options);\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private async _executeWithBoltClient(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this._boltClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const boltClient = this._boltClient;\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { isStoreCreditApplied: useStoreCredit } = this._store.getState().checkout.getCheckoutOrThrow();\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options));\n        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const orderToken = paymentMethod.clientToken;\n\n        const transaction: BoltTransaction = await new Promise((resolve, reject) => {\n            const onSuccess = (transaction: BoltTransaction,  callback: () => void) => {\n                resolve(transaction);\n                callback();\n            };\n\n            const onClose = () => {\n                reject(new PaymentMethodCancelledError());\n            };\n\n            const callbacks = {\n                success: onSuccess,\n                close: onClose,\n            };\n\n            boltClient.configure({ orderToken }, {}, callbacks).open();\n        });\n\n        const { shouldSaveInstrument } = payment.paymentData as NonceInstrument;\n\n        const paymentPayload = {\n            methodId: payment.methodId,\n            paymentData: {\n                nonce: transaction.reference,\n                shouldSaveInstrument,\n            },\n        };\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private async _executeWithBoltCheckout(payload: OrderRequestBody, _options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, paymentData } = payment;\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentData || !isNonceLike(paymentData)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, _options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment({\n            methodId,\n            paymentData,\n        }));\n    }\n}\n","import { NonceInstrument, PaymentInstrument } from './payment';\n\nexport default function isNonceLike(instrument: PaymentInstrument): instrument is NonceInstrument {\n    return Boolean((instrument as NonceInstrument).nonce);\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { BoltCheckout, BoltHostWindow } from './bolt';\n\nexport default class BoltScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: BoltHostWindow = window\n    ) {}\n\n    async load(publishableKey: string, testMode?: boolean): Promise<BoltCheckout> {\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: {\n                id: 'bolt-connect',\n                'data-publishable-key': publishableKey,\n            },\n        };\n\n        await this._scriptLoader.loadScript(`//connect${testMode ? '-sandbox' : ''}.bolt.com/connect-bigcommerce.js`, options);\n        if (!this._window.BoltCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.BoltCheckout;\n    }\n}\n","import getOverlayStyle from './overlay-style';\n\nexport interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    hasCloseButton?: boolean;\n    innerHtml?: HTMLElement | DocumentFragment;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n    onClickClose?(event: MouseEvent): void;\n}\n\nexport interface Elements {\n    element: HTMLElement;\n    mainElement: HTMLElement;\n    closeElement?: HTMLElement;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _mainElement: HTMLElement;\n    private _closeElement?: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        const { element, closeElement, mainElement } = this._createElements(options);\n\n        this._element = element;\n        this._closeElement = closeElement;\n        this._mainElement = mainElement;\n    }\n\n    show(options?: OverlayShowOptions): void {\n\n        if (this._mainElement.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._mainElement);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._mainElement.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElements(options?: OverlayOptions): Elements {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = 'checkoutOverlay',\n            transitionDuration = 400,\n            hasCloseButton,\n            innerHtml,\n        } = options || {};\n        let mainElement = element;\n        let closeElement: HTMLElement | undefined;\n        let classLayout: string | undefined;\n        let classClose: string | undefined;\n        let classOverlayText: string | undefined;\n\n        if (id) {\n            element.id = id;\n        }\n\n        if (innerHtml) {\n            const overlayText = document.createElement('div');\n            classOverlayText = `${id}--overlayText`;\n            overlayText.className = classOverlayText;\n            overlayText.appendChild(innerHtml);\n\n            element.appendChild(overlayText);\n        }\n\n        if (hasCloseButton) {\n            classClose = `${id}--close`;\n            closeElement = document.createElement('div');\n            closeElement.className =  classClose;\n\n            classLayout = `${id}--layout`;\n            mainElement = document.createElement('div');\n            mainElement.className = classLayout;\n\n            mainElement.appendChild(element);\n            mainElement.appendChild(closeElement);\n        }\n\n        mainElement.appendChild(getOverlayStyle({ id, background, transitionDuration, classLayout, classOverlayText, classClose }));\n\n        return { element, closeElement, mainElement };\n    }\n\n    private _addEventListener(element?: HTMLElement, onClick?: (event: MouseEvent) => void): void {\n        if (!element || !onClick) {\n           return;\n        }\n\n        element.addEventListener('click', onClick);\n    }\n\n    private _removeEventListener(element?: HTMLElement, onClick?: (event: MouseEvent) => void): void {\n        if (!element || !onClick) {\n            return;\n        }\n\n        element.removeEventListener('click', onClick);\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options) {\n            const { onClick, onClickClose } = options;\n\n            this._addEventListener(this._element, onClick);\n            this._addEventListener(this._closeElement, onClickClose);\n\n            this._unregisterClick = () => {\n                this._removeEventListener(this._element, onClick);\n                this._removeEventListener(this._closeElement, onClickClose);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handleTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._mainElement.parentElement) {\n                this._mainElement.remove();\n            }\n\n            this._element.removeEventListener('transitionend', handleTransition);\n        };\n\n        this._element.addEventListener('transitionend', handleTransition);\n    }\n}\n","interface OverlayStyleOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    classLayout?: string;\n    classOverlayText?: string;\n    classClose?: string;\n}\n\nexport default function getOverlayStyle(options: OverlayStyleOptions): HTMLElement {\n    const { id, background, transitionDuration, classLayout, classOverlayText, classClose } = options;\n    const styles = document.createElement('style');\n    const addClassLayout = classLayout ? `, .${classLayout}` : '';\n\n    styles.id = `${id}--styles`;\n    styles.type = 'text/css';\n    styles.innerText = `\n        #${id}${addClassLayout} {\n            display: block;\n            height: 100%;\n            width: 100%;\n            left: 0;\n            top: 0;\n            position: fixed;\n            z-index: 2147483647;\n        }\n        #${id} {\n            transition: opacity ${transitionDuration}ms ease-out;\n            background: ${background};\n            opacity: 0;\n        }\n    `;\n\n    if (classOverlayText) {\n        styles.innerText += `\n             #${id} {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n             }\n             #${id} .${classOverlayText} {\n                color: white;\n                max-width: 330px;\n                font-size: 1.2em;\n                text-align: center;\n             }\n        `;\n    }\n\n    if (classClose) {\n        styles.innerText += `\n            #${id} {\n                opacity: 1;\n            }\n            .${classLayout} .${classClose} {\n                position: fixed;\n                right: 16px;\n                top: 16px;\n                width: 16px;\n                height: 16px;\n                opacity: 0.6;\n                cursor: pointer;\n                z-index: 3147483647;\n            }\n            .${classLayout} .${classClose}::after, .${classLayout} .${classClose}::before {\n                position: absolute;\n                left: 8px;\n                content: '';\n                height: 16px;\n                width: 2px;\n                background-color: #fff;\n            }\n            .${classLayout} .${classClose}::after {\n                transform: rotate(-45deg);\n            }\n            .${classLayout} .${classClose}::before {\n                transform: rotate(45deg);\n            }\n        `;\n    }\n\n    return styles;\n}\n","import { InvalidArgumentError } from '../../../common/error/errors';\n\nimport { BraintreeFormFieldOptions, BraintreeFormFieldStyles, BraintreeFormFieldStylesMap } from './braintree-payment-options';\n\nexport default class BraintreeRegularField {\n    private _input: HTMLInputElement;\n\n    constructor(\n        private _options: BraintreeFormFieldOptions,\n        private _styles?: BraintreeFormFieldStylesMap\n    ) {\n        this._input = document.createElement('input');\n        this._input.style.backgroundColor = 'transparent';\n        this._input.style.border = '0';\n        this._input.style.display = 'block';\n        this._input.style.height = '100%';\n        this._input.style.margin = '0';\n        this._input.style.outline = 'none';\n        this._input.style.padding = '0';\n        this._input.style.width = '100%';\n        this._input.placeholder = this._options.placeholder || '';\n\n        this._input.addEventListener('blur', this._handleBlur);\n        this._input.addEventListener('focus', this._handleFocus);\n\n        this._applyStyles(this._styles?.default);\n    }\n\n    getValue(): string {\n        return this._input.value;\n    }\n\n    attach(): void {\n        const container = document.getElementById(this._options.containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError();\n        }\n\n        container.appendChild(this._input);\n    }\n\n    detach(): void {\n        this._input.parentNode?.removeChild(this._input);\n    }\n\n    private _applyStyles(styles?: BraintreeFormFieldStyles): void {\n        if (!styles) {\n            return;\n        }\n\n        const styleKeys = Object.keys(styles) as Array<keyof BraintreeFormFieldStyles>;\n\n        styleKeys.forEach(key => {\n            this._input.style[key] = styles[key] || '';\n        });\n    }\n\n    private _handleBlur: (event: Event) => void = () => {\n        this._applyStyles(this._styles?.default);\n    };\n\n    private _handleFocus: (event: Event) => void = () => {\n        this._applyStyles(this._styles?.focus);\n    };\n}\n","import { isNil, omitBy, Dictionary } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { NonceInstrument } from '../../payment';\n\nimport { BraintreeBillingAddressRequestData, BraintreeHostedFields, BraintreeHostedFieldsCreatorConfig, BraintreeHostedFieldsState } from './braintree';\nimport { BraintreeFormFieldsMap, BraintreeFormFieldStyles, BraintreeFormFieldStylesMap, BraintreeFormFieldType, BraintreeFormFieldValidateEventData, BraintreeFormOptions, BraintreeStoredCardFieldsMap } from './braintree-payment-options';\nimport BraintreeRegularField from './braintree-regular-field';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport { isBraintreeFormFieldsMap } from './is-braintree-form-fields-map';\n\nenum BraintreeHostedFormType {\n    CreditCard,\n    StoredCardVerification,\n}\n\nexport default class BraintreeHostedForm {\n    private _cardFields?: BraintreeHostedFields;\n    private _cardNameField?: BraintreeRegularField;\n    private _formOptions?: BraintreeFormOptions;\n    private _type?: BraintreeHostedFormType;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    async initialize(options: BraintreeFormOptions): Promise<void> {\n        this._formOptions = options;\n\n        this._type = isBraintreeFormFieldsMap(options.fields) ?\n            BraintreeHostedFormType.CreditCard :\n            BraintreeHostedFormType.StoredCardVerification;\n\n        this._cardFields = await this._braintreeSDKCreator.createHostedFields({\n            fields: this._mapFieldOptions(options.fields),\n            styles: options.styles && this._mapStyleOptions(options.styles),\n        });\n\n        this._cardFields.on('blur', this._handleBlur);\n        this._cardFields.on('focus', this._handleFocus);\n        this._cardFields.on('cardTypeChange', this._handleCardTypeChange);\n        this._cardFields.on('validityChange', this._handleValidityChange);\n        this._cardFields.on('inputSubmitRequest', this._handleInputSubmitRequest);\n\n        if (isBraintreeFormFieldsMap(options.fields)) {\n            this._cardNameField = new BraintreeRegularField(\n                options.fields.cardName,\n                options.styles\n            );\n            this._cardNameField.attach();\n        }\n    }\n\n    async deinitialize(): Promise<void> {\n        await this._cardFields?.teardown();\n        this._cardNameField?.detach();\n    }\n\n    async tokenize(billingAddress: Address): Promise<NonceInstrument> {\n        if (!this._cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { nonce } = await this._cardFields.tokenize(omitBy({\n            billingAddress: billingAddress && this._mapBillingAddress(billingAddress),\n            cardholderName: this._cardNameField?.getValue(),\n        }, isNil));\n\n        return { nonce };\n    }\n\n    async tokenizeForStoredCardVerification(): Promise<NonceInstrument> {\n        if (!this._cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { nonce } = await this._cardFields.tokenize(omitBy({\n            cardholderName: this._cardNameField?.getValue(),\n        }, isNil));\n\n        return { nonce };\n    }\n\n    private _mapBillingAddress(billingAddress: Address): BraintreeBillingAddressRequestData {\n        return {\n            countryName: billingAddress.country,\n            postalCode: billingAddress.postalCode,\n            streetAddress: billingAddress.address2 ?\n                `${billingAddress.address1} ${billingAddress.address2}` :\n                billingAddress.address1,\n        };\n    }\n\n    private _mapFieldOptions(\n        fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap\n    ): BraintreeHostedFieldsCreatorConfig['fields'] {\n        if (isBraintreeFormFieldsMap(fields)) {\n            return omitBy({\n                number: {\n                    container: `#${fields.cardNumber.containerId}`,\n                    placeholder: fields.cardNumber.placeholder,\n                },\n                expirationDate: {\n                    container: `#${fields.cardExpiry.containerId}`,\n                    placeholder: fields.cardExpiry.placeholder,\n                },\n                cvv: fields.cardCode && {\n                    container: `#${fields.cardCode.containerId}`,\n                    placeholder: fields.cardCode.placeholder,\n                },\n            }, isNil);\n        }\n\n        return omitBy({\n            number: fields.cardNumberVerification && {\n                container: `#${fields.cardNumberVerification.containerId}`,\n                placeholder: fields.cardNumberVerification.placeholder,\n            },\n            cvv: fields.cardCodeVerification && {\n                container: `#${fields.cardCodeVerification.containerId}`,\n                placeholder: fields.cardCodeVerification.placeholder,\n            },\n        }, isNil);\n    }\n\n    private _mapStyleOptions(\n        options: BraintreeFormFieldStylesMap\n    ): BraintreeHostedFieldsCreatorConfig['styles'] {\n        const mapStyles = (styles: BraintreeFormFieldStyles = {}) => omitBy({\n            color: styles.color,\n            'font-family': styles.fontFamily,\n            'font-size': styles.fontSize,\n            'font-weight': styles.fontWeight,\n        }, isNil) as Dictionary<string>;\n\n        return {\n            input: mapStyles(options.default),\n            '.invalid': mapStyles(options.error),\n            ':focus': mapStyles(options.focus),\n        };\n    }\n\n    private _mapFieldType(type: string): BraintreeFormFieldType {\n        switch (type) {\n        case 'number':\n            return this._type === BraintreeHostedFormType.StoredCardVerification ?\n                BraintreeFormFieldType.CardNumberVerification :\n                BraintreeFormFieldType.CardNumber;\n\n        case 'expirationDate':\n            return BraintreeFormFieldType.CardExpiry;\n\n        case 'cvv':\n            return this._type === BraintreeHostedFormType.StoredCardVerification ?\n                BraintreeFormFieldType.CardCodeVerification :\n                BraintreeFormFieldType.CardCode;\n\n        default:\n            throw new Error('Unexpected field type');\n        }\n    }\n\n    private _mapStoredCardVerificationErrors(\n        fields: BraintreeHostedFieldsState['fields']\n    ): BraintreeFormFieldValidateEventData['errors'] {\n        return this._type === BraintreeHostedFormType.StoredCardVerification ?\n            {\n                [BraintreeFormFieldType.CardCodeVerification]: !fields.cvv || fields.cvv.isValid ? undefined : [{\n                    fieldType: 'cardCodeVerification',\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                }],\n                [BraintreeFormFieldType.CardNumberVerification]: !fields.number || fields.number.isValid ? undefined : [{\n                    fieldType: 'cardNumberVerification',\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                }],\n            } :\n            {\n                [BraintreeFormFieldType.CardCode]: !fields.cvv || fields.cvv.isValid ? undefined : [{\n                    fieldType: 'cardCode',\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                }],\n                [BraintreeFormFieldType.CardExpiry]: !fields.expirationDate || fields.expirationDate.isValid ? undefined : [{\n                    fieldType: 'cardExpiry',\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                }],\n                [BraintreeFormFieldType.CardNumber]: !fields.number || fields.number.isValid ? undefined : [{\n                    fieldType: 'cardNumber',\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                }],\n            };\n    }\n\n    private _handleBlur: (event: BraintreeHostedFieldsState) => void = event => {\n        if (!this._formOptions?.onBlur) {\n            return;\n        }\n\n        this._formOptions.onBlur({\n            fieldType: this._mapFieldType(event.emittedBy),\n        });\n    };\n\n    private _handleFocus: (event: BraintreeHostedFieldsState) => void = event => {\n        if (!this._formOptions?.onFocus) {\n            return;\n        }\n\n        this._formOptions.onFocus({\n            fieldType: this._mapFieldType(event.emittedBy),\n        });\n    };\n\n    private _handleCardTypeChange: (event: BraintreeHostedFieldsState) => void = event => {\n        if (!this._formOptions?.onCardTypeChange) {\n            return;\n        }\n\n        this._formOptions.onCardTypeChange({\n            cardType: event.cards[0]?.type,\n        });\n    };\n\n    private _handleInputSubmitRequest: (event: BraintreeHostedFieldsState) => void = event => {\n        if (!this._formOptions?.onEnter) {\n            return;\n        }\n\n        this._formOptions.onEnter({\n            fieldType: this._mapFieldType(event.emittedBy),\n        });\n    };\n\n    private _handleValidityChange: (event: BraintreeHostedFieldsState) => void = event => {\n        if (!this._formOptions?.onValidate) {\n            return;\n        }\n\n        this._formOptions.onValidate({\n            isValid: (Object.keys(event.fields) as Array<keyof BraintreeHostedFieldsState['fields']>)\n                .every(key => event.fields[key]?.isValid),\n            errors: this._mapStoredCardVerificationErrors(event.fields),\n        });\n    };\n}\n","import { BraintreeFormFieldsMap, BraintreeStoredCardFieldsMap } from './braintree-payment-options';\n\nexport function isBraintreeFormFieldsMap(\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap\n): fields is BraintreeFormFieldsMap {\n    return !!(fields as BraintreeFormFieldsMap).cardNumber;\n}\n\nexport function isBraintreeStoredCardFieldsMap(\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap\n): fields is BraintreeStoredCardFieldsMap {\n    return !!(\n        (fields as BraintreeStoredCardFieldsMap).cardCodeVerification ||\n        (fields as BraintreeStoredCardFieldsMap).cardNumberVerification\n    );\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData, BraintreeShippingAddressOverride, BraintreeThreeDSecure, BraintreeTokenizePayload, BraintreeVerifyPayload } from './braintree';\nimport BraintreeHostedForm from './braintree-hosted-form';\nimport { BraintreeFormOptions, BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport interface PaypalConfig {\n    amount: number;\n    currency: string;\n    locale: string;\n    offerCredit?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    shouldSaveInstrument?: boolean;\n}\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _braintreeHostedForm: BraintreeHostedForm,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    async tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const requestData = this._mapToCreditCard(payment.paymentData as CreditCardInstrument, billingAddress);\n        const client = await this._braintreeSDKCreator.getClient();\n        const { creditCards } = await client.request(requestData);\n\n        return { nonce: creditCards[0].nonce };\n    }\n\n    async verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<BraintreeVerifyPayload> {\n        const [{ nonce }, threeDSecure] = await Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]);\n\n        return this._present3DSChallenge(threeDSecure, amount, nonce);\n    }\n\n    paypal({ shouldSaveInstrument, ...config }: PaypalConfig): Promise<BraintreeTokenizePayload> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    enableShippingAddress: true,\n                    flow: shouldSaveInstrument ? 'vault' : 'checkout',\n                    useraction: 'commit',\n                    ...config,\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    getSessionId(): Promise<string | undefined> {\n        return this._braintreeSDKCreator.getDataCollector()\n            .then(({ deviceData }) => deviceData);\n    }\n\n    /**\n     * @deprecated Use getSessionId() and combine them in the consumer.\n     */\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    async initializeHostedForm(options: BraintreeFormOptions): Promise<void> {\n        await this._braintreeHostedForm.initialize(options);\n    }\n\n    async deinitializeHostedForm(): Promise<void> {\n        await this._braintreeHostedForm.deinitialize();\n    }\n\n    tokenizeHostedForm(billingAddress: Address): Promise<NonceInstrument> {\n        return this._braintreeHostedForm.tokenize(billingAddress);\n    }\n\n    tokenizeHostedFormForStoredCardVerification(): Promise<NonceInstrument> {\n        return this._braintreeHostedForm.tokenizeForStoredCardVerification();\n    }\n\n    async verifyCardWithHostedForm(billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        const [{ nonce }, threeDSecure] = await Promise.all([\n            this._braintreeHostedForm.tokenize(billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]);\n\n        return this._present3DSChallenge(threeDSecure, amount, nonce);\n    }\n\n    private _present3DSChallenge(\n        threeDSecure: BraintreeThreeDSecure,\n        amount: number,\n        nonce: string\n    ): Promise<BraintreeVerifyPayload> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n        const cancelVerifyCard = async () => {\n            const response = await threeDSecure.cancelVerifyCard();\n\n            verification.cancel(new PaymentMethodCancelledError());\n\n            return response;\n        };\n\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                addFrame: (error, iframe) => {\n                    addFrame(error, iframe, cancelVerifyCard);\n                },\n                amount,\n                nonce,\n                removeFrame,\n            })\n        );\n\n        return verification.promise;\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress?: Address): BraintreeRequestData {\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: billingAddress && {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress: billingAddress.address2 ?\n                            `${billingAddress.address1} ${billingAddress.address2}` :\n                            billingAddress.address1,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { pick } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { CreditCardInstrument, NonceInstrument, PaymentInstrument, PaymentInstrumentMeta, VaultedInstrumentWithNonceVerification } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n    private _isHostedFormInitialized?: boolean;\n    private _deviceSessionId?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId));\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n\n            if (this._isHostedPaymentFormEnabled(options.methodId, options.gatewayId) && options.braintree?.form) {\n                await this._braintreePaymentProcessor.initializeHostedForm(options.braintree.form);\n\n                this._isHostedFormInitialized = true;\n            }\n\n            this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n            this._deviceSessionId = await this._braintreePaymentProcessor.getSessionId();\n        } catch (error) {\n            this._handleError(error);\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const state = await this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        );\n\n        const {\n            billingAddress: { getBillingAddressOrThrow },\n            order: { getOrderOrThrow },\n            payment: { isPaymentDataRequired },\n        } = state;\n\n        if (!isPaymentDataRequired(order.useStoreCredit)) {\n            return state;\n        }\n\n        try {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                ...payment,\n                paymentData: this._isHostedFormInitialized ?\n                    await this._prepareHostedPaymentData(\n                        payment,\n                        getBillingAddressOrThrow(),\n                        getOrderOrThrow().orderAmount\n                    ) :\n                    await this._preparePaymentData(\n                        payment,\n                        getBillingAddressOrThrow(),\n                        getOrderOrThrow().orderAmount\n                    ),\n            }));\n        } catch (error) {\n            this._handleError(error);\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<InternalCheckoutSelectors> {\n        await Promise.all([\n            this._braintreePaymentProcessor.deinitialize(),\n            this._braintreePaymentProcessor.deinitializeHostedForm(),\n        ]);\n\n        return this._store.getState();\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private async _preparePaymentData(payment: OrderPaymentRequestBody, billingAddress: Address, orderAmount: number): Promise<PaymentInstrument & PaymentInstrumentMeta> {\n        const commonPaymentData = { deviceSessionId: this._deviceSessionId };\n\n        if (this._isSubmittingWithStoredCard(payment) || this._isStoringNewCard(payment)) {\n            return {\n                ...commonPaymentData,\n                ...payment.paymentData,\n            };\n        }\n\n        if (this._shouldPerform3DSVerification(payment)) {\n            return {\n                ...commonPaymentData,\n                ...this._mapToNonceInstrument({\n                    ...payment.paymentData,\n                    ...await this._braintreePaymentProcessor.verifyCard(payment, billingAddress, orderAmount),\n                }),\n            };\n        }\n\n        return {\n            ...commonPaymentData,\n            ...this._mapToNonceInstrument({\n                ...payment.paymentData,\n                ...await this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress),\n            }),\n        };\n    }\n\n    private async _prepareHostedPaymentData(payment: OrderPaymentRequestBody, billingAddress: Address, orderAmount: number): Promise<PaymentInstrument & PaymentInstrumentMeta> {\n        const commonPaymentData = { deviceSessionId: this._deviceSessionId };\n\n        if (this._shouldPerform3DSVerification(payment)) {\n            return {\n                ...commonPaymentData,\n                ...this._mapToNonceInstrument({\n                    ...payment.paymentData,\n                    ...await this._braintreePaymentProcessor.verifyCardWithHostedForm(billingAddress, orderAmount),\n                }),\n            };\n        }\n\n        if (this._isSubmittingWithStoredCard(payment)) {\n            return {\n                ...commonPaymentData,\n                ...this._mapToVaultedInstrumentWithNonceVerification({\n                    ...payment.paymentData,\n                    ...await this._braintreePaymentProcessor.tokenizeHostedFormForStoredCardVerification(),\n                }),\n            };\n        }\n\n        return {\n            ...commonPaymentData,\n            ...this._mapToNonceInstrument({\n                ...payment.paymentData,\n                ...await this._braintreePaymentProcessor.tokenizeHostedForm(billingAddress),\n            }),\n        };\n    }\n\n    private _mapToNonceInstrument(instrument: PaymentInstrument): NonceInstrument {\n        return pick(instrument as NonceInstrument, 'nonce', 'shouldSaveInstrument', 'shouldSetAsDefaultInstrument');\n    }\n\n    private _mapToVaultedInstrumentWithNonceVerification(instrument: PaymentInstrument): VaultedInstrumentWithNonceVerification {\n        return pick(instrument as VaultedInstrumentWithNonceVerification, 'nonce', 'instrumentId');\n    }\n\n    private _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const { paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isSubmittingWithStoredCard(payment: OrderPaymentRequestBody): boolean {\n        return !!(payment.paymentData && isVaultedInstrument(payment.paymentData));\n    }\n\n    private _isStoringNewCard(payment: OrderPaymentRequestBody): boolean {\n        return !!(payment.paymentData && (payment.paymentData as CreditCardInstrument | NonceInstrument)?.shouldSaveInstrument);\n    }\n\n    private _shouldPerform3DSVerification(payment: OrderPaymentRequestBody): boolean {\n        return !!(this._is3dsEnabled && !this._isSubmittingWithStoredCard(payment));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument, { isHostedVaultedInstrument } from '../../is-vaulted-instrument';\nimport Payment, { FormattedPayload, PaypalInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\nimport mapToBraintreeShippingAddressOverride from './map-to-braintree-shipping-address-override';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getOutstandingBalance(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { nonce, config: { isVaultingEnabled } } = this._paymentMethod;\n        const { paymentData = {} } = payment;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: this._formattedPayload(nonce) });\n        }\n\n        if (isVaultedInstrument(paymentData) || isHostedVaultedInstrument(paymentData)) {\n            if (!isVaultingEnabled) {\n                throw new InvalidArgumentError('Vaulting is disabled but a vaulted instrument was being used for this transaction');\n            }\n\n            return Promise.resolve(payment);\n        }\n\n        if (paymentData.shouldSaveInstrument && !isVaultingEnabled) {\n            throw new InvalidArgumentError('Vaulting is disabled but shouldSaveInstrument is set to true');\n        }\n\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        const shippingAddressOverride = shippingAddress ? mapToBraintreeShippingAddressOverride(shippingAddress) : undefined;\n\n        return Promise.all([\n            this._braintreePaymentProcessor.paypal({\n                amount: grandTotal,\n                locale: storeLanguage,\n                currency: currency.code,\n                offerCredit: this._credit,\n                shippingAddressOverride,\n                shouldSaveInstrument: paymentData.shouldSaveInstrument || false,\n            }),\n            this._braintreePaymentProcessor.getSessionId(),\n        ]).then(([\n            { nonce, details } = {} as any,\n            sessionId,\n        ]) => ({\n            ...payment,\n            paymentData: this._formattedPayload(nonce, details && details.email, sessionId, paymentData.shouldSaveInstrument, paymentData.shouldSetAsDefaultInstrument),\n        }));\n    }\n\n    private _formattedPayload(token: string, email?: string, sessionId?: string, vaultPaymentInstrument?: boolean, shouldSetAsDefaultInstrument?: boolean): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: vaultPaymentInstrument || null,\n                set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { Address } from '../../../address';\n\nimport { BraintreeShippingAddressOverride } from './braintree';\n\nexport default function mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { merge, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { HostedForm } from '../../../hosted-form';\nimport { OrderRequestBody } from '../../../order';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlow {\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n        await this._cardinalClient.configure(await this._getClientToken(method));\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm\n    ): Promise<InternalCheckoutSelectors> {\n        const { instruments: { getCardInstrument }, paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n        const { payment: { methodId = '', paymentData = {} } = {} } = payload;\n        const instrument = isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const bin = instrument ? instrument.iin : hostedForm && hostedForm.getBin();\n\n        if (bin) {\n            await this._cardinalClient.runBinProcess(bin);\n        }\n\n        try {\n            return await execute(merge(payload, {\n                payment: {\n                    paymentData: {\n                        threeDSecure: { token: getPaymentMethodOrThrow(methodId).clientToken },\n                    },\n                },\n            }), options);\n        } catch (error) {\n            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                throw error;\n            }\n\n            const threeDSecure = await this._cardinalClient.getThreeDSecureData(error.body.three_ds_result, this._getOrderData());\n\n            if (!hostedForm) {\n                return await this._store.dispatch(this._paymentActionCreator.submitPayment(merge(payload.payment, {\n                    paymentData: { threeDSecure },\n                })));\n            }\n\n            await hostedForm.submit(merge(payload.payment, {\n                paymentData: { threeDSecure },\n            }));\n\n            return this._store.getState();\n        }\n    }\n\n    private async _getClientToken(method: PaymentMethod): Promise<string> {\n        if (method.clientToken) {\n            return method.clientToken;\n        }\n\n        const { paymentMethods: { getPaymentMethodOrThrow } } = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(method.id)\n        );\n\n        return getPaymentMethodOrThrow(method.id).clientToken || '';\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddressOrThrow();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckoutOrThrow();\n        const order = state.order.getOrderOrThrow();\n\n        return {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport { CardinalAccount, CardinalAddress, CardinalConsumer, CardinalEventType, CardinalInitializationType, CardinalPartialOrder, CardinalPaymentBrand, CardinalSignatureValidationErrors, CardinalSignatureVerification, CardinalSDK, CardinalTriggerEvents, CardinalValidatedAction, CardinalValidatedData } from './cardinal';\nimport CardinalScriptLoader from './cardinal-script-loader';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n    private _isConfigured: boolean = false;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        if (this._isConfigured) {\n            return Promise.resolve();\n        }\n\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    this._isConfigured = true;\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new PaymentMethodFailedError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new PaymentMethodFailedError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new PaymentMethodFailedError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new PaymentMethodFailedError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp: boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export interface PaypalCommercePaymentInitializeOptions {\n    overlay?: {\n        helpText?: string;\n        continueText?: string;\n    };\n\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    form?: PaypalCommerceFormOptions;\n}\n\nexport interface PaypalCommerceFormOptions {\n    fields: PaypalCommerceFormFieldsMap | PaypalCommerceStoredCardFieldsMap;\n    styles?: PaypalCommerceFormFieldStylesMap;\n    onBlur?(data: PaypalCommerceFormFieldBlurEventData): void;\n    onCardTypeChange?(data: PaypalCommerceFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: PaypalCommerceFormFieldFocusEventData): void;\n    onValidate?(data: PaypalCommerceFormFieldValidateEventData): void;\n    onEnter?(data: PaypalCommerceFormFieldEnterEventData): void;\n}\n\nexport enum PaypalCommerceFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface PaypalCommerceFormFieldsMap {\n    [PaypalCommerceFormFieldType.CardCode]?: PaypalCommerceFormFieldOptions;\n    [PaypalCommerceFormFieldType.CardExpiry]: PaypalCommerceFormFieldOptions;\n    [PaypalCommerceFormFieldType.CardName]: PaypalCommerceFormFieldOptions;\n    [PaypalCommerceFormFieldType.CardNumber]: PaypalCommerceFormFieldOptions;\n}\n\nexport interface PaypalCommerceStoredCardFieldsMap {\n    [PaypalCommerceFormFieldType.CardCodeVerification]?: PaypalCommerceStoredCardFieldOptions;\n    [PaypalCommerceFormFieldType.CardNumberVerification]?: PaypalCommerceStoredCardFieldOptions;\n}\n\nexport interface PaypalCommerceFormFieldOptions {\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface PaypalCommerceStoredCardFieldOptions extends PaypalCommerceFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface PaypalCommerceFormFieldStylesMap {\n    default?: PaypalCommerceFormFieldStyles;\n    error?: PaypalCommerceFormFieldStyles;\n    focus?: PaypalCommerceFormFieldStyles;\n}\n\nexport type PaypalCommerceFormFieldStyles = Partial<Pick<\n    CSSStyleDeclaration,\n    'color' |\n    'fontFamily' |\n    'fontSize' |\n    'fontWeight'\n    >>;\n\nexport interface PaypalCommerceFormFieldKeyboardEventData {\n    fieldType: string;\n}\n\nexport type PaypalCommerceFormFieldBlurEventData = PaypalCommerceFormFieldKeyboardEventData;\nexport type PaypalCommerceFormFieldEnterEventData = PaypalCommerceFormFieldKeyboardEventData;\nexport type PaypalCommerceFormFieldFocusEventData = PaypalCommerceFormFieldKeyboardEventData;\n\nexport interface PaypalCommerceFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface PaypalCommerceFormFieldValidateEventData {\n    errors: {\n        [PaypalCommerceFormFieldType.CardCode]?: PaypalCommerceFormFieldValidateErrorData[];\n        [PaypalCommerceFormFieldType.CardExpiry]?: PaypalCommerceFormFieldValidateErrorData[];\n        [PaypalCommerceFormFieldType.CardName]?: PaypalCommerceFormFieldValidateErrorData[];\n        [PaypalCommerceFormFieldType.CardNumber]?: PaypalCommerceFormFieldValidateErrorData[];\n        [PaypalCommerceFormFieldType.CardCodeVerification]?: PaypalCommerceFormFieldValidateErrorData[];\n        [PaypalCommerceFormFieldType.CardNumberVerification]?: PaypalCommerceFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface PaypalCommerceFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n","import { isNil, kebabCase, omitBy } from 'lodash';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalCommerceFormFieldStyles, PaypalCommerceFormFieldStylesMap, PaypalCommerceFormFieldType, PaypalCommerceFormFieldValidateEventData, PaypalCommerceFormOptions, PaypalCommerceHostedFields, PaypalCommerceHostedFieldsRenderOptions, PaypalCommerceHostedFieldsState, PaypalCommerceRegularField, PaypalCommerceRequestSender, PaypalCommerceSDK } from './index';\nimport { PaypalCommerceFormFieldsMap, PaypalCommerceStoredCardFieldsMap } from './paypal-commerce-payment-initialize-options';\n\nenum PaypalCommerceHostedFormType {\n    CreditCard,\n    StoredCardVerification,\n}\n\nexport default class PaypalCommerceHostedForm {\n    private _formOptions?: PaypalCommerceFormOptions;\n    private _cardNameField?: PaypalCommerceRegularField;\n    private _hostedFields?: PaypalCommerceHostedFields;\n    private _type?: PaypalCommerceHostedFormType;\n\n    constructor(\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender\n    ) {}\n\n    async initialize(options: PaypalCommerceFormOptions, cartId: string, paypal: PaypalCommerceSDK) {\n        if (!paypal.HostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        this._formOptions = options;\n        this._type = this._isPaypalCommerceFormFieldsMap(options.fields) ?\n            PaypalCommerceHostedFormType.CreditCard :\n            PaypalCommerceHostedFormType.StoredCardVerification;\n\n        if (paypal.HostedFields.isEligible()) {\n            if (this._isPaypalCommerceFormFieldsMap(options.fields)) {\n                this._cardNameField = new PaypalCommerceRegularField(\n                    options.fields.cardName,\n                    options.styles\n                );\n                this._cardNameField.attach();\n            }\n\n            this._hostedFields = await paypal.HostedFields.render({\n                paymentsSDK: true,\n                fields: this._mapFieldOptions(options.fields),\n                styles: options.styles && this._mapStyleOptions(options.styles),\n                createOrder: () => this._setupPayment(cartId),\n            });\n\n            this._hostedFields.on('blur', this._handleBlur);\n            this._hostedFields.on('focus', this._handleFocus);\n            this._hostedFields.on('cardTypeChange', this._handleCardTypeChange);\n            this._hostedFields.on('validityChange', this._handleValidityChange);\n            this._hostedFields.on('inputSubmitRequest', this._handleInputSubmitRequest);\n        } else {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n    }\n\n    async submit(): Promise<{orderId: string}> {\n        if (!this._hostedFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._hostedFields.submit();\n    }\n\n    private _mapFieldOptions(fields: PaypalCommerceFormFieldsMap | PaypalCommerceStoredCardFieldsMap): PaypalCommerceHostedFieldsRenderOptions['fields'] {\n        if (this._isPaypalCommerceFormFieldsMap(fields)) {\n            return omitBy({\n                number: {\n                    selector: `#${fields.cardNumber.containerId}`,\n                    placeholder: fields.cardNumber.placeholder,\n                },\n                expirationDate: {\n                    selector: `#${fields.cardExpiry.containerId}`,\n                    placeholder: fields.cardExpiry.placeholder,\n                },\n                cvv: fields.cardCode && {\n                    selector: `#${fields.cardCode.containerId}`,\n                    placeholder: fields.cardCode.placeholder,\n                },\n            }, isNil);\n        }\n\n        return omitBy({\n            number: fields.cardNumberVerification && {\n                selector: `#${fields.cardNumberVerification.containerId}`,\n                placeholder: fields.cardNumberVerification.placeholder,\n            },\n            cvv: fields.cardCodeVerification && {\n                selector: `#${fields.cardCodeVerification.containerId}`,\n                placeholder: fields.cardCodeVerification.placeholder,\n            },\n        }, isNil);\n    }\n\n    private _mapStyleOptions(options: PaypalCommerceFormFieldStylesMap): PaypalCommerceHostedFieldsRenderOptions['styles'] {\n        const mapStyles = (styles: PaypalCommerceFormFieldStyles = {}) => {\n            return (Object.keys(styles) as Array<keyof PaypalCommerceFormFieldStyles>).reduce((updatedStyles, key) =>\n                styles[key] ?  { ...updatedStyles, [kebabCase(key)]: styles[key] } : updatedStyles\n            , {});\n        };\n\n        return {\n            input: mapStyles(options.default),\n            '.invalid': mapStyles(options.error),\n            ':focus': mapStyles(options.focus),\n        };\n    }\n\n    private async _setupPayment(cartId: string): Promise<string> {\n        const { orderId } = await this._paypalCommerceRequestSender.setupPayment('paypalcommercecreditcardscheckout', cartId);\n\n        return orderId;\n    }\n\n    private _isPaypalCommerceFormFieldsMap(fields: PaypalCommerceFormFieldsMap | PaypalCommerceStoredCardFieldsMap): fields is PaypalCommerceFormFieldsMap {\n        return !!(fields as PaypalCommerceFormFieldsMap).cardNumber;\n    }\n\n    private _mapFieldType(type: string): PaypalCommerceFormFieldType {\n        switch (type) {\n            case 'number':\n                return this._type === PaypalCommerceHostedFormType.StoredCardVerification ?\n                    PaypalCommerceFormFieldType.CardNumberVerification :\n                    PaypalCommerceFormFieldType.CardNumber;\n\n            case 'expirationDate':\n                return PaypalCommerceFormFieldType.CardExpiry;\n\n            case 'cvv':\n                return this._type === PaypalCommerceHostedFormType.StoredCardVerification ?\n                    PaypalCommerceFormFieldType.CardCodeVerification :\n                    PaypalCommerceFormFieldType.CardCode;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    private _mapStoredCardVerificationErrors(\n        fields: PaypalCommerceHostedFieldsState['fields']\n    ): PaypalCommerceFormFieldValidateEventData['errors'] {\n        return this._type === PaypalCommerceHostedFormType.StoredCardVerification ?\n            {\n                [PaypalCommerceFormFieldType.CardCodeVerification]: !fields.cvv || fields.cvv.isValid ? undefined : [{\n                    fieldType: 'cardCodeVerification',\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                }],\n                [PaypalCommerceFormFieldType.CardNumberVerification]: !fields.number || fields.number.isValid ? undefined : [{\n                    fieldType: 'cardNumberVerification',\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                }],\n            } :\n            {\n                [PaypalCommerceFormFieldType.CardCode]: !fields.cvv || fields.cvv.isValid ? undefined : [{\n                    fieldType: 'cardCode',\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                }],\n                [PaypalCommerceFormFieldType.CardExpiry]: !fields.expirationDate || fields.expirationDate.isValid ? undefined : [{\n                    fieldType: 'cardExpiry',\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                }],\n                [PaypalCommerceFormFieldType.CardNumber]: !fields.number || fields.number.isValid ? undefined : [{\n                    fieldType: 'cardNumber',\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                }],\n            };\n    }\n\n    private _handleBlur: (event: PaypalCommerceHostedFieldsState)  => void = event => {\n        if (!this._formOptions?.onBlur) {\n            return;\n        }\n\n        this._formOptions.onBlur({\n            fieldType: this._mapFieldType(event.emittedBy),\n        });\n    };\n\n    private _handleFocus: (event: PaypalCommerceHostedFieldsState)  => void = event => {\n        if (!this._formOptions?.onFocus) {\n            return;\n        }\n\n        this._formOptions.onFocus({\n            fieldType: this._mapFieldType(event.emittedBy),\n        });\n    };\n\n    private _handleCardTypeChange: (event: PaypalCommerceHostedFieldsState)  => void = event => {\n        if (!this._formOptions?.onCardTypeChange) {\n            return;\n        }\n\n        this._formOptions.onCardTypeChange({\n            cardType: event.cards[0]?.type,\n        });\n    };\n\n    private _handleInputSubmitRequest: (event: PaypalCommerceHostedFieldsState)  => void = event => {\n        if (!this._formOptions?.onEnter) {\n            return;\n        }\n\n        this._formOptions.onEnter({\n            fieldType: this._mapFieldType(event.emittedBy),\n        });\n    };\n\n    private _handleValidityChange: (event: PaypalCommerceHostedFieldsState)  => void = event => {\n        if (!this._formOptions?.onValidate) {\n            return;\n        }\n\n        this._formOptions.onValidate({\n            isValid: (Object.keys(event.fields) as Array<keyof PaypalCommerceHostedFieldsState['fields']>)\n                .every(key => event.fields[key]?.isValid),\n            errors: this._mapStoredCardVerificationErrors(event.fields),\n        });\n    };\n\n}\n","import { isNil, values } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { HostedForm, HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(\n        protected _store: CheckoutStore,\n        protected _orderActionCreator: OrderActionCreator,\n        protected _paymentActionCreator: PaymentActionCreator,\n        protected _hostedFormFactory: HostedFormFactory\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._isHostedPaymentFormEnabled(payload.payment?.methodId, payload.payment?.gatewayId) && this._shouldRenderHostedForm ?\n            this._executeWithHostedForm(payload, options) :\n            this._executeWithoutHostedForm(payload, options);\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) || !this._isHostedFieldAvailable(options)) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve(this._store.getState());\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const { config } = this._store.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } = config.getStoreConfig() || {};\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._hostedFormFactory.create(host, formOptions);\n\n        return form.attach()\n            .then(() => {\n                this._shouldRenderHostedForm = true;\n                this._hostedForm = form;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    protected _executeWithoutHostedForm(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    protected _executeWithHostedForm(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>  {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        return form.validate()\n            .then(() => this._store.dispatch(this._orderActionCreator.submitOrder(order, options)))\n            .then(() => form.submit(payment))\n            .then(() => this._store.dispatch(this._orderActionCreator.loadCurrentOrder()));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const { paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(options?: PaymentInitializeOptions): boolean {\n        return !(values(options && options.creditCard && options.creditCard.form.fields).every(isNil));\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class ConvergePaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _formPoster: FormPoster\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return super.execute(payload, options)\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class CreditCardRedirectPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        protected _store: CheckoutStore,\n        protected _orderActionCreator: OrderActionCreator,\n        protected _paymentActionCreator: PaymentActionCreator,\n        protected _hostedFormFactory: HostedFormFactory,\n        protected _formPoster: FormPoster\n    ) {\n        super(\n            _store,\n            _orderActionCreator,\n            _paymentActionCreator,\n            _hostedFormFactory\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        try {\n            return await this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }));\n        } catch (error) {\n            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                return Promise.reject(error);\n            }\n\n            return new Promise(() => this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                PaReq: error.body.three_ds_result.payer_auth_request || null,\n                TermUrl: error.body.three_ds_result.callback_url || null,\n                MD: error.body.three_ds_result.merchant_data || null,\n            }));\n        }\n    }\n\n    protected async _executeWithHostedForm(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>  {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        try {\n            await form.validate();\n            await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n            await form.submit(payment);\n        } catch (error) {\n            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                return Promise.reject(error);\n            }\n\n            return new Promise(() => this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                PaReq: error.body.three_ds_result.payer_auth_request || null,\n                TermUrl: error.body.three_ds_result.callback_url || null,\n                MD: error.body.three_ds_result.merchant_data || null,\n            }));\n        }\n\n        return await this._store.dispatch(this._orderActionCreator.loadCurrentOrder());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class CyberSourcePaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {\n        super(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory\n        );\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const { paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const { paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n\n        if (getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ExternalPaymentStrategy implements PaymentStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        try {\n            return await this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}));\n        } catch (error) {\n            if (!this._isAdditionalActionRequired(error)) {\n                return Promise.reject(error);\n            }\n\n            return new Promise(() => {\n                this._formPoster.postForm(error.body.additional_action_required.data.redirect_url, { });\n            });\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isAdditionalActionRequired(error: RequestError): boolean {\n        const { additional_action_required, status } = error.body;\n\n        return status === 'additional_action_required'\n            && additional_action_required\n            && additional_action_required.type === 'offsite_redirect';\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport { AdyenPaymentMethodType } from '../adyenv2';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepayadyenv2' && options.googlepayadyenv2) {\n            return options.googlepayadyenv2;\n        }\n\n        if (options.methodId === 'googlepayauthorizenet' && options.googlepayauthorizenet) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === 'googlepaycheckoutcom' && options.googlepaycheckoutcom) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        let nonce;\n\n        if (this._methodId === 'googlepayadyenv2') {\n            nonce = JSON.stringify({\n                type: AdyenPaymentMethodType.GooglePay,\n                googlePayToken: paymentMethod.initializationData.nonce,\n            });\n        } else {\n            nonce = paymentMethod.initializationData.nonce;\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private async _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n\n        return await Promise.all([\n            this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n        ]);\n    }\n}\n","export const supportedCountries = ['AT', 'CH', 'DE', 'DK', 'ES', 'FI', 'GB', 'NL', 'NO', 'NZ', 'SE'];\nexport const supportedCountriesRequiringStates = ['AU'];\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { supportedCountries, supportedCountriesRequiringStates } from '../klarnav2';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    useStoreCredit: payload.useStoreCredit,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes([...supportedCountries, ...supportedCountriesRequiringStates], billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this._needsStateCode(address.countryCode) ? address.stateOrProvinceCode : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaPayments, { KlarnaAddress, KlarnaAuthorizationResponse, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-payments';\nimport { supportedCountries, supportedCountriesRequiringStates } from './klarna-supported-countries';\nimport KlarnaV2ScriptLoader from './klarnav2-script-loader';\n\nexport default class KlarnaV2PaymentStrategy implements PaymentStrategy {\n    private _klarnaPayments?: KlarnaPayments;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnav2ScriptLoader: KlarnaV2ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnav2ScriptLoader.load()\n            .then(klarnaPayments => { this._klarnaPayments = klarnaPayments; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadPaymentsWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    }\n                );\n\n                return this._loadPaymentsWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n        const { gatewayId } = paymentPayload;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.');\n        }\n\n        return this._authorize(paymentPayload.methodId)\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(gatewayId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    useStoreCredit: payload.useStoreCredit,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadPaymentsWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarnav2) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarnav2\" argument is not provided.');\n        }\n\n        const { methodId, gatewayId, klarnav2: { container, onLoad } } = options;\n        const state = this._store.getState();\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.');\n        }\n\n        return this._updateOrder(gatewayId).then(() => new Promise<KlarnaLoadResponse>(resolve => {\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!this._klarnaPayments || !paymentMethod.clientToken) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaPayments.init({ client_token: paymentMethod.clientToken });\n            this._klarnaPayments.load({ container, payment_method_category: paymentMethod.id }, response => {\n                if (onLoad) {\n                    onLoad(response);\n                }\n\n                resolve(response);\n            });\n        }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes([...supportedCountries, ...supportedCountriesRequiringStates], billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this._needsStateCode(address.countryCode) ? address.stateOrProvinceCode : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private async _updateOrder(gatewayId: string) {\n        await this._paymentMethodActionCreator.loadPaymentMethod(gatewayId).toPromise();\n    }\n\n    private _authorize(methodId: string): Promise<KlarnaAuthorizationResponse> {\n        return new Promise<KlarnaAuthorizationResponse>((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            if (!this._klarnaPayments) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaPayments.authorize({ payment_method_category: methodId }, updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaPayments from './klarna-payments';\nimport KlarnaV2Window from './klarnav2-window';\n\nconst SDK_URL = 'https://x.klarnacdn.net/kp/lib/v1/api.js';\n\nexport default class KlarnaV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaPayments> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaV2Window).Klarna.Payments);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport { HostedInstrument, VaultedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n        const paymentData = payment && payment.paymentData;\n        const instrumentId = paymentData && (paymentData as VaultedInstrument).instrumentId || undefined;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument || undefined;\n        const shouldSetAsDefaultInstrument = paymentData && (paymentData as HostedInstrument).shouldSetAsDefaultInstrument || undefined;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n            this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({\n                    methodId,\n                    gatewayId,\n                    instrumentId,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.gatewayId === 'barclaycard' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { ACKNOWLEDGE } from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class PaypalProPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {\n        super(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory\n        );\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const { paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const { payment: { getPaymentStatus }, paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n\n        if (getPaymentStatus() === ACKNOWLEDGE) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: { methodId },\n                }, options)\n            );\n        }\n\n        if (getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { Cart } from '../../../cart';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { DisableFundingType, PaypalCommerceHostedForm, PaypalCommerceInitializationData, PaypalCommerceScriptLoader, PaypalCommerceScriptOptions } from './index';\n\nexport default class PaypalCommerceCreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceHostedForm: PaypalCommerceHostedForm,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (!options.paypalcommerce?.form) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.paypalcommerce.form\" argument is not provided.');\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId));\n        const { clientToken, initializationData } = state.paymentMethods.getPaymentMethodOrThrow(options.methodId);\n\n        const cart = state.cart.getCartOrThrow();\n        const paramsScript = {\n            options: this._getOptionsScript(initializationData, cart),\n            attr: { clientToken },\n        };\n\n        const paypal = await this._paypalScriptLoader.loadPaypalCommerce(paramsScript, true);\n\n        await this._paypalCommerceHostedForm.initialize(options.paypalcommerce.form, cart.id, paypal);\n\n        return this._store.getState();\n    }\n\n    async execute(payload: OrderRequestBody, options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { orderId } = await this._paypalCommerceHostedForm.submit();\n\n        const paymentData =  {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getOptionsScript(initializationData: PaypalCommerceInitializationData, cart: Cart): PaypalCommerceScriptOptions {\n        const { clientId, intent, isPayPalCreditAvailable, merchantId } = initializationData;\n        const disableFunding: DisableFundingType = [ 'card' ];\n\n        if (!isPayPalCreditAvailable) {\n            disableFunding.push('credit');\n        }\n\n        return {\n            clientId,\n            components: ['hosted-fields'],\n            merchantId,\n            currency: cart.currency.code,\n            intent,\n        };\n    }\n}\n","import { InvalidArgumentError } from '../../../common/error/errors';\n\nimport { PaypalCommerceFormFieldOptions, PaypalCommerceFormFieldStyles, PaypalCommerceFormFieldStylesMap } from './index';\n\nexport default class PaypalCommerceRegularField {\n    private _input: HTMLInputElement;\n\n    constructor(\n        private _options: PaypalCommerceFormFieldOptions,\n        private _styles?: PaypalCommerceFormFieldStylesMap\n    ) {\n        this._input = document.createElement('input');\n        this._input.style.backgroundColor = 'transparent';\n        this._input.style.border = '0';\n        this._input.style.display = 'block';\n        this._input.style.height = '100%';\n        this._input.style.margin = '0';\n        this._input.style.outline = 'none';\n        this._input.style.padding = '0';\n        this._input.style.width = '100%';\n        this._input.placeholder = this._options.placeholder || '';\n\n        this._input.addEventListener('blur', this._handleBlur);\n        this._input.addEventListener('focus', this._handleFocus);\n\n        this._applyStyles(this._styles?.default);\n    }\n\n    getValue(): string {\n        return this._input.value;\n    }\n\n    attach(): void {\n        const container = document.getElementById(this._options.containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError();\n        }\n\n        container.appendChild(this._input);\n    }\n\n    detach(): void {\n        this._input.parentNode?.removeChild(this._input);\n    }\n\n    private _applyStyles(styles?: PaypalCommerceFormFieldStyles): void {\n        if (!styles) {\n            return;\n        }\n\n        const styleKeys = Object.keys(styles) as Array<keyof PaypalCommerceFormFieldStyles>;\n\n        styleKeys.forEach(key => {\n            this._input.style[key] = styles[key] || '';\n        });\n    }\n\n    private _handleBlur: (event: Event) => void = () => {\n        this._applyStyles(this._styles?.default);\n    };\n\n    private _handleFocus: (event: Event) => void = () => {\n        this._applyStyles(this._styles?.focus);\n    };\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { PaypalCommercePaymentProcessor, PaypalCommerceRequestSender } from './index';\n\nexport default class PaypalCommercePaymentStrategy implements PaymentStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _paypalCommercePaymentProcessor: PaypalCommercePaymentProcessor\n    ) {}\n\n    initialize({ paypalcommerce }: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._paypalCommercePaymentProcessor.initialize({ overlay: paypalcommerce && paypalcommerce.overlay });\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(options.methodId);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const orderId = paymentMethod.initializationData.orderId || await this._getOrderId(options.methodId);\n\n        const paymentData =  {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paypalCommercePaymentProcessor.deinitialize();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private async _getOrderId(methodId: string): Promise<string> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const provider = methodId === 'paypalcommercecredit' ? 'paypalcommercecreditcheckout' : 'paypalcommercecheckout';\n        const { approveUrl, orderId } = await this._paypalCommerceRequestSender.setupPayment(provider, cart.id);\n\n        if (approveUrl) {\n            await this._paypalCommercePaymentProcessor.paymentPayPal(approveUrl);\n        }\n\n        return orderId;\n    }\n}\n","import { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\n\nconst modalWidth = 450;\nconst modalHeight = 600;\n\nexport interface ProcessorOptions {\n    overlay?: {\n        helpText?: string;\n        continueText?: string;\n    };\n}\n\nexport default class PaypalCommercePaymentProcessor {\n    private _window = window;\n    private _popup?: WindowProxy | null;\n    private _overlay?: Overlay;\n\n    constructor() {}\n\n    initialize({ overlay }: ProcessorOptions) {\n        this._overlay = new Overlay({ hasCloseButton: true, innerHtml: this._getOverlayElements(overlay) });\n    }\n\n    paymentPayPal(approveUrl: string): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            const paramsWindow =  this._getParamsWindow();\n\n            const closeWindow = (isResolve: boolean, isRemoveOverlay: boolean = true) => {\n                this._window.removeEventListener('message', messageHandler);\n\n                if (this._popup) {\n                    this._popup.close();\n                    this._popup = undefined;\n                }\n\n                if (isRemoveOverlay && this._overlay) {\n                    this._overlay.remove();\n                }\n\n                isResolve\n                    ? resolve(true)\n                    : reject(new MissingDataError(MissingDataErrorType.MissingPayment));\n            };\n\n            const messageHandler = (event: MessageEvent) => {\n                if (event.origin !== 'https://www.sandbox.paypal.com' && event.origin !== 'https://www.paypal.com') {\n                    return;\n                }\n\n                const data = JSON.parse(event.data);\n\n                if (data.operation === 'return_to_merchant' && data.updateParent) {\n                    this._window.removeEventListener('message', messageHandler);\n                    closeWindow(true);\n                }\n            };\n\n            this._window.addEventListener('message', messageHandler);\n            this._popup = this._window.open(approveUrl, 'PPFrame', paramsWindow);\n\n            const popupTick = setInterval(() => {\n                if (!this._popup || this._popup.closed) {\n                    clearInterval(popupTick);\n\n                    closeWindow(false);\n                }\n            }, 500);\n\n            if (this._overlay) {\n                this._overlay.show({\n                    onClick: () => this._popup ? this._popup.focus() : closeWindow(false),\n                    onClickClose: () => closeWindow(false, false),\n                });\n            }\n        });\n    }\n\n    deinitialize(): void {\n        this._overlay = undefined;\n    }\n\n    private _getOverlayElements(options: ProcessorOptions['overlay'] = {}): DocumentFragment {\n        const fragment = document.createDocumentFragment();\n        const helpText = document.createElement('div');\n        const continueText = document.createElement('strong');\n\n        helpText.className = 'paypal-commerce-overlay_text';\n        helpText.innerText = options.helpText || 'Don\\'t see the secure PayPal browser? We\\'ll help you re-launch the window to complete your flow. You might need to enable pop-ups in your browser in order to continue.';\n\n        continueText.className = 'paypal-commerce-overlay_link';\n        continueText.innerText = options.continueText || 'Click to continue';\n        continueText.style.marginTop = '15px';\n        continueText.style.display = 'block';\n        continueText.style.color = 'white';\n        continueText.style.textDecoration = 'underline';\n\n        fragment.appendChild(helpText);\n        fragment.appendChild(continueText);\n\n        return fragment;\n    }\n\n    private _getParamsWindow(): string {\n        return `\n            left=${Math.round((window.screen.height - modalWidth) / 2)},\n            top=${Math.round((window.screen.width - modalHeight) / 2)},\n            height=${modalHeight},width=${modalWidth},status=yes,toolbar=no,menubar=no,resizable=yes,scrollbars=no\n        `;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class SagePayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _formPoster: FormPoster\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return super.execute(payload, options)\n            .catch((error: Error) => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    }, undefined, '_top');\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize(options);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, TimeoutError, UnsupportedBrowserError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, { CardData, Contact, DigitalWalletType, NonceGenerationError, SquareFormElement, SquareFormOptions, SquarePaymentRequest } from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","interface BaseElementOptions {\n    style?: StripeElementStyle;\n\n    classes?: StripeElementClasses;\n\n    /**\n     * Hides the icon in the Element. Default is false.\n     */\n    hideIcon?: boolean;\n\n    /**\n     * Applies a disabled state to the Element such that user input is not accepted. Default is false.\n     */\n    disabled?: boolean;\n}\n\nexport interface CreatePaymentMethodCardData extends PaymentMethodCreateParams {\n    card?: StripeElement;\n}\n\nexport interface CreatePaymentMethodIdealData extends PaymentMethodCreateParams {\n    ideal?: StripeElement;\n}\n\nexport interface CreatePaymentMethodSepaData extends PaymentMethodCreateParams {\n    sepa_debit?: StripeElement;\n}\n\n/**\n * The PaymentIntent object.\n */\nexport interface PaymentIntent {\n    /**\n     * Unique identifier for the object.\n     */\n    id: string;\n\n    /**\n     * Status of this PaymentIntent. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).\n     */\n    status: 'succeeded' | string;\n}\n\nexport interface PaymentMethodCreateParams {\n    /**\n     * Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n     */\n    billing_details?: StripeBillingDetails;\n}\n\nexport interface StripeError {\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n}\n\n/**\n * CSS properties supported by Stripe.js.\n */\ninterface StripeElementCSSProperties {\n    /**\n     * The [background-color](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color) CSS property.\n     *\n     * This property works best with the `::selection` pseudo-class.\n     * In other cases, consider setting the background color on the element's container instaed.\n     */\n    backgroundColor?: string;\n\n    /**\n     * The [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color) CSS property.\n     */\n    color?: string;\n\n    /**\n     * The [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) CSS property.\n     */\n    fontFamily?: string;\n\n    /**\n     * The [font-size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) CSS property.\n     */\n    fontSize?: string;\n\n    /**\n     * The [font-smoothing](https://developer.mozilla.org/en-US/docs/Web/CSS/font-smoothing) CSS property.\n     */\n    fontSmoothing?: string;\n\n    /**\n     * The [font-style](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style) CSS property.\n     */\n    fontStyle?: string;\n\n    /**\n     * The [font-variant](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant) CSS property.\n     */\n    fontVariant?: string;\n\n    /**\n     * The [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) CSS property.\n     */\n    fontWeight?: string;\n\n    /**\n     * A custom property, used to set the color of the icons that are rendered in an element.\n     */\n    iconColor?: string;\n\n    /**\n     * The [line-height](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height) CSS property.\n     *\n     * To avoid cursors being rendered inconsistently across browsers, consider using a padding on the element's container instead.\n     */\n    lineHeight?: string;\n\n    /**\n     * The [letter-spacing](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing) CSS property.\n     */\n    letterSpacing?: string;\n\n    /**\n     * The [text-align](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) CSS property.\n     *\n     * Available for the `cardNumber`, `cardExpiry`, and `cardCvc` elements.\n     */\n    textAlign?: string;\n\n    /**\n     * The [padding](https://developer.mozilla.org/en-US/docs/Web/CSS/padding) CSS property.\n     *\n     * Available for the `idealBank` element.\n     * Accepts integer `px` values.\n     */\n    padding?: string;\n\n    /**\n     * The [text-decoration](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration) CSS property.\n     */\n    textDecoration?: string;\n\n    /**\n     * The [text-shadow](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow) CSS property.\n     */\n    textShadow?: string;\n\n    /**\n     * The [text-transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) CSS property.\n     */\n    textTransform?: string;\n}\n\ninterface StripeElementStyleVariant extends StripeElementCSSProperties {\n    ':hover'?: StripeElementCSSProperties;\n\n    ':focus'?: StripeElementCSSProperties;\n\n    '::placeholder'?: StripeElementCSSProperties;\n\n    '::selection'?: StripeElementCSSProperties;\n\n    ':-webkit-autofill'?: StripeElementCSSProperties;\n\n    /**\n     * Available for all elements except the `paymentRequestButton` element\n     */\n    ':disabled'?: StripeElementCSSProperties;\n\n    /**\n     * Available for the `cardNumber`, `cardExpiry`, and `cardCvc` elements.\n     */\n    '::-ms-clear'?: StripeElementCSSProperties & {display: string};\n}\n\nexport interface CardElementOptions extends BaseElementOptions {\n    /**\n     * A pre-filled set of values to include in the input (e.g., {postalCode: '94110'}).\n     * Note that sensitive card information (card number, CVC, and expiration date)\n     * cannot be pre-filled\n     */\n    value?: string;\n\n    /**\n     * Hide the postal code field. Default is false. If you are already collecting a\n     * full billing address or postal code elsewhere, set this to true.\n     */\n    hidePostalCode?: boolean;\n\n    /**\n     * Appearance of the icon in the Element.\n     */\n    iconStyle?: IconStyle;\n}\n\nexport interface IbanElementOptions extends BaseElementOptions {\n    /**\n     * Specify the list of countries or country-groups whose IBANs you want to allow.\n     * Must be ['SEPA'].\n     */\n    supportedCountries?: string[];\n\n    /**\n     * Customize the country and format of the placeholder IBAN. Default is DE.\n     */\n    placeholderCountry?: string;\n\n    /**\n     * Appearance of the icon in the Element.\n     */\n    iconStyle?: IconStyle;\n}\n\nexport interface IdealElementOptions extends BaseElementOptions {\n    value?: string;\n\n    /**\n     * Hides the icon in the Element. Default is false.\n     */\n    hideIcon?: boolean;\n\n    /**\n     * Applies a disabled state to the Element such that user input is not accepted. Default is false.\n     */\n    disabled?: boolean;\n}\n\nexport enum IconStyle {\n    Solid = 'solid',\n    Default = 'default',\n}\n\n/**\n * Customize the appearance of an element using CSS properties passed in a `Style` object,\n * which consists of CSS properties nested under objects for each variant.\n */\nexport interface StripeElementStyle {\n    /**\n     * Base variant—all other variants inherit from these styles.\n     */\n    base?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has valid input.\n     */\n    complete?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has no customer input.\n     */\n    empty?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has invalid input.\n     */\n    invalid?: StripeElementStyleVariant;\n}\n\n/**\n * Set custom class names on the container DOM element when the Stripe element is in a particular state.\n */\nexport interface StripeElementClasses {\n    /**\n     * The base class applied to the container. Defaults to StripeElement.\n     */\n    base?: string;\n\n    /**\n     * The class name to apply when the Element is complete. Defaults to StripeElement--complete.\n     */\n    complete?: string;\n\n    /**\n     * The class name to apply when the Element is empty. Defaults to StripeElement--empty.\n     */\n    empty?: string;\n\n    /**\n     * The class name to apply when the Element is focused. Defaults to StripeElement--focus.\n     */\n    focus?: string;\n\n    /**\n     * The class name to apply when the Element is invalid. Defaults to StripeElement--invalid.\n     */\n    invalid?: string;\n\n    /**\n     * The class name to apply when the Element has its value autofilled by the browser\n     * (only on Chrome and Safari). Defaults to StripeElement--webkit-autofill.\n     */\n    webkitAutoFill?: string;\n}\n\nexport interface StripeAddress {\n    /**\n     * City, district, suburb, town, or village.\n     */\n    city?: string;\n\n    /**\n     * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n     */\n    country?: string;\n\n    /**\n     * Address line 1 (e.g., street, PO Box, or company name).\n     */\n    line1: string;\n\n    /**\n     * Address line 2 (e.g., apartment, suite, unit, or building).\n     */\n    line2?: string;\n\n    /**\n     * ZIP or postal code.\n     */\n    postal_code?: string;\n\n    /**\n     * State, county, province, or region.\n     */\n    state?: string;\n}\n\nexport interface StripeBillingDetails {\n    /**\n     * Billing address.\n     */\n    address?: StripeAddress;\n\n    /**\n     * Email address.\n     */\n    email?: string;\n\n    /**\n     * Full name.\n     */\n    name?: string;\n\n    /**\n     * Billing phone number (including extension).\n     */\n    phone?: string;\n}\n\nexport interface StripeShippingAddress {\n    /**\n     * Shipping Address\n     */\n    address: StripeAddress;\n\n    /**\n     * Recipient name\n     */\n    name: string;\n\n    /**\n     * The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.\n     */\n    carrier?: string;\n\n    /**\n     * Recipient phone (including extension).\n     */\n    phone?: string;\n\n    /**\n     * The tracking number for a physical product, obtained from the delivery service.\n     * If multiple tracking numbers were generated for this purchase, please separate them with commas.\n     */\n    tracking_number?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmAlipayPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmAlipayPaymentData {\n    /**\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmCardPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmCardPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodCardData;\n\n    /**\n     * The [shipping details](https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n     *\n     * @recommended\n     */\n    shipping?: StripeShippingAddress;\n\n    /**\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n\n    /**\n     * Indicates that you intend to make future payments with this PaymentIntent's payment method.\n     *\n     * If present, the payment method used with this PaymentIntent can be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer, even after the transaction completes.\n     *\n     * Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow.\n     */\n    setup_future_usage?: 'off_session' | 'on_session' | null;\n}\n\n/**\n * Data to be sent with a `stripe.confirmIdealPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmIdealPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodIdealData;\n\n    /**\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmSEPAPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmSepaPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodSepaData;\n}\n\nexport type StripeConfirmPaymentData = StripeConfirmAlipayPaymentData | StripeConfirmCardPaymentData | StripeConfirmIdealPaymentData | StripeConfirmSepaPaymentData | undefined;\n\nexport type StripeElementOptions = CardElementOptions | IdealElementOptions | IbanElementOptions;\n\nexport interface StripeElement {\n    /**\n     * The `element.mount` method attaches your element to the DOM.\n     */\n    mount(domElement: string | HTMLElement): void;\n\n    /**\n     * Removes the element from the DOM and destroys it.\n     * A destroyed element can not be re-activated or re-mounted to the DOM.\n     */\n    destroy(): void;\n\n    /**\n     * Unmounts the element from the DOM.\n     * Call `element.mount` to re-attach it to the DOM.\n     */\n    unmount(): void;\n}\n\nexport interface StripeElements {\n    /**\n     * Creates a `AlipayElement` | `CardElement` | `IdealBankElement` | `IbanElement`.\n     */\n    create(\n        elementType: StripeElementType,\n        options?: StripeElementOptions\n    ): StripeElement;\n\n    /**\n     * Looks up a previously created `Element` by its type.\n     */\n    getElement(elementType: StripeElementType): StripeElement | null;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CssFontSource {\n    /**\n     * A relative or absolute URL pointing to a CSS file with [@font-face](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face) definitions, for example:\n     * `https://fonts.googleapis.com/css?family=Open+Sans`\n     * Note that if you are using a [content security policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) (CSP),\n     * [additional directives](https://stripe.com/docs/security#content-security-policy) may be necessary.\n     */\n    cssSrc: string;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CustomFontSource {\n    /**\n     * The name to give the font.\n     */\n    family: string;\n\n    /**\n     * A valid [src](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src) value pointing to your\n     * custom font file. This is usually (though not always) a link to a file with a .woff , .otf, or .svg suffix.\n     */\n    src: string;\n\n    /**\n     * A valid [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) value.\n     */\n    display?: string;\n\n    /**\n     * One of normal, italic, oblique. Defaults to normal.\n     */\n    style?: string;\n\n    /**\n     * A valid [unicode-range](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range) value.\n     */\n    unicodeRange?: string;\n\n    /**\n     * A valid [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight). Note that this is a string, not a number.\n     */\n    weight?: string;\n}\n\nexport type CustomFont = CssFontSource | CustomFontSource;\n\nexport interface StripeElementsOptions {\n    /**\n     * An array of custom fonts, which elements created from the Elements object can use.\n     * Fonts can be specified as [CssFontSource](https://stripe.com/docs/js/appendix/css_font_source_object)\n     * or [CustomFontSource](https://stripe.com/docs/js/appendix/custom_font_source_object) objects.\n     */\n    fonts?: CustomFont[];\n\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n}\n\nexport interface StripeConfirmPaymentOptions {\n    /**\n     * Set this to false if you want to [manually handle the authorization redirect](https://stripe.com/docs/payments/ideal#handle-redirect). Default is true.\n     */\n    handleActions?: boolean;\n}\n\nexport interface StripeV3Client {\n    /**\n     * Create an `Elements` instance, which manages a group of elements.\n     */\n    elements(options?: StripeElementsOptions): StripeElements;\n\n    /**\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_alipay_payment\n     *\n     * Use `stripe.confirmAlipayPayment` in the Alipay payment method creation flow when the customer submits your payment form.\n     * When called, it will confirm the [PaymentIntent](https://stripe.com/docs/api/payment_intents) with data you provide, and it will automatically\n     * redirect the customer to the authorize the transaction. Once authorization is complete, the customer will be redirected\n     * back to your specified `return_url`. When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * If you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\n     * These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * `stripe.confirmAlipayPayment` by default, will trigger a redirect when successful. If there is an error, or when handling\n     * `next_actions` manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\n     * This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that `stripe.confirmAlipayPayment` may take several seconds to complete. During that time, you should disable your\n     * form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should\n     * be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     */\n    confirmAlipayPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmAlipayPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions\n    ): Promise<{paymentIntent?: PaymentIntent; error?: StripeError}>;\n\n    /**\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_card_payment\n     *\n     * Use `stripe.confirmCardPayment` when the customer submits your payment form.\n     * When called, it will confirm the [PaymentIntent](https://stripe.com/docs/api/payment_intents)\n     * with `data` you provide and carry out 3DS or other next actions if they are required.\n     *\n     * If you are using [Dynamic 3D Secure](https://stripe.com/docs/payments/3d-secure#three-ds-radar), `stripe.confirmCardPayment` will\n     * trigger your Radar rules to execute and may open a dialog for your customer to authenticate their payment.\n     *\n     * When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * It can also be called with an existing `PaymentMethod`, or if you have already attached a PaymentMethod you can call this\n     * method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * `stripe.confirmCardPayment` will return a Promise which resolves with a result object.\n     * This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that stripe.confirmCardPayment may take several seconds to complete. During that time, you should disable\n     * your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result,\n     * you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     *\n     * Additionally, `stripe.confirmCardPayment may trigger` a [3D Secure](https://stripe.com/docs/payments/3d-secure) authentication\n     * challenge. This will be shown in a modal dialog and may be confusing for customers using assistive technologies like\n     * screen readers. You should make your form accessible by ensuring that success or error messages are clearly read out\n     * after this method completes.\n     *\n     */\n    confirmCardPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmCardPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions\n    ): Promise<{paymentIntent?: PaymentIntent; error?: StripeError}>;\n\n    /**\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_ideal_payment\n     *\n     * Use `stripe.confirmIdealPayment` in the [iDEAL Payments with Payment Methods](https://stripe.com/docs/payments/ideal)\n     * flow when the customer submits your payment form. When called, it will confirm the `PaymentIntent` with `data` you\n     * provide, and it will automatically redirect the customer to the authorize the transaction.\n     * Once authorization is complete, the customer will be redirected back to your specified `return_url`.\n     *\n     * When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * It can also be called with an existing `PaymentMethod`, or if you have already attached a PaymentMethod you can call this\n     * method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * By default, `stripe.confirmIdealPayment` will trigger a redirect when successful. If there is an error, or when handling\n     * next actions manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result`\n     * object. This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that `stripe.confirmIdealPayment` may take several seconds to complete. During that time, you should disable\n     * your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result,\n     * you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     */\n    confirmIdealPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmIdealPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions\n    ): Promise<{paymentIntent?: PaymentIntent; error?: StripeError}>;\n\n    /**\n     *\n     * Use `stripe.confirmSepaDebitPayment` in the [SEPA Direct Debit Payments](https://stripe.com/docs/payments/sepa-debit)\n     * with Payment Methods flow when the customer submits your payment form. When called, it will confirm the\n     * [PaymentIntent](https://stripe.com/docs/api/payment_intents) with `data` you provide. Note that there are some additional\n     * requirements to this flow that are not covered in this reference. Refer to our [integration guide](https://stripe.com/docs/payments/sepa-debit\n     * for more details.\n     *\n     * When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent,\n     * this method can automatically create and attach a new PaymentMethod for you. If you have already attached a\n     * [PaymentMethod](https://stripe.com/docs/api/payment_methods) you can call this method without needing to provide any additional data.\n     * These use cases are detailed in the sections that follow.\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_sepa_debit_payment\n     */\n    confirmSepaDebitPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n         */\n        data?: StripeConfirmSepaPaymentData\n    ): Promise<{paymentIntent?: PaymentIntent; error?: StripeError}>;\n}\n\nexport interface StripeHostWindow extends Window {\n    Stripe?(\n        stripePublishableKey: string,\n        options?: StripeConfigurationOptions\n    ): StripeV3Client;\n}\n\nexport enum StripeElementType {\n    Alipay = 'alipay',\n    CreditCard = 'card',\n    iDEAL = 'idealBank',\n    Sepa = 'iban',\n}\n\nexport enum StripePaymentMethodType {\n    Alipay = 'alipay',\n    CreditCard = 'card',\n    iDEAL = 'ideal',\n    Sepa = 'sepa_debit',\n}\n\n/**\n * Initialization options.\n */\nexport interface StripeConfigurationOptions {\n    /**\n     * For usage with [Connect](https://stripe.com/docs/connect) only.\n     * Specifying a connected account ID (e.g., acct_24BFMpJ1svR5A89k) allows you to perform actions on behalf of that account.\n     */\n    stripeAccount: string;\n\n    /**\n     * Override your account's [API version](https://stripe.com/docs/api/versioning)\n     */\n    apiVersion?: string;\n\n    /**\n     * A locale used to globally configure localization in Stripe. Setting the locale here will localize error strings for all Stripe.js methods. It will also configure the locale for Elements and Checkout. Default is auto (Stripe detects the locale of the browser).\n     * Note that Checkout supports a slightly different set of locales than Stripe.js.\n     */\n    locale?: string;\n\n    betas?: string[];\n}\n\nexport interface StripeAdditionalActionData {\n    redirect_url: string;\n}\n\nexport interface StripeAdditionalAction {\n    type: string;\n    data: StripeAdditionalActionData;\n}\n\nexport interface StripeAdditionalActionError {\n    body: {\n        errors?: Array<{ code: string; message?: string }>;\n        additional_action_required: StripeAdditionalAction;\n    };\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as unknown as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { isBillingAddressLike, BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { PaymentIntent, StripeAdditionalAction, StripeAdditionalActionError, StripeAddress, StripeBillingDetails, StripeConfirmCardPaymentData, StripeConfirmIdealPaymentData, StripeConfirmPaymentData, StripeConfirmSepaPaymentData, StripeElement, StripeElements, StripeElementType, StripeError, StripePaymentMethodType, StripeShippingAddress, StripeV3Client } from './stripev3';\nimport StripeV3PaymentInitializeOptions from './stripev3-initialize-options';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _initializeOptions?: PaymentInitializeOptions;\n    private _stripeV3Client?: StripeV3Client;\n    private _stripeElements?: StripeElements;\n    private _stripeElement?: StripeElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _locale: string\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._initializeOptions = options;\n        this._stripeV3Client = await this._loadStripeJs();\n        this._stripeElement = await this._mountElement(this._getInitializeOptions().methodId);\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n        let paymentIntent: PaymentIntent;\n        let paymentPayload: any;\n\n        if (!payment || !payment.paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { paymentData, gatewayId, methodId } = payment;\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } = paymentData as HostedInstrument;\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { isStoreCreditApplied : useStoreCredit } = this._store.getState().checkout.getCheckoutOrThrow();\n\n        if (useStoreCredit) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        if (isVaultedInstrument(paymentData)) {\n            try {\n                return await this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}));\n            } catch (paymentError) {\n                const isThreeDSecureRequiredError = paymentError instanceof RequestError &&\n                    some(paymentError.body.errors, { code: 'three_d_secure_required' });\n\n                if (!isThreeDSecureRequiredError) {\n                    return Promise.reject(paymentError);\n                }\n\n                const clientSecret = paymentError.body.three_ds_result.token;\n\n                paymentIntent = await this._confirmVaultedPayment(clientSecret);\n\n                paymentPayload = {\n                    methodId,\n                    paymentData: {\n                        nonce: paymentIntent.id,\n                    },\n                };\n            }\n        } else {\n            const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(`${gatewayId}?method=${methodId}`));\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            paymentIntent = await this._confirmStripePayment(paymentMethod, shouldSaveInstrument);\n\n            paymentPayload = {\n                methodId,\n                paymentData: {\n                    ...paymentData,\n                    nonce: paymentIntent.id,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                },\n            };\n        }\n\n        try {\n            return await this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n        } catch (error) {\n            return await this._processAdditionalAction(error);\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._unmountElement();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private async _processAdditionalAction(error: StripeAdditionalActionError): Promise<any> {\n        const isAdditionalActionError = some(error.body.errors, {code: 'additional_action_required'});\n\n        if (isAdditionalActionError) {\n            const action: StripeAdditionalAction = error.body.additional_action_required;\n            if (action && action.type === 'redirect_to_url') {\n                return new Promise(() => {\n                    window.location.replace(action.data.redirect_url);\n                });\n            }\n        }\n\n        return Promise.reject(error);\n    }\n\n    private async _confirmStripePayment(\n        paymentMethod: PaymentMethod,\n        shouldSaveInstrument: boolean\n    ): Promise<PaymentIntent> {\n        const { clientToken: clientSecret, returnUrl } = paymentMethod;\n\n        if (!clientSecret) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        let data;\n        let error: StripeError | undefined;\n        let paymentIntent: PaymentIntent | undefined;\n\n        return new Promise(async (resolve, reject) => {\n\n            switch (paymentMethod.method) {\n                case StripeElementType.Alipay:\n                    ({error, paymentIntent} = await this._getStripeJs().confirmAlipayPayment(\n                        clientSecret, { return_url: returnUrl }, { handleActions: false }));\n\n                    break;\n\n                case StripeElementType.CreditCard:\n                    data = this._mapStripePaymentData(StripePaymentMethodType.CreditCard, shouldSaveInstrument);\n                    ({error, paymentIntent} = await this._getStripeJs().confirmCardPayment(clientSecret, data));\n\n                    break;\n\n                case StripeElementType.iDEAL:\n                    data = this._mapStripePaymentData(StripePaymentMethodType.iDEAL, returnUrl);\n                    ({error, paymentIntent} = await this._getStripeJs().confirmIdealPayment(\n                        clientSecret, data, { handleActions: false }));\n\n                    break;\n\n                case StripeElementType.Sepa:\n                    data = this._mapStripePaymentData(StripePaymentMethodType.Sepa);\n                    ({error, paymentIntent} = await this._getStripeJs().confirmSepaDebitPayment(clientSecret, data));\n\n                    break;\n            }\n\n            if (error) {\n                reject(error);\n            }\n\n            resolve(paymentIntent);\n        });\n    }\n\n    private async _confirmVaultedPayment(\n        clientSecret: string\n    ): Promise<PaymentIntent> {\n        return new Promise(async (resolve, reject) => {\n            const {error, paymentIntent} = await this._getStripeJs().confirmCardPayment(clientSecret);\n\n            if (error) {\n                reject(error);\n            }\n\n            resolve(paymentIntent);\n        });\n    }\n\n    private _getInitializeOptions(): PaymentInitializeOptions {\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._initializeOptions;\n    }\n\n    private _getStripeInitializeOptions(): StripeV3PaymentInitializeOptions {\n        const { stripev3 } = this._getInitializeOptions();\n\n        if (!stripev3) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        return stripev3;\n    }\n\n    private _getStripeElement(): StripeElement {\n        if (!this._stripeElement) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeElement;\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private async _loadStripeJs(): Promise<StripeV3Client> {\n        if (this._stripeV3Client) { return Promise.resolve(this._stripeV3Client); }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethodOrThrow(this._getInitializeOptions().methodId);\n        const { initializationData: { stripePublishableKey, stripeConnectedAccount } } = paymentMethod;\n\n        return await this._stripeScriptLoader.load(\n            stripePublishableKey,\n            stripeConnectedAccount,\n            this._locale\n        );\n    }\n\n    private _mountElement(methodId: string): Promise<StripeElement> {\n        const stripeElementType = methodId as StripeElementType;\n        const { options, containerId } = this._getStripeInitializeOptions();\n\n        let stripeElement: StripeElement;\n\n        return new Promise((resolve, reject) => {\n            if (!this._stripeElements) {\n                this._stripeElements = this._getStripeJs().elements();\n            }\n\n            switch (stripeElementType) {\n                case StripeElementType.CreditCard:\n                case StripeElementType.iDEAL:\n                case StripeElementType.Sepa:\n                    stripeElement = this._stripeElements.getElement(stripeElementType) || this._stripeElements.create(stripeElementType, options);\n\n                    try {\n                        stripeElement.mount(`#${containerId}`);\n                    } catch (error) {\n                        reject(new InvalidArgumentError('Unable to mount Stripe component without valid container ID.'));\n                    }\n\n                    break;\n\n                case StripeElementType.Alipay:\n                    break;\n            }\n\n            resolve(stripeElement);\n        });\n    }\n\n    private _mapStripeAddress(address?: Address): StripeAddress {\n        if (address) {\n            const {\n                city,\n                countryCode: country,\n                address1: line1,\n                address2: line2,\n                postalCode,\n                stateOrProvinceCode: state,\n            } = address;\n\n            return { city, country, line1, line2, postal_code: postalCode, state };\n        }\n\n        return { line1: '' };\n    }\n\n    private _mapStripeBillingDetails(billingAddress?: BillingAddress, customer?: Customer): StripeBillingDetails {\n        const { firstName, lastName } = billingAddress || customer || { firstName: 'Guest', lastName: '' };\n        const name = `${firstName} ${lastName}`.trim();\n\n        const address = {\n            address:  this._mapStripeAddress(billingAddress),\n        };\n\n        if (customer && customer.addresses[0] && isBillingAddressLike(customer.addresses[0])) {\n            const customerAddress = customer.addresses[0];\n            const { email } = customer;\n            const { phone } = customerAddress;\n\n            return phone ? { ...address, email, name, phone } : { ...address, email, name };\n        }\n\n        if (billingAddress) {\n            const { email, phone } = billingAddress;\n\n            return phone ? { ...address, email, name, phone } : { ...address, email, name };\n        }\n\n        return {...address, name};\n    }\n\n    private _mapStripePaymentData(element: StripePaymentMethodType.CreditCard, shouldSaveInstrument: boolean): StripeConfirmCardPaymentData;\n    private _mapStripePaymentData(element: StripePaymentMethodType.iDEAL, returnUrl?: string): StripeConfirmIdealPaymentData;\n    private _mapStripePaymentData(element: StripePaymentMethodType.Sepa): StripeConfirmSepaPaymentData;\n    private _mapStripePaymentData(element: StripePaymentMethodType, arg2?: any): StripeConfirmPaymentData {\n        const customer = this._store.getState().customer.getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n        let result: Partial<StripeConfirmPaymentData>;\n\n        result = {\n            payment_method: {\n                [element]: this._getStripeElement(),\n                billing_details: this._mapStripeBillingDetails(billingAddress, customer),\n            },\n        };\n\n        switch (element) {\n            case StripePaymentMethodType.CreditCard:\n                const cart = this._store.getState().cart.getCart();\n\n                if (cart && getShippableItemsCount(cart) > 0) {\n                    const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n                    result = { ...result, shipping: this._mapStripeShippingAddress(shippingAddress, customer) };\n                }\n\n                return arg2 ? { ...result, setup_future_usage: 'off_session' } : result;\n\n            case StripePaymentMethodType.iDEAL:\n                return { ...result, return_url: arg2 };\n\n        }\n\n        return result;\n    }\n\n    private _mapStripeShippingAddress(shippingAddress?: Address, customer?: Customer): StripeShippingAddress {\n        const { firstName, lastName } = shippingAddress || customer || { firstName: 'Guest', lastName: '' };\n        const name = `${firstName} ${lastName}`.trim();\n\n        const address = {\n            address:  this._mapStripeAddress(shippingAddress),\n        };\n\n        if (customer && customer.addresses[0]) {\n            const customerAddress = customer.addresses[0];\n            const { phone } = customerAddress;\n\n            return { ...address, name, phone };\n        }\n\n        if (shippingAddress) {\n            const { phone } = shippingAddress;\n\n            return {...address, name, phone};\n        }\n\n        return {...address, name};\n    }\n\n    private _unmountElement(): void {\n        if (this._stripeElement) {\n            this._stripeElement.unmount();\n            this._stripeElement = undefined;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(stripePublishableKey: string, stripeAccount: string, locale?: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Stripe(stripePublishableKey, {\n                    stripeAccount,\n                    locale,\n                    betas: ['payment_intent_beta_3', 'alipay_pm_beta_1'],\n                    apiVersion: '2020-03-02;alipay_beta=v1',\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as unknown as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    async initialize(): Promise<InternalCheckoutSelectors> {\n        const zip = await this._zipScriptLoader.load();\n        this._zipClient = zip;\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { isStoreCreditApplied: useStoreCredit } = this._store.getState().checkout.getCheckoutOrThrow();\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n        await this._store.dispatch(this._remoteCheckoutActionCreator.initializePayment(payment.methodId, { useStoreCredit }));\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options));\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            zipClient.Checkout.init({\n                onComplete: async ({ checkoutId, state }) => {\n                    if (state === ZipModalEvent.CancelCheckout) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                        await this._prepareForReferredRegistration(payment.methodId, checkoutId);\n\n                        return resolve();\n                    }\n\n                    if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                        return resolve(checkoutId);\n                    }\n\n                    if (state === ZipModalEvent.CheckoutDeclined) {\n                        return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n                onCheckout: openModal => {\n                    if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    openModal(JSON.parse(this._paymentMethod.clientToken));\n                },\n            });\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce },\n            }));\n        }\n\n        return this._store.getState();\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response<any>> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { Zip, ZipHostWindow } from '../zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport PaymentInstrument, { VaultAccessToken } from './instrument';\nimport { BankInternalInstrument, InstrumentsResponseBody, InstrumentErrorResponseBody, InternalInstrument, InternalInstrumentsResponseBody, InternalInstrumentErrorResponseBody, InternalVaultAccessTokenResponseBody, PayPalInternalInstrument } from './instrument-response-body';\nimport { mapToBankInstrument } from './map-to-bank-instrument';\nimport { mapToCardInstrument } from './map-to-card-instrument';\nimport { mapToPayPalInstrument } from './map-to-paypal-instrument';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): PaymentInstrument[] {\n        return vaultedInstruments\n            .map(instrument => {\n                if (this._isPayPalInstrument(instrument)) {\n                    return mapToPayPalInstrument(instrument);\n                }\n\n                if (this._isBankInstrument(instrument)) {\n                    return mapToBankInstrument(instrument);\n                }\n\n                return mapToCardInstrument(instrument);\n            });\n    }\n\n    private _isPayPalInstrument(instrument: InternalInstrument): instrument is PayPalInternalInstrument {\n        return instrument.method_type === 'paypal';\n    }\n\n    private _isBankInstrument(instrument: InternalInstrument): instrument is BankInternalInstrument {\n        return instrument.method_type === 'bank';\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { PayPalInstrument } from './instrument';\nimport { PayPalInternalInstrument } from './instrument-response-body';\n\nexport function mapToPayPalInstrument(instrument: PayPalInternalInstrument): PayPalInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        externalId: instrument.external_id,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        method: 'paypal',\n        type: 'account',\n    };\n}\n","import { BankInstrument } from './instrument';\nimport { BankInternalInstrument } from './instrument-response-body';\n\nexport function mapToBankInstrument(instrument: BankInternalInstrument): BankInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        externalId: instrument.external_id,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        accountNumber: instrument.account_number,\n        issuer: instrument.issuer,\n        iban: instrument.iban,\n        method: instrument.method,\n        type: 'bank',\n    };\n}\n","import { CardInstrument } from './instrument';\nimport { CardInternalInstrument } from './instrument-response-body';\n\nexport function mapToCardInstrument(instrument: CardInternalInstrument): CardInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        iin: instrument.iin,\n        last4: instrument.last_4,\n        expiryMonth: instrument.expiry_month,\n        expiryYear: instrument.expiry_year,\n        brand: instrument.brand,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        method: instrument.method,\n        type: 'card',\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody, InternalInstrumentsResponseBody, InternalInstrumentErrorResponseBody, InternalVaultAccessTokenResponseBody } from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get<InternalVaultAccessTokenResponseBody>(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport { ShippingStrategyAction, ShippingStrategyActionType, ShippingStrategyDeinitializeAction, ShippingStrategyInitializeAction, ShippingStrategySelectOptionAction, ShippingStrategyUpdateAddressAction } from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: ShippingRequestOptions): Observable<ShippingStrategyAction> {\n        return Observable.create((observer: Observer<ShippingStrategyAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(ShippingStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(ShippingStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        const updateAddressRequestBody = {\n            ...this._store.getState().shippingAddress.getShippingAddress(),\n            customFields: address.customFields,\n        } as AddressRequestBody;\n\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(updateAddressRequestBody, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { noop } from 'rxjs';\n\nimport { ConsignmentActionCreator, ShippingStrategyActionCreator } from '../..';\nimport { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayV2ChangeActionType, AmazonPayV2PaymentProcessor } from '../../../payment/strategies/amazon-pay-v2';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class AmazonPayV2ShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingShippingAddress);\n        }\n\n        const updateAddressRequestBody = {\n            ...shippingAddress,\n            customFields: address.customFields,\n        };\n\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(updateAddressRequestBody, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    async initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazonpay, methodId } = options;\n\n        if (!amazonpay || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazonpay\" argument is not provided.');\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        await this._amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        const { paymentToken } = paymentMethod.initializationData;\n        const buttonId = amazonpay.editAddressButtonId;\n\n        if (paymentToken && buttonId) {\n            this._bindEditButton(buttonId, paymentToken, 'changeAddress');\n        }\n\n        return this._store.getState();\n    }\n\n    async deinitialize(): Promise<InternalCheckoutSelectors> {\n        await this._amazonPayV2PaymentProcessor.deinitialize();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _bindEditButton(id: string, sessionId: string, changeAction: AmazonPayV2ChangeActionType): void {\n        const button = document.getElementById(id);\n\n        if (!button || !button.parentNode) {\n            return;\n        }\n\n        const clone = button.cloneNode(true);\n        button.parentNode.replaceChild(clone, button);\n\n        clone.addEventListener('click', () => this._showLoadingSpinner(() => new Promise(noop)));\n\n        this._amazonPayV2PaymentProcessor.bindButton(id, sessionId, changeAction);\n    }\n\n    private _showLoadingSpinner(callback?: () => Promise<void> | Promise<never>): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._shippingStrategyActionCreator.widgetInteraction(() => {\n\n            if (callback) {\n                return callback();\n            }\n\n            return Promise.reject();\n        }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { SignInEmailRequestBody } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailRequestSender from './signin-email-request-sender';\n\nexport default class SignInEmailActionCreator {\n    constructor(\n        private _requestSender: SignInEmailRequestSender\n    ) {}\n\n    sendSignInEmail(\n        emailRequest: SignInEmailRequestBody,\n        options?: RequestOptions\n    ): Observable<SendSignInEmailAction> {\n        return concat(\n            of(createAction(SignInEmailActionType.SendSignInEmailRequested)),\n            defer(async () => {\n                const { body } = await this._requestSender.sendSignInEmail(emailRequest, options);\n\n                return createAction(SignInEmailActionType.SendSignInEmailSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(SignInEmailActionType.SendSignInEmailFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\nimport { parseUrl } from '../common/url';\n\nimport { SignInEmail, SignInEmailRequestBody } from './signin-email';\n\nexport default class SignInEmailRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    sendSignInEmail(\n        {\n            email,\n            redirectUrl,\n        }: SignInEmailRequestBody,\n        {\n            timeout,\n        }: RequestOptions = {}\n    ): Promise<Response<SignInEmail>> {\n        const url = '/login.php?action=passwordless_login';\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: {\n            email,\n            redirect_url: redirectUrl || parseUrl(window.top.location.href).pathname,\n        }, headers, timeout });\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import { createCheckoutStoreErrorSelectorFactory, createCheckoutStoreSelectorFactory, createCheckoutStoreStatusSelectorFactory, CheckoutSelectors, InternalCheckoutSelectors } from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { omit, values } from 'lodash';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { FlashMessage, FlashMessageType, StoreConfig } from '../config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { CardInstrument, PaymentInstrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\nimport { SignInEmail } from '../signin-email';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type Instrument = CardInstrument;\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the sign-in email.\n     *\n     * @returns The sign-in email object if sent, otherwise undefined\n     */\n    getSignInEmail(): SignInEmail | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the available flash messages.\n     *\n     * Flash messages contain messages set by the server,\n     * e.g: when trying to sign in using an invalid email link.\n     *\n     * @param type - The type of flash messages to be returned. Optional\n     * @returns The flash messages if available, otherwise undefined.\n     */\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n    getInstruments(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getBillingAddress, getContextConfig) => clone(() => {\n            const billingAddress = getBillingAddress();\n            const context = getContextConfig();\n            const isEmptyBillingAddress = !billingAddress ||\n                values(omit(billingAddress, 'shouldSaveAddress', 'email', 'id'))\n                    .every(val => !val || !val.length);\n\n            if (isEmptyBillingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return billingAddress;\n                }\n\n                return {\n                    id: billingAddress ? billingAddress.id : '',\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    email: billingAddress ? billingAddress.email : '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return billingAddress;\n        })\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const getSignInEmail = createSelector(\n        ({ signInEmail }: InternalCheckoutSelectors) => signInEmail.getEmail,\n        getEmail => clone(getEmail)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstrumentsByPaymentMethod,\n        (getInstruments, getInstrumentsByPaymentMethod) => {\n            function getInstrumentsSelector(): Instrument[] | undefined;\n            function getInstrumentsSelector(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n            function getInstrumentsSelector(paymentMethod?: PaymentMethod): PaymentInstrument[] | undefined {\n                return paymentMethod ? getInstrumentsByPaymentMethod(paymentMethod) : getInstruments();\n            }\n\n            return clone(getInstrumentsSelector);\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    const getFlashMessages = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getFlashMessages,\n        getFlashMessages => clone(getFlashMessages)\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getFlashMessages: getFlashMessages(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getSignInEmail: getSignInEmail(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * The call could fail in scenarios where guest checkout is not allowed, for example, when existing accounts are required to sign-in.\n     *\n     * In the background, this call tries to set the billing address email using the Storefront API. You could access the Storefront API response status code using `getContinueAsGuestError` error selector.\n     *\n     * ```js\n     * console.log(state.errors.getContinueAsGuestError());\n     * console.log(state.errors.getContinueAsGuestError().status);\n     * ```\n     *\n     * For more information about status codes, check [Checkout Storefront API - Add Checkout Billing Address](https://developer.bigcommerce.com/api-reference/cart-checkout/storefront-checkout-api/checkout-billing-address/checkoutsbillingaddressbycheckoutidpost).\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update subscriptions.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateSubscriptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to send sign-in email.\n     *\n     * @returns The error object if unable to send email, otherwise undefined.\n     */\n    getSignInEmailError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateSubscriptionsError: state.subscriptions.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n            getSignInEmailError: state.signInEmail.getSendError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether spam check is executing.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isExecutingSpamCheck(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether a sign-in email is being sent.\n     *\n     * @returns True if sending a sign-in email, otherwise false\n     */\n    isSendingSignInEmail(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout is in a pending state.\n     *\n     * The shipping step is considered to be pending if it is in the process of\n     * initializing, updating address, selecting a shipping option, and/or\n     * interacting with a shipping widget.\n     *\n     * @returns True if the shipping step is pending, otherwise false.\n     */\n    isShippingStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n\n    /**\n     * Checks whether the subscriptions are being updated.\n     *\n     * @returns True if updating subscriptions, otherwise false.\n     */\n    isUpdatingSubscriptions(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isShippingStepPending = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isInitializing,\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isUpdatingAddress,\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isWidgetInteracting,\n        (isInitializing, isUpdatingAddress, isSelectingOption, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isUpdatingAddress(methodId) ||\n                isSelectingOption(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isSubmittingOrder = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ checkout }: InternalCheckoutSelectors) => checkout.isExecutingSpamCheck, // Remove this when CheckoutService#initializeSpamProtection is deprecated\n        (isExecuting, isExecutingSpamCheck) => (methodId?: string) => {\n            return (\n                isExecuting(methodId) ||\n                isExecutingSpamCheck()\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isExecutingSpamCheck: state.checkout.isExecutingSpamCheck,\n            isSubmittingOrder: isSubmittingOrder(state),\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isUpdatingSubscriptions: state.subscriptions.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isSendingSignInEmail: state.signInEmail.isSending,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isShippingStepPending: isShippingStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { SignInEmailActionCreator, SignInEmailRequestBody } from '../signin-email';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../spam-protection';\nimport { StoreCreditActionCreator } from '../store-credit';\nimport { Subscriptions, SubscriptionsActionCreator } from '../subscription';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _signInEmailActionCreator: SignInEmailActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _subscriptionsActionCreator: SubscriptionsActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Sends a email that contains a single-use sign-in link. When a valid links is clicked,\n     * signs in the customer without requiring any password, redirecting them to the account page if no redirectUrl is provided.\n     *\n     *\n     * ```js\n     * checkoutService.sendSignInEmail({ email: 'foo@bar.com', redirectUrl: 'checkout' });\n     * ```\n     *\n     * @param signInEmailRequest - The sign-in email request values.\n     * @param options - Options for the send email request.\n     * @returns A promise that resolves to the current state.\n     */\n    sendSignInEmail(signInEmailRequest: SignInEmailRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._signInEmailActionCreator.sendSignInEmail(signInEmailRequest, options);\n\n        return this._dispatch(action, { queueId: 'signInEmail' });\n    }\n\n    /**\n     * Updates the subscriptions associated to an email.\n     *\n     * @param subscriptions - The email and associated subscriptions to update.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    updateSubscriptions(subscriptions: Subscriptions, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._subscriptionsActionCreator.updateSubscriptions(subscriptions, options);\n\n        return this._dispatch(action, { queueId: 'subscriptions' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * If your Checkout Settings allow it, your customers could continue the checkout as guests (without signing in).\n     * If you have enabled the checkout setting \"Prompt existing accounts to sign in\", this information is\n     * exposed as part of the [Customer](../interfaces/customer.md) object.\n     *\n     * Once they provide their email address, it will be stored as\n     * part of their [billing address](../interfaces/billingaddress.md).\n     *\n     * @param credentials - The guest credentials to use, with optional subscriptions.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(\n        address: Partial<AddressRequestBody>,\n        options?: ShippingRequestOptions<CheckoutParams>\n    ): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action)\n            .then(() => this.loadInstruments());\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * Note: Use `CheckoutService#executeSpamCheck` instead.\n     * You do not need to call this method before calling\n     * `CheckoutService#executeSpamCheck`.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection();\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     * @deprecated - Use CheckoutService#executeSpamCheck instead.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Verifies whether the current checkout is created by a human.\n     *\n     * Note: this method will do the initialization, therefore you do not\n     * need to call `CheckoutService#initializeSpamProtection`\n     * before calling this method.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails. You should call this method before\n     * `submitOrder` method is called (i.e.: when the shopper\n     * first gets to the payment step).\n     *\n     * **Note**: You need to enable Google ReCAPTCHA bot protection in your Checkout Settings.\n     *\n     * ```js\n     * await service.executeSpamCheck();\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    executeSpamCheck(): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.execute();\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState, ConfigWindow } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\nimport { SignInEmailActionCreator, SignInEmailRequestSender } from '../signin-email';\nimport { createSpamProtection, SpamProtectionActionCreator, SpamProtectionRequestSender } from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n            variantIdentificationToken: (window as ConfigWindow).checkoutVariantIdentificationToken,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionRequestSender = new SpamProtectionRequestSender(requestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection, spamProtectionRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender)\n    );\n    const subscriptionsActionCreator = new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            subscriptionsActionCreator\n        ),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection, locale),\n            orderActionCreator,\n            spamProtectionActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        new SignInEmailActionCreator(new SignInEmailRequestSender(requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender)),\n        subscriptionsActionCreator\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { createBraintreeVisaCheckoutPaymentProcessor, BraintreeScriptLoader, BraintreeSDKCreator, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayAdyenV2Initializer, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayCheckoutcomInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { AmazonPayV2CustomerStrategy } from './strategies/amazon-pay-v2';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('googlepayadyenv2', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAdyenV2Initializer()\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazonpay', () =>\n        new AmazonPayV2CustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            createAmazonPayV2PaymentProcessor()\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepayauthorizenet', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaycheckoutcom', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayCheckoutcomInitializer(requestSender)\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader, getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { createSpamProtection, GoogleRecaptcha, PaymentHumanVerificationHandler, SpamProtectionActionCreator, SpamProtectionRequestSender } from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AdyenV2PaymentStrategy, AdyenV2ScriptLoader } from './strategies/adyenv2';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { createAmazonPayV2PaymentProcessor, AmazonPayV2PaymentStrategy } from './strategies/amazon-pay-v2';\nimport { BlueSnapV2PaymentStrategy } from './strategies/bluesnapv2';\nimport { BoltPaymentStrategy, BoltScriptLoader } from './strategies/bolt';\nimport { createBraintreePaymentProcessor, createBraintreeVisaCheckoutPaymentProcessor, BraintreeCreditCardPaymentStrategy, BraintreePaypalPaymentStrategy, BraintreeScriptLoader, BraintreeSDKCreator, BraintreeVisaCheckoutPaymentStrategy, VisaCheckoutScriptLoader } from './strategies/braintree';\nimport { CardinalClient, CardinalScriptLoader, CardinalThreeDSecureFlow } from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CreditCardRedirectPaymentStrategy } from './strategies/credit-card-redirect';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport { ExternalPaymentStrategy } from './strategies/external';\nimport { createGooglePayPaymentProcessor, GooglePayAdyenV2Initializer, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayCheckoutcomInitializer, GooglePayPaymentStrategy, GooglePayStripeInitializer } from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { KlarnaV2PaymentStrategy, KlarnaV2ScriptLoader } from './strategies/klarnav2';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { PaypalCommerceCreditCardPaymentStrategy, PaypalCommerceHostedForm, PaypalCommercePaymentProcessor, PaypalCommercePaymentStrategy, PaypalCommerceRequestSender, PaypalCommerceScriptLoader } from './strategies/paypal-commerce';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha,\n    locale: string\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender))\n    );\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection, new SpamProtectionRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const storeCreditActionCreator = new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender));\n    const paymentHumanVerificationHandler = new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader()));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer, paymentHumanVerificationHandler);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator, spamProtectionActionCreator);\n    const formPoster = createFormPoster();\n    const hostedFormFactory = new HostedFormFactory(store);\n\n    registry.register(PaymentStrategyType.ADYENV2, () =>\n        new AdyenV2PaymentStrategy(\n            store,\n            paymentActionCreator,\n            orderActionCreator,\n            new AdyenV2ScriptLoader(scriptLoader, getStylesheetLoader()),\n            locale\n        )\n    );\n\n    registry.register(PaymentStrategyType.ADYENV2_GOOGLEPAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAdyenV2Initializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AUTHORIZENET_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZONPAYV2, () =>\n        new AmazonPayV2PaymentStrategy(\n            store,\n            paymentStrategyActionCreator,\n            paymentMethodActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            createAmazonPayV2PaymentProcessor()\n        )\n    );\n\n    registry.register(PaymentStrategyType.BLUESNAPV2, () =>\n        new BlueSnapV2PaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHECKOUTCOM, () =>\n        new CreditCardRedirectPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNAV2, () =>\n        new KlarnaV2PaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaV2ScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_COMMERCE_CREDIT_CARD, () =>\n        new PaypalCommerceCreditCardPaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            new PaypalCommerceScriptLoader(scriptLoader),\n            new PaypalCommerceHostedForm(new PaypalCommerceRequestSender(requestSender)),\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_COMMERCE, () =>\n        new PaypalCommercePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new PaypalCommerceRequestSender(requestSender),\n            new PaypalCommercePaymentProcessor()\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_COMMERCE_CREDIT, () =>\n        new PaypalCommercePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new PaypalCommerceRequestSender(requestSender),\n            new PaypalCommercePaymentProcessor()\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHECKOUTCOM_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayCheckoutcomInitializer(requestSender)\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            remoteCheckoutActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.LAYBUY, () =>\n        new ExternalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SEZZLE, () =>\n        new ExternalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader),\n            storeCreditActionCreator,\n            locale\n        )\n    );\n\n    registry.register(PaymentStrategyType.BOLT, () =>\n        new BoltPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new BoltScriptLoader(scriptLoader)\n        )\n);\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreeHostedForm from './braintree-hosted-form';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const braintreeHostedForm = new BraintreeHostedForm(braintreeSDKCreator);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(\n        braintreeSDKCreator,\n        braintreeHostedForm,\n        overlay\n    );\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport ShippingStrategyActionCreator from './shipping-strategy-action-creator';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { AmazonPayV2ShippingStrategy } from './strategies/amazon-pay-v2';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('amazonpay', () =>\n        new AmazonPayV2ShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            createAmazonPayV2PaymentProcessor(),\n            new ShippingStrategyActionCreator(registry)\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { isObject, union } from 'lodash';\nimport MessageFormat from 'messageformat';\n\nimport { Logger } from '../common/log';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { keys } from 'lodash';\n\nimport { LineItemMap } from '../cart';\nimport { Checkout, CheckoutService } from '../checkout';\nimport { InvalidArgumentError } from '../common/error/errors';\nimport { ShopperCurrency, StoreProfile } from '../config';\nimport { Coupon } from '../coupon';\nimport { Order } from '../order';\nimport { ShippingOption } from '../shipping';\n\nimport { AnalyticsTracker } from './analytics-tracker-window';\nimport StepTracker from './step-tracker';\n\nexport interface StepTrackerConfig {\n    checkoutSteps?: AnalyticStepType[];\n}\n\nexport type AnalyticStepType = 'customer' | 'shipping' | 'billing' | 'payment';\n\nconst ORDER_ITEMS_STORAGE_KEY = 'ORDER_ITEMS';\n\nexport enum AnalyticStepId {\n    CUSTOMER = 1,\n    SHIPPING,\n    BILLING,\n    PAYMENT,\n}\n\nconst ANALYTIC_STEPS: { [key: string]: AnalyticStepId } = {\n    customer: AnalyticStepId.CUSTOMER,\n    shipping: AnalyticStepId.SHIPPING,\n    billing: AnalyticStepId.BILLING,\n    payment: AnalyticStepId.PAYMENT,\n};\n\nexport default class AnalyticsStepTracker implements StepTracker {\n    private _checkoutStarted: boolean = false;\n    private _completedSteps: { [key: string]: boolean } = {};\n    private _viewedSteps: { [key in AnalyticStepId]?: boolean; } = {};\n    private _analyticStepOrder: AnalyticStepType[] = [\n        'customer',\n        'shipping',\n        'billing',\n        'payment',\n    ];\n\n    constructor(\n        private checkoutService: CheckoutService,\n        private storage: StorageFallback,\n        private analytics: AnalyticsTracker,\n        { checkoutSteps }: StepTrackerConfig = {}\n    ) {\n        if (checkoutSteps !== undefined) {\n            if (checkoutSteps.some(value => !(value in ANALYTIC_STEPS))) {\n                throw new InvalidArgumentError(\n                    `Invalid checkout steps provided. Valid values are: ${keys(ANALYTIC_STEPS).join(', ')}.`\n                );\n            }\n            this._analyticStepOrder = checkoutSteps;\n\n        }\n    }\n\n    trackCheckoutStarted(): void {\n        if (this._checkoutStarted) {\n            return;\n        }\n\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const {\n            coupons,\n            grandTotal,\n            shippingCostTotal,\n            taxTotal,\n            cart: {\n                lineItems,\n                discountAmount,\n                id,\n            },\n        } = checkout;\n\n        const extraItemsData = this.saveExtraItemsData(id, lineItems);\n\n        this.analytics.track('Checkout Started', this.getTrackingPayload({\n            revenue: grandTotal,\n            shipping: shippingCostTotal,\n            tax: taxTotal,\n            discount: discountAmount,\n            coupons,\n            lineItems,\n            extraItemsData,\n        }));\n\n        this._checkoutStarted = true;\n    }\n\n    trackOrderComplete(): void {\n        const order = this.getOrder();\n\n        if (!order) {\n            return;\n        }\n\n        const {\n            isComplete,\n            orderId,\n            orderAmount,\n            shippingCostTotal,\n            taxTotal,\n            discountAmount,\n            coupons,\n            lineItems,\n            cartId,\n        } = order;\n\n        if (!isComplete) {\n            return;\n        }\n\n        const extraItemsData = this.readExtraItemsData(cartId);\n\n        if (extraItemsData === null) {\n            return;\n        }\n\n        this.analytics.track('Order Completed', this.getTrackingPayload({\n            orderId,\n            revenue: orderAmount,\n            shipping: shippingCostTotal,\n            tax: taxTotal,\n            discount: discountAmount,\n            coupons,\n            extraItemsData,\n            lineItems,\n        }));\n\n        this.clearExtraItemData(cartId);\n    }\n\n    trackStepViewed(step: AnalyticStepType): void {\n        const stepId = this.getIdFromStep(step);\n\n        if (!stepId || this.hasStepViewed(stepId)) {\n            return;\n        }\n\n        this.trackViewed(stepId);\n        this.backfill(stepId);\n    }\n\n    trackStepCompleted(step: AnalyticStepType): void {\n        const stepId = this.getIdFromStep(step);\n\n        if (!stepId || this.hasStepCompleted(stepId)) {\n            return;\n        }\n\n        this.backfill(stepId);\n        this.trackCompleted(stepId);\n    }\n\n    private backfill(stepId: AnalyticStepId): void {\n        for (const i of this._analyticStepOrder) {\n            const id = this.getIdFromStep(i);\n\n            if (!id) {\n                break;\n            }\n\n            if (!this.hasStepViewed(id)) {\n                this.trackViewed(id);\n            }\n\n            if (id === stepId) {\n                break;\n            }\n\n            if (!this.hasStepCompleted(id)) {\n                this.trackCompleted(id);\n            }\n        }\n    }\n\n    private trackCompleted(stepId: AnalyticStepId): void {\n        const shippingMethod = this.getSelectedShippingOption();\n        const { code: currency = '' } = this.getShopperCurrency() || {};\n        const paymentMethod = this.getPaymentMethodName();\n\n        const payload: {\n            step: number;\n            currency: string;\n            shippingMethod?: string;\n            paymentMethod?: string;\n        } = {\n            step: stepId,\n            currency,\n        };\n\n        if (shippingMethod) {\n            payload.shippingMethod = shippingMethod.description;\n        }\n\n        if (paymentMethod) {\n            payload.paymentMethod = paymentMethod;\n        }\n\n        // due to an issue with the way the segment library works, we must send at least one of the two\n        // options--otherwise it rejects the track call with no diagnostic messages. however, if we blindly\n        // include both options, it sends a single comma for the value, which is undesireable. by only adding\n        // one of the two (shippingMethod here being arbitrarily chosen), we always have at least one value, but\n        // never send two empty values.\n        if (!payload.shippingMethod && !payload.paymentMethod) {\n            payload.shippingMethod = ' ';\n        }\n\n        this.analytics.track('Checkout Step Completed', payload);\n\n        const shippingMethodId = shippingMethod ? shippingMethod.id : '';\n        const completedStepId = stepId === AnalyticStepId.SHIPPING ?\n            `${stepId}-${shippingMethodId}` :\n            stepId;\n\n        this._completedSteps[completedStepId] = true;\n    }\n\n    private getTrackingPayload({\n        orderId,\n        revenue,\n        shipping,\n        tax,\n        discount,\n        coupons,\n        extraItemsData,\n        lineItems,\n    }: {\n        orderId?: number;\n        revenue: number;\n        shipping: number;\n        tax: number;\n        discount: number;\n        coupons: Coupon[];\n        extraItemsData: ExtraItemsData;\n        lineItems: LineItemMap;\n    }) {\n        const { code = '' } = this.getShopperCurrency() || {};\n        const { storeName = '' } = this.getStoreProfile() || {};\n\n        return {\n            orderId,\n            affiliation: storeName,\n            revenue: this.toShopperCurrency(revenue),\n            shipping: this.toShopperCurrency(shipping),\n            tax: this.toShopperCurrency(tax),\n            discount: this.toShopperCurrency(discount),\n            coupon: (coupons || []).map(coupon => coupon.code.toUpperCase()).join(','),\n            currency: code,\n            products: this.getProducts(extraItemsData, lineItems),\n        };\n    }\n\n    private hasStepCompleted(stepId: AnalyticStepId): boolean {\n        const shippingOption = this.getSelectedShippingOption();\n        const shippingMethodId = shippingOption ? shippingOption.id : '';\n\n        return this._completedSteps.hasOwnProperty(stepId) ||\n            (\n                stepId === AnalyticStepId.SHIPPING &&\n                this._completedSteps.hasOwnProperty(`${stepId}-${shippingMethodId}`)\n            );\n    }\n\n    private hasStepViewed(stepId: AnalyticStepId): boolean {\n        return !!this._viewedSteps[stepId];\n    }\n\n    private getIdFromStep(step: string): AnalyticStepId | null {\n        const name = step.split('.');\n\n        return ANALYTIC_STEPS[name[0]] || null;\n    }\n\n    private trackViewed(stepId: AnalyticStepId): void {\n        const currency = this.getShopperCurrency();\n\n        this.analytics.track('Checkout Step Viewed', {\n            step: stepId,\n            currency: currency ? currency.code : '',\n        });\n\n        this._viewedSteps[stepId] = true;\n    }\n\n    private getOrder(): Order | undefined {\n        const { data: { getOrder } } = this.checkoutService.getState();\n\n        return getOrder();\n    }\n\n    private getCheckout(): Checkout | undefined {\n        const { data: { getCheckout } } = this.checkoutService.getState();\n\n        return getCheckout();\n    }\n\n    private getShopperCurrency(): ShopperCurrency | undefined {\n        const { data: { getConfig } } = this.checkoutService.getState();\n        const config = getConfig();\n\n        return config && config.shopperCurrency;\n    }\n\n    private getStoreProfile(): StoreProfile | undefined {\n        const { data: { getConfig } } = this.checkoutService.getState();\n        const config = getConfig();\n\n        return config && config.storeProfile;\n    }\n\n    private toShopperCurrency(amount: number): number {\n        const { exchangeRate = 1 } = this.getShopperCurrency() || {};\n\n        return Math.round(amount * exchangeRate * 100) / 100;\n    }\n\n    private saveExtraItemsData(id: string, lineItems: LineItemMap): ExtraItemsData {\n        const data = [\n            ...lineItems.physicalItems,\n            ...lineItems.digitalItems,\n        ].reduce((result, item) => {\n            result[item.productId] = {\n                brand: item.brand ? item.brand : '',\n                category: item.categoryNames ? item.categoryNames.join(', ') : '',\n            };\n\n            return result;\n        }, {} as ExtraItemsData);\n\n        try {\n            this.storage.setItem(this.getStorageKey(id), JSON.stringify(data));\n\n            return data;\n        } catch (err) {\n            return {};\n        }\n    }\n\n    private getStorageKey(id: string): string {\n        return id ? `${ORDER_ITEMS_STORAGE_KEY}_${id}` : '';\n    }\n\n    private readExtraItemsData(id: string): ExtraItemsData | null {\n        try {\n            const item = this.storage.getItem(this.getStorageKey(id));\n\n            return item ? JSON.parse(item) : null;\n        } catch (err) {\n            return null;\n        }\n    }\n\n    private clearExtraItemData(id: string): void {\n        try {\n            this.storage.removeItem(this.getStorageKey(id));\n        } catch (err) {\n            // silently ignore the failure\n        }\n    }\n\n    private getSelectedShippingOption(): ShippingOption | null {\n        const { data } = this.checkoutService.getState();\n        const shippingOption = data.getSelectedShippingOption();\n\n        return (shippingOption && shippingOption.id && shippingOption.description) ?\n            shippingOption :\n            null;\n    }\n\n    private getPaymentMethodName(): string {\n        const { data } = this.checkoutService.getState();\n        const paymentMethod = data.getSelectedPaymentMethod();\n\n        return (paymentMethod && paymentMethod.config) ?\n            paymentMethod.config.displayName || '' :\n            '';\n    }\n\n    private getProducts(itemsData: ExtraItemsData, lineItems: LineItemMap): AnalyticsProduct[] {\n        const customItems: AnalyticsProduct[] = (lineItems.customItems || []).map(item => ({\n            product_id: item.id,\n            sku: item.sku,\n            price: item.listPrice,\n            quantity: item.quantity,\n            name: item.name,\n        }));\n\n        const giftCertificateItems: AnalyticsProduct[] = lineItems.giftCertificates.map(item => {\n            return {\n                product_id: item.id,\n                price: this.toShopperCurrency(item.amount),\n                name: item.name,\n                quantity: 1,\n            };\n        });\n\n        const physicalAndDigitalItems: AnalyticsProduct[] = [\n            ...lineItems.physicalItems,\n            ...lineItems.digitalItems,\n        ].map(item => {\n            let itemAttributes;\n\n            if (item.options && item.options.length) {\n                itemAttributes = item.options.map(option => `${option.name}:${option.value}`);\n                itemAttributes.sort();\n            }\n\n            return {\n                product_id: item.productId,\n                sku: item.sku,\n                price: item.listPrice,\n                image_url: item.imageUrl,\n                name: item.name,\n                quantity: item.quantity,\n                brand: itemsData[item.productId] ? itemsData[item.productId].brand : '',\n                category: itemsData[item.productId] ? itemsData[item.productId].category : '',\n                variant: (itemAttributes || []).join(', '),\n            };\n        });\n\n        return [\n            ...customItems,\n            ...physicalAndDigitalItems,\n            ...giftCertificateItems,\n        ];\n    }\n}\n\nexport interface AnalyticsProduct {\n    product_id: string | number;\n    price: number;\n    quantity: number;\n    name: string;\n    sku?: string;\n    image_url?: string;\n    category?: string;\n    variant?: string;\n    brand?: string;\n}\n\nexport interface ExtraItemsData {\n    [productId: string]: {\n        brand: string;\n        category: string;\n    };\n}\n","import StepTracker from './step-tracker';\n\nexport default class NoopStepTracker implements StepTracker {\n    trackCheckoutStarted(): void {\n        return;\n    }\n\n    trackOrderComplete(): void {\n        return;\n    }\n\n    trackStepViewed(): void {\n        return;\n    }\n\n    trackStepCompleted(): void {\n        return;\n    }\n}\n","import localStorageFallback from 'local-storage-fallback';\n\nimport { CheckoutService } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport AnalyticsStepTracker, { StepTrackerConfig } from './analytics-step-tracker';\nimport { isAnalyticsTrackerWindow } from './is-analytics-step-tracker-window';\nimport NoopStepTracker from './noop-step-tracker';\nimport StepTracker from './step-tracker';\n\n/**\n * Creates an instance of `StepTracker`.\n *\n * @remarks\n * ```js\n * const checkoutService = createCheckoutService();\n * await checkoutService.loadCheckout();\n * const stepTracker = createStepTracker(checkoutService);\n *\n * stepTracker.trackCheckoutStarted();\n * ```\n *\n * @alpha\n * Please note that `StepTracker` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param CheckoutService - An instance of CheckoutService\n * @param StepTrackerConfig - A step tracker config object\n * @returns an instance of `StepTracker`.\n */\nexport default function createStepTracker(\n    checkoutService: CheckoutService,\n    stepTrackerConfig?: StepTrackerConfig\n): StepTracker {\n    const { data } = checkoutService.getState();\n    const config = data.getConfig();\n\n    if (!config) {\n        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n    }\n\n    const { isAnalyticsEnabled } = config.checkoutSettings;\n\n    if (isAnalyticsEnabled && isAnalyticsTrackerWindow(window)) {\n        return new AnalyticsStepTracker(\n            checkoutService,\n            localStorageFallback,\n            window.analytics,\n            stepTrackerConfig\n        );\n    }\n\n    return new NoopStepTracker();\n}\n","import AnalyticsTrackerWindow from './analytics-tracker-window';\n\nexport function isAnalyticsTrackerWindow(window: Window): window is AnalyticsTrackerWindow {\n    return Boolean((window as AnalyticsTrackerWindow).analytics);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from '../checkout';\nexport { createCheckoutButtonInitializer } from '../checkout-buttons';\nexport { embedCheckout } from '../embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from '../embedded-checkout/iframe-content';\nexport { createLanguageService } from '../locale';\nexport { createCurrencyService } from '../currency';\nexport { createStepTracker } from '../analytics';\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { ButtonColor, ButtonType, EnvironmentType, GooglePaymentData, GooglePayAddress, GooglePayClient, GooglePayInitializer, GooglePayPaymentDataRequestV2, GooglePaySDK, TokenizePayload } from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer.parseResponse(paymentData)\n            .then(tokenizePayload => this._postForm(tokenizePayload))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(\n                new SubscriptionsRequestSender(requestSender)\n            )\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { PaymentMethod } from '../..';\nimport { AmazonPayV2ButtonInitializeOptions } from '../../../checkout-buttons/strategies/amazon-pay-v2';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { AmazonPayV2ChangeActionType, AmazonPayV2SDK } from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private _amazonPayV2SDK?: AmazonPayV2SDK;\n\n    constructor(\n        private _amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader\n    ) { }\n\n    async initialize(paymentMethod: PaymentMethod): Promise<void> {\n        this._amazonPayV2SDK = await this._amazonPayV2ScriptLoader.load(paymentMethod);\n    }\n\n    deinitialize(): Promise<void> {\n        this._amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(buttonId: string, sessionId: string, changeAction: AmazonPayV2ChangeActionType): void {\n        this._getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonInitializeOptions): HTMLElement {\n        return this._getAmazonPayV2SDK().Pay.renderButton(containerId, options);\n    }\n\n    async signout(): Promise<void> {\n        if (this._amazonPayV2SDK) {\n            this._amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    private _getAmazonPayV2SDK(): AmazonPayV2SDK {\n        if (!this._amazonPayV2SDK) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._amazonPayV2SDK;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { AmazonPayV2HostWindow, AmazonPayV2Regions, AmazonPayV2SDK } from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AmazonPayV2HostWindow = window\n    ) {}\n\n    async load(method: PaymentMethod): Promise<AmazonPayV2SDK> {\n        const {\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const amazonPayV2Region  = (AmazonPayV2Regions as any)[region];\n\n        await this._scriptLoader.loadScript(`https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`);\n        if (!this._window.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.amazon;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(\n        new AmazonPayV2ScriptLoader(getScriptLoader())\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options\n                        );\n\n                        return createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body);\n                    })\n                ).pipe(\n                    catchError(error => throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error))\n                ),\n                this._updateCustomerConsent(credentials, options)\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _updateCustomerConsent(\n        {\n            email,\n            acceptsAbandonedCartEmails,\n            acceptsMarketingNewsletter,\n        }: GuestCredentials,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        if ((acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions({\n            email,\n            acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n            acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n        }, options);\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { Subscriptions, SubscriptionsActionType, SubscriptionsRequestSender, UpdateSubscriptionsAction } from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(\n        private _subscriptionsRequestSender: SubscriptionsRequestSender\n    ) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(subscriptions, options);\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(\n                SubscriptionsActionType.UpdateSubscriptionsFailed,\n                new UpdateSubscriptionsError(error)\n            ))\n        );\n    }\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n"],"sourceRoot":""}